{"title":"5大法则助你 成为更出色的开发者","uid":"4c45a5d6250916c34f3f63c144ebcf77","slug":"4c45a5d6250916c34f3f63c144ebcf77","date":"2020-03-17T14:34:58.000Z","updated":"2023-08-18T12:19:22.318Z","comments":true,"path":"api/articles/4c45a5d6250916c34f3f63c144ebcf77.json","keywords":null,"cover":"https://img-blog.csdnimg.cn/20200317002218652.png","content":"<p>在现在这个技术高速发展的时代，无论你是在校学生，还是技术职场中的精英，都会面临需要持续提升。但是如果只知道提升技术能力，忽略了一些技巧和技术素养的培养和习惯。你会发现你再有能力，也变得无用武之地。因为真正的强者是不会只依赖 TA 的装备。更多的是技巧，经验，应变能力还有思想。</p>\n<p>这篇文章会教 5 大法则助我们成为更出色的开发者，在众多开发者中脱颖而出的诀窍，也会在我们的技术职业生涯中给我们很多的帮助。</p>\n<hr>\n<h1 id=\"一、先思考，后设计，再下手\"><a href=\"#一、先思考，后设计，再下手\" class=\"headerlink\" title=\"一、先思考，后设计，再下手\"></a>一、先思考，后设计，再下手</h1><p><img src=\"https://img-blog.csdnimg.cn/20200315000349561.png\" alt=\"先思考，后设计，再下手\"></p>\n<p>多数拿到新功能需求，大致有思路就直接下手开始写代码，半天下来发现这个需求或者功能越想越复杂。前进的路开始迷茫，内心越来越烦躁（甚至开始埋冤产品，这个需求怎么搞那么复杂，太坑了！），秃头的噩梦开始了。(╯ಠ_ ಠ）╯</p>\n<p>其实开始写代码之前，思路就没有整理清楚或者目标不明确，想着想着就偏离了初衷。越深入考虑就越复杂，考虑到解耦代码，封装服务，设计数据库，扩展性，通用型等等这些因素。想想都已经迈入了从 0 到放弃的节奏了。甚至遇到过“杞人忧天”的程序猿小哥哥，小姐姐。TA 们问我说：“如果那一天服务器在我处理的时候停电了怎么办呀，如果服务器爆炸了呢？！”（这种绝对不夸张，还真的有哈）</p>\n<p>其实就是因为前期没有充分的思考和设计所以才会导致后面的手慌脚乱。</p>\n<h2 id=\"深度思考\"><a href=\"#深度思考\" class=\"headerlink\" title=\"深度思考\"></a>深度思考</h2><p>投入代码的海洋之前，我们需要先深度思考这个功能需求，整理清楚它的<code>目的</code>，<code>场景</code>，<code>难点</code>。</p>\n<ol>\n<li><p><strong>明确目的 — <code>明确功能需求的目的，了解清楚它是用来做什么，为了达到什么目的</code>。</strong><br>好比如现在是要开发一个文章搜索。一听到这个，你会想到什么呢？文章标题搜索？全文搜索？拆词搜索？标签化搜索？还能想到更多各式各样的搜索功能可以在这个功能需求中实现。如果不明确目的是什么，可能一开始就想复杂了。最终可能只是需要一个简单的标题搜索而已。而我们花了半天在想一大堆的可能性，系统要承载这个功能需要如何设计。</p>\n</li>\n<li><p><strong>使用场景 — <code>场景因素决定了这个功能的技术架构，也决定它的难度等级</code>。</strong><br>那场景到底是什么？其实就是这个功能规模的影响因素，举个例子：后端来说场景可以是这个文章搜索涉及的数据量级，还有使用的用户量级和并发量级。这些都是会直接关系到后端架构的设计，和代码的编写策略。那如果是前端呢？前端要考虑的因素有：这个搜索是否有重复使用性（是否需要封装成组件），是否需要加强的交互（比如，实时联想历史搜索或者关键词），是否涉及前端需要数据与交互结合处理数据来达到一些特殊交互。这些都是直接和前端的实现方式息息相关的。</p>\n</li>\n<li><p><strong>分析难点 — <code>明确目的，锁定场景后，就可以开始解刨功能需求找到技术难点</code>。</strong><br>注意一个误区，这个思考过程不是决定技术架构和策略，这里只是单纯通过<strong>已有的关联性系统功能，技术能力范围，数据量级，用户量级，开发时效等因素排查出这个功能需求开发的难点</strong>。如果在这里就开始考虑到设计和策略，我们就会过多的花时间在一两个难点上，甚至过度设计。我们的重点是分析出某些部分的存在难度，先解刨出来，后面开始架构设计和策略的时候会特别注意到这些难点。</p>\n</li>\n</ol>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>小结一下：</strong> &gt; <strong>在设计和开发一个功能需求前，有一个系统化的思考模式可以让我们快速的明白一个功能需求和整理思路！</strong> 习惯先深度思考，可以大大提高自身技术的成长。慢慢我们会发现你分析一个功能需求会看的更加透彻，开发效率也会随之上升。</p></blockquote>\n<h2 id=\"设计与策略\"><a href=\"#设计与策略\" class=\"headerlink\" title=\"设计与策略\"></a>设计与策略</h2><p>开发任何一个功能，特别是大型系统，我们都是需要有一个架构设计的过程。系统架构设计会包括：</p>\n<ul>\n<li><strong>后端</strong> — 数据库，设计模式，编写策略（例如：<a href=\"https://blog.csdn.net/TriDiamond6/article/details/104764227\">服务层封装</a>）等。</li>\n<li><strong>前端</strong> — 组件封装，底层工具类，代码接受，模块化等。</li>\n</ul>\n<p>设计这个功能也是有一套方式方法可以提高这方面的效果和能力。</p>\n<ol>\n<li><strong>画图</strong> — 使用 UML&#x2F;思维导图&#x2F;逻辑图等工具整理自己的功能逻辑流程， 这个可以强化功能的背后的思路。通过画图可以完整的，可视化的整理了一遍你大脑中的功能逻辑思路。大大强化了这个逻辑在你脑海里的影响。在画图的过程中，你还会挖掘出一些细微的问题和缺陷，通过这个过程，你的逻辑思路会得到优化和强化。</li>\n<li><strong>探讨</strong> — <strong>“集思广益”</strong>，集合大家的力量必定比你一个人想强，所以设计出你的架构和逻辑图后，可以与你的伙伴一起探讨和分享。你会发想 TA 们可以看到你看不多的角度和观点。从而可以更加优化你的设计和逻辑。如果你有看过我写的《<a href=\"https://blog.csdn.net/TriDiamond6/article/details/104719532\">如果高效学习编程</a>》，应该知道“小黄鸭教学法”，在你讲解你的设计和逻辑思路的过程，从思想转化为语言的过程，你已经在重新整理了一片你的设计思路和逻辑。你可能会在过程中发现一些你预想不到的全新观点。</li>\n<li><strong>ETC 原则</strong> — <strong>“Easy to change” 易于改编原则</strong>来源于一本书叫《程序员修炼之道》，意思就是代码可以更容易被改遍的才是最好的代码 — “Good code is easy to change”。设计和编程中最重要的一个点就是，保持代码灵活和易于改编重用的架构技术。（这里我先透露一下，近期我也又在准备写一篇专门讲解有关此原则的文章，感兴趣的童鞋，敬请期待，可先关注本博主哦）。在设计架构的时候如果遇到两个或者多个选择，那就遵循 ETC 原则，选择扩展性高，易于改编更好的方案。</li>\n</ol>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>小结一下：</strong><br>做好功能需求整理和设计模式的建立，对于功能需求的了解已经可以达到一定的深度和理解的相对透彻。这个时候就可以开始一头扎进去代码的海洋了。你会发现自己的代码会写的很顺畅，一种乘风破浪的感觉，恍惚敲代码都带风。</p></blockquote>\n<hr>\n<h1 id=\"二、把功能需求分解成小任务\"><a href=\"#二、把功能需求分解成小任务\" class=\"headerlink\" title=\"二、把功能需求分解成小任务\"></a>二、把功能需求分解成小任务</h1><p><img src=\"https://img-blog.csdnimg.cn/20200316215013461.png\" alt=\"把功能需求分解成小任务\"></p>\n<p>接到一个功能需求时，众多开发者都会觉得，这个需求含有多个功能点，感觉无从入手。还会有一种莫名的复杂感。这个是因为一个功能需求里面很多时候对开发来说都是参合了多个小功能。</p>\n<p>这个时候最好的解决办法就是尽量的<strong>分解需求为多个小任务</strong>。在《<a href=\"https://blog.csdn.net/TriDiamond6/article/details/104719532\">如果高效学习编程</a>》中也有提到一个观点 — <strong>“化繁为简，小步快跑”</strong>，把复杂的功能拆分成多个小的点，也能让自己会迅速的开展工作。同时也会更有冲劲，每个任务如果太过复杂，实现时间太过长，会慢慢觉得枯燥无味，效率就会大大下降。</p>\n<h2 id=\"如何分解需求？\"><a href=\"#如何分解需求？\" class=\"headerlink\" title=\"如何分解需求？\"></a>如何分解需求？</h2><p>我团队的很多小伙伴一开始自己拆解功能需求的时候，经常会问我，“不知道需求怎么拆解，感觉拆的太细又不实际，但是如果不拆细，又觉得没有拆的必要“。这里我来给大家一些方法来拆解功能需求：</p>\n<ul>\n<li><strong>按流程</strong> — 每个功能需求都有一定有一个或多个的<code>业务流</code>，<code>逻辑流</code>，<code>数据流</code>。可以使用这个流程分解。 + 业务流 — 可以按照业务的流程拆可，比如注册账号，短信通知，推荐联系人。这个系统的注册到通知到推荐联系人。其实都是注册流程中的，但是我们可以按照流程拆开 3 个独立任务进行开发。 + 逻辑流 — 按照不同的业务逻辑拆分你的任务，使用相同注册账号的例子，可以拆分为：检测用户名重复，添加用户的逻辑，推送短信逻辑，建立短信发送服务等等。 + 数据流 — 也可以理解为按照查询数据的逻辑来分割你的功能需求。比如建立账户体系仓库，建立短信发送记录查询仓库等等。</li>\n<li><strong>按功能模块&#x2F;体系</strong> — 如果你接到的是一个大的功能需求，这个功能可能就含有多个功能模块在其中。比如我们要做一个财务模块，我们可以首先根据功能模块或者体系拆分：对账体系，提现体系，资金流水，银行账户管理，资金管理等等。</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>小结一下：</strong><br>当我们接到的功能需求较大的时候，我们一定要把需求“化繁为简，小步快跑”的方式进行分解。这个会大大有利于我们提高效率。毕竟在技术开发中长跑是会精疲力尽的，小步快跑才能让我们高效使用脑力。分解需求还能让我们注意到更细微的功能点，那样我们不会在复杂的功能需求中遗漏一下微小的功能点。</p></blockquote>\n<hr>\n<h1 id=\"三、结队开发，代码评审\"><a href=\"#三、结队开发，代码评审\" class=\"headerlink\" title=\"三、结队开发，代码评审\"></a>三、结队开发，代码评审</h1><p><img src=\"https://img-blog.csdnimg.cn/20200317001239765.png\" alt=\"结伴开发，代码评审\"></p>\n<p>在开发的过程中，开发者们往往会沈醉于自己的完美代码之中。我一开始也是如此，自己写了一个服务，无论是命名，写法，封装，逻辑设计，架构设计等等，我都觉得是完美无暇了，甚至觉得都被自己的代码美到了。但是越是这个时候，我们就越是无法发现美中不足。我们要接受一个现实就是<strong>没有最好，只有更好</strong>。</p>\n<p>首先要明白，自身的问题大部分人大概率都会是看不清自己的。内心的想法是：自己一直都是这么做的，所以不会觉得自己是有可以改善的点，也会总以为自己是对的。所以我们需要人来提点和指出我们的不足和缺点。人生如果有一面好的镜子是可以照出自己的不足，推动自己改变，成长，提升。不然人会深醉在自己的迷惑中无法找到自身的缺点，最终就是走入无法突破的瓶颈。</p>\n<p>在开发中也是，找一个或多个开发小伙伴审查自己的代码。因为每个开发者都拥有不同的经验。一个优秀的团队，每一个成员都有自身特别专研的领域和技术能力。或多或少都是一种互补的状态下组成的团队。所以互相审查代码可以达到互相学习，互相吸收彼此的特长和优点，然而达到最大化的互补，共同写出最好的代码。</p>\n<ol>\n<li><strong>结队开发</strong> — 其实结对开发，就是每次开发一个功能，你会分配一个伙伴，或者建立一个小组。待开发的过程中，可以彼此讨论架构和设计方案，实现方案等等，互补也互相学习利于成长，<strong>“两人搭配干活不累”</strong>。结队开发也能有效避免很多功能中的细微细节被忽略，还是那句话“两个脑袋必定比一个脑袋强”！</li>\n<li><strong>坦诚的审查</strong> — 在开发完一个功能后，找到你的队员<strong>互相阅读并且审查彼此的代码，从而互相提出宝贵的意见。</strong> 但是其实很多时候，因为彼此是同事也是开发小组中的战友，在“审查”对方的优秀“作品”的时候给最真实的反馈意见，往往我们和对方心里会觉得这是一种“批判”，一种“批评”。然而因为这种顾虑和心态，让我们在审查的过程中有一种莫名的压力和负担。所以给出的意见不能一针见血。“真实坦诚的话大多数人都不爱听，赞美的谎言都很中听”，也可以说是“忠言逆耳”。但是往往就是最真实的反馈意见是对彼此最有价值。也是这样才能在技术的道路上，让自己看到与明白自身的不足并且更好的去改进，从而在这条道路上彼此都能越发的走的更快更远。<strong>所以如果都想让自己和队员有快速成长，那就更需要我们对彼此的知识成果予以尊重，予以坦诚相待的态度，给予队员代码中不足之处的反馈，也谦虚诚恳的接受别人的意见。这是代码审查重中之重！</strong><br>在我的团队中提出使用结队开发，代码审查制的时候，我收到很多反馈：“我们本来就是敏捷迭代开发，时间很紧凑，不够时间去审查”，“每个人的技术能力参差不齐，有些人无法读懂彼此的代码”，“功能里面掺合着业务和功能需求的业务流程，对方没有做我的功能业务，看不懂呀”等等等等。一开始大家勇于提出了很多问题。</li>\n</ol>\n<p><strong>那我们怎么搞？不用慌让我们来分析一下，提出解决方案：</strong></p>\n<ul>\n<li><strong>时间问题</strong> — 敏捷迭代中，都是小步快跑，迭代周期根据项目而定，但是大致都是 1-4 周的范围之内。时间确实是比较紧迫的。但是互相审查代码这个好处实在是很多，所以就算要在敏捷迭代中耗费一点时间也是非常值得的。</li>\n</ul>\n<ul>\n<li><strong><code>方案：</code></strong> 每个人在每天早上就花 1 小时，审查前一天小伙伴们提交审核的代码，然后在<code>Gitlab</code>这种代码管理平台中直接在代码中填写反馈意见。这样时间是可控的，也不会让开发者浪费太多时间在审查中。</li>\n</ul>\n<ul>\n<li><strong>能力参差不弃</strong> — 这个是审查中的问题，也是为什么更需要审查的原因。不触动互相审查，在团队中给彼此意见让团队的总体能力拉平，能力中的参差不弃的问题就永无法解决。</li>\n</ul>\n<ul>\n<li><strong><code>方案：</code></strong> 首先开个群，或者开个会议，互相提出自己的优缺点，还有提出自己今年想提升的方面。找到团队成员各自的强项其实问题就好解决了。把强项和有这方面想提升的人结队开发，这样就可以发挥有强项人的能力，同时帮助了有这块短板的战友。而且，别人的强项也可能是你的短板，很少有开发者是方方面面都很强的。别人身上肯定有你可以学到的东西。所以彼此都有良好的学习文化和心态。</li>\n</ul>\n<ul>\n<li><strong>业务不熟悉</strong> — 其实代码审核不是去测试对方的功能和业务，我们是写代码的开发者，不是测试工程师。代码审查的主要目的是为了，提高研发质量，把控代码规范，提高编写能力，提高技术知识。</li>\n</ul>\n<ul>\n<li><strong><code>方案：</code></strong> 所以我们让开发者互相审查的是，代码质量，实现方式，架构设计，代码规范，编写策略等方面，这种是不需要知道业务的，如果这些有涉及业务的需要才那么实现的，可以询问对方计算难点在哪里：是查询？数据的处理？审查的重点放在技术本事不是业务代码的层面上。</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>小结一下：</strong></p>\n<ul>\n<li><p>开发者基本上都是抱团工作的，这种环境下都是很适合互补互相学习的环境。如果想彼此有快速的成长，那就需要我们互相去给彼此提出坦诚又宝贵的意见，从中吸取彼此的优点和强项。这样每个人在这个团队中都会得到高速的提升。</p>\n</li>\n<li><p>如果你所在的公司领导没有推行这种模式，可以提议一下，如果因为公司的情况不合适，可以自己组队互相分享代码探讨，这样还是能达到互相学习和提升的！</p>\n</li>\n</ul></blockquote>\n<hr>\n<h1 id=\"四、在安静的环境中开发\"><a href=\"#四、在安静的环境中开发\" class=\"headerlink\" title=\"四、在安静的环境中开发\"></a>四、在安静的环境中开发</h1><p><img src=\"https://img-blog.csdnimg.cn/20200317000950512.png\" alt=\"在安静的环境中开发\"></p>\n<p>开发者在日常工作中，都是要高度集中，脑力全开的状态下工作的。所以<strong>环境造成的干扰对开发者而言是很影响效率的</strong>。一个难题，一段代码的思路，都是需要高度集中，在大脑中 1000QPS 的输出速度来思考问题和逻辑。所以如果在过程中被声音，交谈，或者其它环境的干扰，就会被打断思路，然后陷入一个不停的思路重组的过程，大量的时间都被消耗掉了。</p>\n<p>当年我刚刚当上了研发主管，开发于管理并行。发现自己每天都处于高并发状态，同时几件事情在处理，沟通，回答问题，协调工作，分析需求，与产品经理互怼，功能设计，功能规划，任务分解，然后就是研发。这一堆的事情都是日常必须要做的事情。我发现在研发的过程中，总会有那么一两个人来打断我的思路，当我大脑在全速前进的时候，突然在高速公路上出现了一个“程咬金”。解决了 TA 的疑问之后，重新投入研发，需要花至少 10 分钟重新整理思路和投入状态，大脑回归原来的速度。但是万万没想到，第二个人又来了。当时的我就感叹了一句，“做一个小小开发真的是太幸福了”。</p>\n<p>其实不只是技术管理岗会遇到这种问题，做一个研发组的开发者也会遇到，会有产品经理，测试，其他同事来请教你，给你指 bug 等等的事情需要和你沟通。所以这种干扰是无法在岗位或者职责上避免的。</p>\n<p><strong>那我们怎么才能做一个静静的小开发呀？(ლ &#96;Д ́ )ლ</strong>，我来告诉你一些小秘诀吧：</p>\n<ol>\n<li><p><strong>番茄工作法</strong> — 给自己定好 20-60 分钟的高度集中的工作时间，这个时间内谁都不要过来打扰你，如果这个时间段有人来找你，你问一句“不好意思，我现在有点忙，事情紧急吗？不紧急我过 xx 分钟过来找你“。如果对方的事情是不紧急的，你就可以继续投入开发。到了一个 25 分钟阶段结束的时候，你再起来跟对方沟通。时间是很宝贵的，为了可以让大家高效沟通，也高效率开展研发工作。我们要高效运用时间。</p>\n</li>\n<li><p><strong>带上耳机</strong> — 如果音乐会打扰你思路的话，就开一点轻音乐，或者一些大自然环境的声音。这样可以帮助你高度集中，不让自己听到一些能打扰你的声音。这种也是有效的管理好自己的耳门，让自己高度集中在研发中。我一般不会告诉别人，别人看到你带着耳机，高度集中的样子，莫名的会给到 TA 人心理压力和心理负担，会想这一刻过去找你，会不会打扰到你的。</p>\n</li>\n<li><p><strong>免打扰模式</strong> — 在你高度集中的时候，开启手机的免打扰模式，关闭你电脑里面一些与你现在工作无关的应用和网页。只要不是工作的群都可以开启消息免打扰。在你番茄工作法的休息时间段，再去看一看消息，加加水，走动一下放松一下。（但是记得一定要控制自己的休息时间，休息过长会导致完全脱离工作状态，要重新进入状态耗费的时间就会变长）</p>\n</li>\n</ol>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>小结一下：</strong><br>技术研发是一个需要高度集中的脑力活，大脑的 QPS 需要保持在较高的速度和状态才能达到高效。所以要学会自控，更要把控好自己所在的环境与人。时间是宝贵的，只有珍惜时间才会在最短时间内达到最大量度的产出。如果你能做到，你会发现你加班会变少，工作效率会提高。</p></blockquote>\n<hr>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>看完这边文章我们发现做为一个开发者，不只是需要提升自己的技术能力，技术素养也是重中之重。只有技术能力，在职场中会有很多压力，职场中是不会给我们全世界的时间来开发，也不会给我们一个舒适的环境让我们集中。所以作为一个更出色的程序员，我们身上必须拥有更多的防身技能，才能在我们面对各式各样的情况和问题出现时，我们能处于泰然，游刃有余。往往也是这些能耐才能让我们与众多的开发者有明显的区别。</p>\n<p>希望这 5 大法则可以助你在技术行业里成为更出色的开发者，在众多的开发者中脱颖而出，升级加薪，走上技术和人生的巅峰。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>最后感谢大家的阅读和支持，你们的点赞和关注都是给予我继续写作最大的动力。</strong> &gt; <strong>让我们一起终身学习，在代码的海洋中找到快乐与自我。</strong></p></blockquote>\n","text":"在现在这个技术高速发展的时代，无论你是在校学生，还是技术职场中的精英，都会面临需要持续提升。但是如果只知道提升技术能力，忽略了一些技巧和技术素养的培养和习惯。你...","link":"","photos":[],"count_time":{"symbolsCount":"6.8k","symbolsTime":"6 mins."},"categories":[{"name":"NOTES","slug":"NOTES","count":3,"path":"api/categories/NOTES.json"}],"tags":[{"name":"Programmer","slug":"Programmer","count":3,"path":"api/tags/Programmer.json"},{"name":"Better Programming","slug":"Better-Programming","count":3,"path":"api/tags/Better-Programming.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E5%85%88%E6%80%9D%E8%80%83%EF%BC%8C%E5%90%8E%E8%AE%BE%E8%AE%A1%EF%BC%8C%E5%86%8D%E4%B8%8B%E6%89%8B\"><span class=\"toc-text\">一、先思考，后设计，再下手</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%83\"><span class=\"toc-text\">深度思考</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E8%AE%A1%E4%B8%8E%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">设计与策略</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E6%8A%8A%E5%8A%9F%E8%83%BD%E9%9C%80%E6%B1%82%E5%88%86%E8%A7%A3%E6%88%90%E5%B0%8F%E4%BB%BB%E5%8A%A1\"><span class=\"toc-text\">二、把功能需求分解成小任务</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E5%88%86%E8%A7%A3%E9%9C%80%E6%B1%82%EF%BC%9F\"><span class=\"toc-text\">如何分解需求？</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E7%BB%93%E9%98%9F%E5%BC%80%E5%8F%91%EF%BC%8C%E4%BB%A3%E7%A0%81%E8%AF%84%E5%AE%A1\"><span class=\"toc-text\">三、结队开发，代码评审</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81%E5%9C%A8%E5%AE%89%E9%9D%99%E7%9A%84%E7%8E%AF%E5%A2%83%E4%B8%AD%E5%BC%80%E5%8F%91\"><span class=\"toc-text\">四、在安静的环境中开发</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"三钻","slug":"blog-author","avatar":"https://res.cloudinary.com/tridiamond/image/upload/v1625037705/ObsidianestLogo-hex_hecqbw.png","link":"/","description":"<p>Programming a piece of art.</p> <p>用<b>匠人精神</b>开发出<b>艺术</b>。</p>","socials":{"github":"https://github.com/TriDiamond","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/TriDiamond6","juejin":"https://juejin.cn/user/1873223546578589","customs":{"bilibili":{"icon":"https://tridiamond.tech/svg/bilibili.svg","link":"https://live.bilibili.com/22619211"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"用“易于改编”原则, 提升编程水平, 写出更好的代码","uid":"bd0a0f50b0efbfb1fcedb431773e71b8","slug":"bd0a0f50b0efbfb1fcedb431773e71b8","date":"2020-03-22T23:19:00.000Z","updated":"2023-08-18T12:19:22.318Z","comments":true,"path":"api/articles/bd0a0f50b0efbfb1fcedb431773e71b8.json","keywords":null,"cover":"https://source.unsplash.com/mG28olYFgHI/1200x628","text":"无论新手还是资深开发者都会经常问一个问题，“怎么写好的代码？”，要知道怎么写好代码，首先我们要知道怎么样才是好的代码。要有明确的目标，才能知道如何达成目标。在《...","link":"","photos":[],"count_time":{"symbolsCount":"6.5k","symbolsTime":"6 mins."},"categories":[{"name":"NOTES","slug":"NOTES","count":3,"path":"api/categories/NOTES.json"}],"tags":[{"name":"Programmer","slug":"Programmer","count":3,"path":"api/tags/Programmer.json"},{"name":"Better Programming","slug":"Better-Programming","count":3,"path":"api/tags/Better-Programming.json"}],"author":{"name":"三钻","slug":"blog-author","avatar":"https://res.cloudinary.com/tridiamond/image/upload/v1625037705/ObsidianestLogo-hex_hecqbw.png","link":"/","description":"<p>Programming a piece of art.</p> <p>用<b>匠人精神</b>开发出<b>艺术</b>。</p>","socials":{"github":"https://github.com/TriDiamond","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/TriDiamond6","juejin":"https://juejin.cn/user/1873223546578589","customs":{"bilibili":{"icon":"https://tridiamond.tech/svg/bilibili.svg","link":"https://live.bilibili.com/22619211"}}}}},"next_post":{"title":"带你体验Vue2和Vue3开发组件有什么区别","uid":"3d6151b8bdfcae4be7bfdc3647f80109","slug":"3d6151b8bdfcae4be7bfdc3647f80109","date":"2020-03-08T21:59:18.000Z","updated":"2023-08-18T12:19:22.314Z","comments":true,"path":"api/articles/3d6151b8bdfcae4be7bfdc3647f80109.json","keywords":null,"cover":"https://source.unsplash.com/m_HRfLhgABo/1200x628","text":"我们一直都有关注和阅读很多关于 Vue3 的新特性和功能即将到来。但是我们没有一个具体的概念在开发中会有如何的改变和不一样的体验。还有一些童鞋已经开始又慌又抓狂...","link":"","photos":[],"count_time":{"symbolsCount":"9.8k","symbolsTime":"9 mins."},"categories":[{"name":"FrontEnd","slug":"FrontEnd","count":10,"path":"api/categories/FrontEnd.json"},{"name":"Vue","slug":"FrontEnd/Vue","count":1,"path":"api/categories/FrontEnd/Vue.json"}],"tags":[{"name":"Vue","slug":"Vue","count":1,"path":"api/tags/Vue.json"},{"name":"Vue3","slug":"Vue3","count":1,"path":"api/tags/Vue3.json"}],"author":{"name":"三钻","slug":"blog-author","avatar":"https://res.cloudinary.com/tridiamond/image/upload/v1625037705/ObsidianestLogo-hex_hecqbw.png","link":"/","description":"<p>Programming a piece of art.</p> <p>用<b>匠人精神</b>开发出<b>艺术</b>。</p>","socials":{"github":"https://github.com/TriDiamond","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/TriDiamond6","juejin":"https://juejin.cn/user/1873223546578589","customs":{"bilibili":{"icon":"https://tridiamond.tech/svg/bilibili.svg","link":"https://live.bilibili.com/22619211"}}}}}}