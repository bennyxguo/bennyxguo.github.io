{"title":"用动图解说数组、链表、跳表原理与实现","uid":"340fc57e8e2087786aea08a4e455e6c0","slug":"algorithm/algorithm-array-linked-list-jump-list","date":"2020-06-14T09:50:24.000Z","updated":"2023-08-13T03:19:28.613Z","comments":true,"path":"api/articles/algorithm/algorithm-array-linked-list-jump-list.json","keywords":null,"cover":"https://source.unsplash.com/9KcHl3Tp79k/1200x628","content":"<h1 id=\"「初」前言\"><a href=\"#「初」前言\" class=\"headerlink\" title=\"「初」前言\"></a>「初」前言</h1><p>在学习数据结构与算法的过程中，感觉真的是一入算法深似海，但是越学越觉得有趣。不过我们会发现在终身学习的过程中，我们都是越学越多，不知的也越来越多，但是更渴望认知更多的知识，越是对知识感兴趣。</p>\n<p>本期讲说最常见的数据结构类型分别有数组、链表、跳表。这一期我们一起来了解它们的原理与实现。</p>\n<h1 id=\"「一」数组-Array\"><a href=\"#「一」数组-Array\" class=\"headerlink\" title=\"「一」数组 Array\"></a>「一」数组 Array</h1><ul>\n<li><strong>Java, C++</strong>: int a[100]</li>\n<li><strong>Python</strong>: list &#x3D; []</li>\n<li><strong>JavaScript</strong>: let x &#x3D; [1, 2, 3]</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>当今的高级数据语言中，对于数组里面的类型没有严格要求，相对来说比较多元化。</p>\n<p>在语言下有一个标准的叫法叫做<code>泛型</code>，也就说任何一个单元类型都可以放入数组。</p></blockquote>\n<h2 id=\"数组的原理\"><a href=\"#数组的原理\" class=\"headerlink\" title=\"数组的原理\"></a>数组的原理</h2><ul>\n<li>数组底层的硬件实现是有一个<code>内存管理器</code>的；</li>\n<li>当我们向计算机申请数组时，实际上计算机是在内存中给我们开辟了<strong>一段连续的地址</strong>；</li>\n<li>每一个地址都是可以通过内存管理进行访问；</li>\n<li>无论我们是访问第一个值，还是里面其中一个值，时间复杂度都是<code>常数O(1)</code>；</li>\n<li>并且可以<strong>随意访问任何一个元素</strong>，所以它的<strong>访问速度非常的快</strong>，也是数组的特性之一；</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20200613135359695.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70#pic_center\"></p>\n<h2 id=\"数组的缺陷\"><a href=\"#数组的缺陷\" class=\"headerlink\" title=\"数组的缺陷\"></a>数组的缺陷</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>数组的问题关键是在增加与删除元素的时候。</p></blockquote>\n<h3 id=\"数组插入操作\"><a href=\"#数组插入操作\" class=\"headerlink\" title=\"数组插入操作\"></a>数组插入操作</h3><p>假设现在我们定义了一个<code>[A, B, C, E, F, G]</code>的数组，然后我们要插入一个<code>D</code>到这个数组里面。现在假设我们要把 D 插入到指针 3 的位置，我们要怎么实现呢？</p>\n<ol>\n<li>首先我们需要把<code>E</code>，<code>F</code>，<code>G</code>都挪动到各自的下一个指针；</li>\n<li>然后加入<code>D</code>到指针<code>3</code>上；</li>\n</ol>\n<p><strong>详细实现效果请查看下效果图：</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200613135432776.gif#pic_center\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>因为插入操作的时候，我们需要挪动平均一半的元素（<strong>N&#x2F;2</strong>），所以数组每次插入元素时，平均就是<code>O(n)</code>的时间复杂度。</p></blockquote>\n<h3 id=\"数组删除操作\"><a href=\"#数组删除操作\" class=\"headerlink\" title=\"数组删除操作\"></a>数组删除操作</h3><p>删除元素也是同理的，假设我们现在有<code>[A, B, C, Z, D, E, F]</code>的一个数组，我们现在需要把<code>Z</code>从这个数组中移除。实现逻辑如下：</p>\n<ol>\n<li>首先把指针<code>3</code>的值置空；</li>\n<li>然后把<code>D</code>、<code>E</code>、<code>F</code>三个值往上移动一个位置；</li>\n<li>最后在例如<code>Java</code>的数组语言中，我们需要把数组的长度减一即可；</li>\n</ol>\n<p><strong>具体的实现效果看下图：</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200613135457255.gif#pic_center\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>因为删除操作的时候，也是需要挪动平均一半的元素（<code>N/2</code>），所以数组每次删除元素时，平均就是<code>O(n)</code>的时间复杂度。</p></blockquote>\n<h2 id=\"数组时间复杂度\"><a href=\"#数组时间复杂度\" class=\"headerlink\" title=\"数组时间复杂度\"></a>数组时间复杂度</h2><table>\n<thead>\n<tr>\n<th><strong>操作类型</strong></th>\n<th><strong>时间复杂度</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>查询上一个 (prepend)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>查询下一个 (append)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>查询某一个元素 (lookup)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>&#x3D;&#x3D;新增结点 (insert)&#x3D;&#x3D;</td>\n<td>&#x3D;&#x3D;O(N)&#x3D;&#x3D;</td>\n</tr>\n<tr>\n<td>&#x3D;&#x3D;删除结点 (delete)&#x3D;&#x3D;</td>\n<td>&#x3D;&#x3D;O(N)&#x3D;&#x3D;</td>\n</tr>\n</tbody></table>\n<p><img src=\"https://img-blog.csdnimg.cn/20200613135642518.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70\"></p>\n<h1 id=\"「二」-链表-Linked-List\"><a href=\"#「二」-链表-Linked-List\" class=\"headerlink\" title=\"「二」 链表 Linked List\"></a>「二」 链表 Linked List</h1><p>下来我们一起来看看另外一个数据结构<code>链表</code>。链表的诞生就是为了<strong>解决数组的缺点</strong>。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200613135733621.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70#pic_center\"></p>\n<p><strong>链表的特性：</strong></p>\n<ul>\n<li>每一个元素有两个成员变量<code>value</code><strong>值</strong>与<code>next</code><strong>指针</strong>（指向下一个元素）；</li>\n<li>每一个元素串在一起后与数组是非常相似的结构；</li>\n<li>与数组不一样的就是<strong>每一个元素一般都要定义一个</strong><code>Class</code>（<strong>类</strong>）：一般都叫一个<code>Node</code>；</li>\n<li><code>单链表</code>：只有一个<strong>next</strong>指针；</li>\n<li><code>双向链表</code>：拥有一个<strong>prev</strong>或者<strong>previous</strong>指针指向前一个元素；</li>\n<li>头指针用<strong>Head</strong>来表示，尾指针用<strong>Tail</strong>来表示；</li>\n<li>尾部指针的<strong>next</strong>指针都会指向一个<strong>None</strong>（空）；</li>\n<li><code>循环链表</code>：尾指针的<strong>next</strong>指针指向头指针；</li>\n</ul>\n<h2 id=\"链表添加结点\"><a href=\"#链表添加结点\" class=\"headerlink\" title=\"链表添加结点\"></a>链表添加结点</h2><p>下来我们一起来看看一个链表新添加一个元素的原理：</p>\n<ol>\n<li>首先为新的元素创建一个结点（<strong>Node</strong>）；</li>\n<li>然后我们需要把这个新元素插入到连个元素之间；</li>\n<li>把前一个元素的<code>next</code>指针指向新的<strong>Node</strong>；</li>\n<li>把新元素的<code>next</code>指针指向后一个元素；</li>\n</ol>\n<p><strong>具体实现效果看下图：</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200613135814842.gif#pic_center\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>链表的插入操作总共是<strong>2 次</strong>，但是常数次的，所以<strong>时间复杂度为</strong> <code>O(1)</code>。</p></blockquote>\n<h2 id=\"链表删除结点\"><a href=\"#链表删除结点\" class=\"headerlink\" title=\"链表删除结点\"></a>链表删除结点</h2><p>接下来我们一起来看看删除结点的原理，删除与新增大致上是一样的，是</p>\n<ol>\n<li>在需要把删除的结点的前一个<strong>node</strong>的<code>next</code>，改为删除结点的下一个<strong>node</strong>；</li>\n</ol>\n<p><strong>具体的实效效果看下图：</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/2020061313583234.gif#pic_center\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>链表的删除操作<strong>只需要一次</strong>，所以<strong>时间复杂</strong>也是<code>O(1)</code>。</p></blockquote>\n<h2 id=\"链表时间复杂度\"><a href=\"#链表时间复杂度\" class=\"headerlink\" title=\"链表时间复杂度\"></a>链表时间复杂度</h2><p>通过分析链表的新增和删除操作，我们发现链表中并没有像数组一样需要挪动一半或者多个的元素的位置和复制元素等。也是因为这样它的移动和修改操作的**效率非常高为 O(1)<strong>。 但是在查询的时候，当我们需要访问链表中某一个值的时候，就相对变得复杂了，为</strong>O(N)**。</p>\n<p><strong>我们来看看一下的链表时间复杂度：</strong></p>\n<table>\n<thead>\n<tr>\n<th><strong>操作类型</strong></th>\n<th><strong>时间复杂度</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>查询上一个 (prepend)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>查询下一个 (append)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>&#x3D;&#x3D;查询某一个元素 (lookup)&#x3D;&#x3D;</td>\n<td>&#x3D;&#x3D;O(N)&#x3D;&#x3D;</td>\n</tr>\n<tr>\n<td>新增结点 (insert)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>删除结点 (delete)</td>\n<td>O(1)</td>\n</tr>\n</tbody></table>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>看完<strong>Array</strong>和<strong>Linked List</strong>的两种数据结构的特性后，我们可以发现是<strong>没有完美的数据结构</strong>的。如果有完美的那就不需要 Array 或者 Linked List 并存了。所以我们需要看<strong>场景来决定</strong>我们需要用那种数据结构。</p></blockquote>\n<p><img src=\"https://img-blog.csdnimg.cn/20200613135642518.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70\"></p>\n<h1 id=\"「三」跳表-Skip-List\"><a href=\"#「三」跳表-Skip-List\" class=\"headerlink\" title=\"「三」跳表 Skip List\"></a>「三」跳表 Skip List</h1><p>后续有技术科学家对链表进行了优化，诞生出第三个数据结构叫做<strong>跳表</strong>（Skip List）。跳表可能有些小伙伴没有怎么接触过，但是其实它一直都在我们身边的应用中使用。在 Redis 里面就使用了跳表。不过面试过程中并不会给大家出跳表的题目来写程序，所以我们只需要理解它的原理即可。</p>\n<p><strong>跳表</strong>的核心是为了优化<strong>链表元素随机访问</strong>的<strong>时间复杂</strong>度过高的问题 (<code>O(n)</code>)。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>这个优化的<strong>中心思想</strong>其实是<strong>贯穿于整个算法数据结构，甚至也贯穿于整个数学与物理的世界</strong>。那就是<code>升维思想 / 空间换时间</code> - 顾名思义就是在原有的链表中添加第二维的链表叫<code>第一级索引</code>。</p></blockquote>\n<h2 id=\"添加第一级索引\"><a href=\"#添加第一级索引\" class=\"headerlink\" title=\"添加第一级索引\"></a>添加第一级索引</h2><p>我们看看下面图什么是<strong>一级索引</strong>：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/2020061314004587.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70#pic_center\"></p>\n<ul>\n<li>首先索引的第一个索引指向**头 (head)<strong>，也就是</strong>第一个元素 (1)**；</li>\n<li>然后索引的下一个元素指向的就是<strong>next + 1</strong>，也就是**第三个元素 (4)**；</li>\n<li>换句话来说，就是第一级索引的元素比原始链表走<strong>快 2 倍的速度</strong>；</li>\n</ul>\n<p>假设现在我们需要<strong>访问结点 7</strong>，添加了这个索引后，是<strong>怎么提高了访问速度</strong>呢？我们来看看下面的图：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200613140130197.gif#pic_center\"></p>\n<ul>\n<li>首先从第一级索引中走到索引 7；</li>\n<li>然后从索引 7 下来找到第 7 个结点；</li>\n<li>这里总共的步数<strong>4 步降到 2 步</strong>就能找到第 7 个结点；</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>虽然说速度是快了，但是<strong>能不能更快</strong>呢？可以的，<strong>只需要我们再叠加维度，用空间换时间的中心思想即可</strong>。</p></blockquote>\n<h2 id=\"添加第二级索引\"><a href=\"#添加第二级索引\" class=\"headerlink\" title=\"添加第二级索引\"></a>添加第二级索引</h2><p>第二级索引比第一级的索引再走快一步，那就是每次走两步，也就是<strong>next+2</strong>。这样访问结点的时候就更快了。首先我们来看看加入第二级索引后的结构图：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/2020061314020971.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70#pic_center\"></p>\n<ul>\n<li>同理二级索引的第一个是指向一级索引的第一个，最终指向的是头 (head)；</li>\n<li>二级索引的第个人结点指向的就是结点 7，因为<strong>二级索引是 next+2</strong>，<strong>每次跳 3 步</strong>的进行步伐；</li>\n</ul>\n<p><strong>加入了二级索引后，我们访问结点 7 的时候是怎么样的呢？</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200613140308170.gif#pic_center\"></p>\n<ul>\n<li>维度升级到第二级时，只需要 1 步就能到达结点 7 的索引；</li>\n<li>加入二级索引后，我们从<strong>4 步降到 1 步</strong>完成结点 7 的访问；</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>所以清晰看到，当我们<strong>升级多一层的维度后，链表的访问速度也会相对应的提升</strong>。也就是说，在一个非常长的链表中，我们可以<strong>加入 N 级索引，也就是提高 N 层的维度就可以提高这个链表访问的速度</strong>。总体来说我们就是需要添加<code>log2n</code>个级索引，来达到最高级索引维度。</p></blockquote>\n<h2 id=\"跳表查询的时间复杂度分析\"><a href=\"#跳表查询的时间复杂度分析\" class=\"headerlink\" title=\"跳表查询的时间复杂度分析\"></a>跳表查询的时间复杂度分析</h2><ul>\n<li>首先每一级索引我们提升了 2 倍的跨度，那就是减少了 2 倍的步数，所以是<strong>n&#x2F;2、n&#x2F;4、n&#x2F;8 以此类推</strong>；</li>\n<li>第 k 级索引结点的个数就是 **n&#x2F;(2^k)**；</li>\n<li>假设索引有 h 级， 最高的索引有 2 个结点；</li>\n<li><strong>n&#x2F;(2^h) &#x3D; 2</strong>, 从这个公式我们可以求得 <strong>h &#x3D; log2(n)-1</strong>；</li>\n<li><strong>所以最后得出跳表的时间复杂度是</strong><code>O(log n)</code></li>\n</ul>\n<h2 id=\"跳表查询的空间复杂度分析\"><a href=\"#跳表查询的空间复杂度分析\" class=\"headerlink\" title=\"跳表查询的空间复杂度分析\"></a>跳表查询的空间复杂度分析</h2><ul>\n<li>首先原始链表<strong>长度为 n</strong></li>\n<li>如果索引是每 2 个结点有一个索引结点，每层索引的结点数：n&#x2F;2, n&#x2F;4, n&#x2F;8 … , 8, 4, 2 以此类推；</li>\n<li>或者所以是每 3 个结点有一个索引结点，每层索引的结点数：n&#x2F;3, n&#x2F;9, n&#x2F;27 … , 9, 3, 1 以此类推；</li>\n<li><strong>所以空间复杂度是</strong><code>O(n)</code>；</li>\n</ul>\n<h2 id=\"跳表现实中的形态\"><a href=\"#跳表现实中的形态\" class=\"headerlink\" title=\"跳表现实中的形态\"></a>跳表现实中的形态</h2><p><img src=\"https://img-blog.csdnimg.cn/20200613141031623.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70#pic_center\"></p>\n<center>来源于覃超老师的PPT</center>\n\n<ul>\n<li>在现实使用中，链表的索引并<strong>不是那么整齐和有规则</strong>的；</li>\n<li>这个是因为在元素<strong>增加与删除的过程中会有所变化</strong>；</li>\n<li>最后经过多次改动之后，<strong>有一些索引会跨步多几步或者少哭跨几步</strong>；</li>\n<li>而且<strong>维护成本相对要高</strong> - 新增或者删除时需要把所有索引都更新一遍；</li>\n<li>最后在新增和删除的过程中的更新，时间复杂度也是<code>O(log n)</code>；</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>升维思想和空间换时间</strong>的思维，我们一定要记下来，并且融会贯通。后面在解决相应的面试题的时候我们会经常用到这种思维。比如：树，二叉搜索树等经常用高级数据库结构。</p></blockquote>\n<p><img src=\"https://img-blog.csdnimg.cn/20200613135642518.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70\"></p>\n<h1 id=\"「四」工程中的应用\"><a href=\"#「四」工程中的应用\" class=\"headerlink\" title=\"「四」工程中的应用\"></a>「四」工程中的应用</h1><p>链表在日常工程中其实应用是很多的，但是因为这些都属于高级的数据结构了，无论是 Java 也好、C++、JavaScript 还是 Go 语言，这些语言里面都<strong>提供了封装好的数据结构，我们只需要直接使用就可以了</strong>。</p>\n<h2 id=\"链表的应用\"><a href=\"#链表的应用\" class=\"headerlink\" title=\"链表的应用\"></a>链表的应用</h2><p>链表最常见的一个应用就是<code>LRU Cache</code>，没有接触过的小伙伴，可以百度一下深挖一下。然后这里附上一道<code>Leetcode</code>的题目[<a href=\"https://leetcode-cn.com/problems/lru-cache-lcci/\">面试题 16.25. LRU 缓存</a>，这道题的话使用双链表就可以实现。有兴趣的小伙伴可以尝试实现。</p>\n<h2 id=\"跳表的应用\"><a href=\"#跳表的应用\" class=\"headerlink\" title=\"跳表的应用\"></a>跳表的应用</h2><p>跳表的话在 Redis 中就有应用到。 想了解更多的小伙伴可以搜索<code>Redis的跳跃表</code>进深挖。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200613135642518.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1RyaURpYW1vbmQ2,size_16,color_FFFFFF,t_70\"></p>\n<h1 id=\"「终」总结\"><a href=\"#「终」总结\" class=\"headerlink\" title=\"「终」总结\"></a>「终」总结</h1><ul>\n<li><strong>数据结构</strong>：<ul>\n<li><strong>数组</strong>：随机查询快 <code>O(1)</code>，但是删除与插入较慢 <code>O(n)</code>；</li>\n<li><strong>链表</strong>：删除与插入快 <code>O(1)</code>，但是随机查询慢 <code>O(n)</code>；</li>\n<li><strong>跳表</strong>：为了提高链表的随机查询而生的，随机查询能提升到 <code>O(log n)</code>，但是<strong>维护成本高</strong>；</li>\n</ul>\n</li>\n<li><strong>思维重点</strong>：<ul>\n<li>&#x3D;&#x3D;升维思想 + 空间换时间&#x3D;&#x3D;</li>\n</ul>\n</li>\n<li><strong>应用</strong>：<ul>\n<li><strong>链表</strong>：LRU Cache</li>\n<li><strong>跳表</strong>：Redis</li>\n</ul>\n</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>我是<font color=\"#60AAF8\"><b>三钻</b></font>，一个在<font color=\"#60AAF8\"><b>技术银河</b></font>中等和你们一起来终身漂泊学习。<br>点赞是力量，关注是认可，评论是关爱！下期再见 👋！</p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>公众号《<strong>技术银河</strong>》回复”算法资料”，可以获得这个系列文章的<strong>PDF 版</strong>和<strong>其他资料</strong>！</p></blockquote>\n<h2 id=\"推荐专栏\"><a href=\"#推荐专栏\" class=\"headerlink\" title=\"推荐专栏\"></a>推荐专栏</h2><p>小伙伴们可以<strong>查看或者订阅相关的专栏</strong>，从而集中阅读相关知识的文章哦。</p>\n<ul>\n<li><p>📖 <a href=\"https://blog.csdn.net/tridiamond6/category_10036942.html\">《数据结构与算法》</a> — 到了如今，如果想成为一个高级开发工程师或者进入大厂，不论岗位是前端、后端还是 AI，算法都是重中之重。也无论我们需要进入的公司的岗位是否最后是做算法工程师，前提面试就需要考算法。</p>\n</li>\n<li><p>📖 <a href=\"https://blog.csdn.net/tridiamond6/category_9782493.html\">《FCC 前端集训营》</a> — 根据 FreeCodeCamp 的学习课程，一起深入浅出学习前端。稳固前端知识，一起在 FreeCodeCamp 获得证书</p>\n</li>\n<li><p>📖 <a href=\"https://blog.csdn.net/tridiamond6/category_9782493.html\">《前端星球》</a> — 以实战为线索，深入浅出前端多维度的知识点。内含有多方面的前端知识文章，带领不懂前端的童鞋一起学习前端，在前端开发路上童鞋一起燃起心中那团火 🔥</p>\n</li>\n</ul>\n","text":"「初」前言在学习数据结构与算法的过程中，感觉真的是一入算法深似海，但是越学越觉得有趣。不过我们会发现在终身学习的过程中，我们都是越学越多，不知的也越来越多，但是...","link":"","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[{"name":"Algorithm","slug":"Algorithm","count":4,"path":"api/categories/Algorithm.json"}],"tags":[{"name":"Linked List","slug":"Linked-List","count":1,"path":"api/tags/Linked-List.json"},{"name":"Array","slug":"Array","count":1,"path":"api/tags/Array.json"},{"name":"Jump List","slug":"Jump-List","count":1,"path":"api/tags/Jump-List.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E3%80%8C%E5%88%9D%E3%80%8D%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">「初」前言</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E3%80%8C%E4%B8%80%E3%80%8D%E6%95%B0%E7%BB%84-Array\"><span class=\"toc-text\">「一」数组 Array</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E7%9A%84%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">数组的原理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E7%9A%84%E7%BC%BA%E9%99%B7\"><span class=\"toc-text\">数组的缺陷</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">数组插入操作</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">数组删除操作</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6\"><span class=\"toc-text\">数组时间复杂度</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E3%80%8C%E4%BA%8C%E3%80%8D-%E9%93%BE%E8%A1%A8-Linked-List\"><span class=\"toc-text\">「二」 链表 Linked List</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%93%BE%E8%A1%A8%E6%B7%BB%E5%8A%A0%E7%BB%93%E7%82%B9\"><span class=\"toc-text\">链表添加结点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4%E7%BB%93%E7%82%B9\"><span class=\"toc-text\">链表删除结点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%93%BE%E8%A1%A8%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6\"><span class=\"toc-text\">链表时间复杂度</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E3%80%8C%E4%B8%89%E3%80%8D%E8%B7%B3%E8%A1%A8-Skip-List\"><span class=\"toc-text\">「三」跳表 Skip List</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B7%BB%E5%8A%A0%E7%AC%AC%E4%B8%80%E7%BA%A7%E7%B4%A2%E5%BC%95\"><span class=\"toc-text\">添加第一级索引</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B7%BB%E5%8A%A0%E7%AC%AC%E4%BA%8C%E7%BA%A7%E7%B4%A2%E5%BC%95\"><span class=\"toc-text\">添加第二级索引</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B7%B3%E8%A1%A8%E6%9F%A5%E8%AF%A2%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90\"><span class=\"toc-text\">跳表查询的时间复杂度分析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B7%B3%E8%A1%A8%E6%9F%A5%E8%AF%A2%E7%9A%84%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90\"><span class=\"toc-text\">跳表查询的空间复杂度分析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B7%B3%E8%A1%A8%E7%8E%B0%E5%AE%9E%E4%B8%AD%E7%9A%84%E5%BD%A2%E6%80%81\"><span class=\"toc-text\">跳表现实中的形态</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E3%80%8C%E5%9B%9B%E3%80%8D%E5%B7%A5%E7%A8%8B%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">「四」工程中的应用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%93%BE%E8%A1%A8%E7%9A%84%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">链表的应用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B7%B3%E8%A1%A8%E7%9A%84%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">跳表的应用</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E3%80%8C%E7%BB%88%E3%80%8D%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">「终」总结</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8E%A8%E8%8D%90%E4%B8%93%E6%A0%8F\"><span class=\"toc-text\">推荐专栏</span></a></li></ol></li></ol>","author":{"name":"三钻","slug":"blog-author","avatar":"https://res.cloudinary.com/tridiamond/image/upload/v1625037705/ObsidianestLogo-hex_hecqbw.png","link":"/","description":"Think like an artist, develop like an artisan. <br /> @ <b>公众号：技术银河</b>","socials":{"github":"https://github.com/TriDiamond","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/TriDiamond6","juejin":"https://juejin.cn/user/1873223546578589","customs":{"bilibili":{"icon":"https://tridiamond.tech/svg/bilibili.svg","link":"https://live.bilibili.com/22619211"}}}},"mapped":true,"prev_post":{"title":"力扣实战之移动零、盛最多的水、爬楼梯","uid":"1781b683e9507c36c168e35402e3a5a4","slug":"algorithm/leetcode-moveZero-water-stairs","date":"2020-06-24T22:03:17.000Z","updated":"2023-08-13T03:19:28.613Z","comments":true,"path":"api/articles/algorithm/leetcode-moveZero-water-stairs.json","keywords":null,"cover":"https://source.unsplash.com/Zt5KC97bAHQ/1200x628","text":"练题法则5-10 分钟读题与思考 不要纠结没有思路就直接看题解； 不要死磕觉得自己很失败，怎么我们就想不出来； 基本上这些算法题，让我们自己想出来是不可能的； ...","link":"","photos":[],"count_time":{"symbolsCount":"9.1k","symbolsTime":"8 mins."},"categories":[{"name":"Algorithm","slug":"Algorithm","count":4,"path":"api/categories/Algorithm.json"}],"tags":[{"name":"LeetCode","slug":"LeetCode","count":1,"path":"api/tags/LeetCode.json"}],"author":{"name":"三钻","slug":"blog-author","avatar":"https://res.cloudinary.com/tridiamond/image/upload/v1625037705/ObsidianestLogo-hex_hecqbw.png","link":"/","description":"Think like an artist, develop like an artisan. <br /> @ <b>公众号：技术银河</b>","socials":{"github":"https://github.com/TriDiamond","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/TriDiamond6","juejin":"https://juejin.cn/user/1873223546578589","customs":{"bilibili":{"icon":"https://tridiamond.tech/svg/bilibili.svg","link":"https://live.bilibili.com/22619211"}}}}},"next_post":{"title":"阿里、力扣、政采云的15位专家分享前端面试与招聘视角","uid":"d71e3dea9caf5fdc0a76ab95e2b29804","slug":"interview/big-company-interview-2020","date":"2020-06-04T07:48:56.000Z","updated":"2023-08-13T03:19:28.617Z","comments":true,"path":"api/articles/interview/big-company-interview-2020.json","keywords":null,"cover":"https://source.unsplash.com/NPKk_3ZK2DY/1200x628","text":"「始」前沿有幸在 5 月 31 号参加了《第八届前端早早聊大会》主办的《前端跳槽的新起点｜前端如何搞面试》。在这次大会中从早上 9 点半一直到下午 6 点多结束...","link":"","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"16 mins."},"categories":[{"name":"Interview","slug":"Interview","count":1,"path":"api/categories/Interview.json"}],"tags":[{"name":"Interview","slug":"Interview","count":1,"path":"api/tags/Interview.json"}],"author":{"name":"三钻","slug":"blog-author","avatar":"https://res.cloudinary.com/tridiamond/image/upload/v1625037705/ObsidianestLogo-hex_hecqbw.png","link":"/","description":"Think like an artist, develop like an artisan. <br /> @ <b>公众号：技术银河</b>","socials":{"github":"https://github.com/TriDiamond","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/TriDiamond6","juejin":"https://juejin.cn/user/1873223546578589","customs":{"bilibili":{"icon":"https://tridiamond.tech/svg/bilibili.svg","link":"https://live.bilibili.com/22619211"}}}}}}