{"title":"操作系统（OS）","uid":"80dcc1f3c95ffa34e99ea9b43b09b5d2","slug":"80dcc1f3c95ffa34e99ea9b43b09b5d2","date":"2023-07-26T16:53:39.000Z","updated":"2023-09-16T18:15:22.700Z","comments":true,"path":"api/articles/80dcc1f3c95ffa34e99ea9b43b09b5d2.json","keywords":null,"cover":[],"content":"<h1 id=\"操作系统（OS）\"><a href=\"#操作系统（OS）\" class=\"headerlink\" title=\"操作系统（OS）\"></a>操作系统（OS）</h1><h2 id=\"1-计算机系统概述\"><a href=\"#1-计算机系统概述\" class=\"headerlink\" title=\"1.计算机系统概述\"></a>1.计算机系统概述</h2><h3 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1.简介\"></a>1.简介</h3><h4 id=\"什么是操作系统？\"><a href=\"#什么是操作系统？\" class=\"headerlink\" title=\"什么是操作系统？\"></a>什么是操作系统？</h4><p>操作系统（Operating System， OS）是指控制和<strong>管理</strong>整个计算机系统的硬件和软件<strong>资源</strong>，并合理地<strong>组织</strong>调度计算机的<strong>工作</strong>和资源的分配，以<strong>提供</strong>给用户和其他软件方便的<strong>接口</strong>和环境，它是计算机系统中最基本的系统<strong>软件</strong>。</p>\n<h4 id=\"操作系统在系统中的位置\"><a href=\"#操作系统在系统中的位置\" class=\"headerlink\" title=\"操作系统在系统中的位置\"></a>操作系统在系统中的位置</h4><p>操作系统管理各种计算机硬件，为应用程序提供基础充当计算机硬件与用户之间的<strong>中介</strong>。</p>\n<h4 id=\"操作系统的功能和目标\"><a href=\"#操作系统的功能和目标\" class=\"headerlink\" title=\"操作系统的功能和目标\"></a>操作系统的功能和目标</h4><ol>\n<li>系统资源的管理者</li>\n</ol>\n<ul>\n<li>文件管理</li>\n<li>内存管理</li>\n<li>处理机（CPU）管理</li>\n<li>设备（计算机硬件，例如摄像头）管理</li>\n</ul>\n<ol start=\"2\">\n<li>用户和计算机硬件之间的接口</li>\n</ol>\n<p><img src=\"https://s2.loli.net/2023/07/26/REsopjzWtv4CMu3.png\" alt=\"接口中介\"></p>\n<p>命令接口中的两位，又叫交互式命令接口与批处理命令接口。</p>\n<p>程序接口又叫系统调用。</p>\n<ol start=\"3\">\n<li><p>对硬件机器的拓展</p>\n<p>虚拟机、计算机网络…</p>\n</li>\n</ol>\n<h4 id=\"操作系统的四个特征\"><a href=\"#操作系统的四个特征\" class=\"headerlink\" title=\"操作系统的四个特征\"></a>操作系统的四个特征</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>并发、共享</strong>、虚拟、异步</p></blockquote>\n<ol>\n<li>并发 Concurrence</li>\n</ol>\n<p>并发是指两个或多个事件在同一时间间隔内发生。这些事件在宏观上是同时发生的，在微观上是交替发生的。</p>\n<p>易混淆的概念——并行：两个或多个事件在同一时刻同时发生</p>\n<ol start=\"2\">\n<li>共享 Sharing</li>\n</ol>\n<p>共享即资源共享，是指系统中的资源内存中多个并发执行的进程共同使用。</p>\n<p><img src=\"https://s2.loli.net/2023/07/26/3LhjvubaEFBKkA6.png\" alt=\"两种资源共享方式\"></p>\n<p>所谓的“同时”往往是宏观上的，而在微观上，这些进程可能是交替地对该资源进行访问的(即分时共享)</p>\n<p>生活实例:</p>\n<ul>\n<li>互斥共享方式:使用 QQ 和微信视频。同一时间段内摄像头只能分配给其中一个进程。</li>\n<li>同时共享方式:使用 QQ 发送文件 A，同时使用微信发送文件 B。宏观上看，两边都在同时读取并发送文件，说明两个进程都在访问硬盘资源，从中读取数据。微观上看，两个进程是交替着访问硬盘的。</li>\n</ul>\n<ol start=\"3\">\n<li>虚拟 Virtual</li>\n</ol>\n<p>虚拟是指把一个物理上的实体变为若干个逻辑上的对应物。物理实体（前者）是实际存在的，而逻辑上对应物（后者）是用户感受到的。</p>\n<p><img src=\"https://s2.loli.net/2023/07/26/XufDWUeVmCJ8B9w.png\" alt=\"虚拟技术\"></p>\n<ol start=\"4\">\n<li>异步</li>\n</ol>\n<p>异步是指，在多道程序环境下，允许多个程序并发执行，但<strong>由于资源有限，进程的执行不是一贯到底的，而是走走停停，以不可预知的速度向前推进，这就是进程的异步性。</strong></p>\n<ul>\n<li>只有系统拥有并发性，才有可能导致异步性。</li>\n<li>处理不好异步性，会影响并发性能</li>\n</ul>\n<h3 id=\"2-操作系统的运行机制和体系结构\"><a href=\"#2-操作系统的运行机制和体系结构\" class=\"headerlink\" title=\"2.操作系统的运行机制和体系结构\"></a>2.操作系统的运行机制和体系结构</h3><ul>\n<li>指令</li>\n</ul>\n<p><img src=\"https://s2.loli.net/2023/07/26/WsqjlpCOxD7PVbz.png\" alt=\"指令分类\"></p>\n<ul>\n<li>CPU</li>\n</ul>\n<p><img src=\"https://s2.loli.net/2023/07/26/kHBXpeG8UOmaFxC.png\" alt=\"处理器状态\"></p>\n<ul>\n<li>程序</li>\n</ul>\n<p><img src=\"https://s2.loli.net/2023/07/26/X4lfWyzN8Z96Y7g.png\" alt=\"程序分类\"></p>\n<ul>\n<li>操作系统的内核</li>\n</ul>\n<p>由于内核划分功能的不同，内核分为大内核和微内核。</p>\n<p><img src=\"https://s2.loli.net/2023/07/26/z2ImaC6ybZjWGTg.png\" alt=\"内核层次\"></p>\n<ul>\n<li>大内核和微内核的优缺点</li>\n</ul>\n<p><img src=\"https://s2.loli.net/2023/07/29/FAjmydnWhSRXQL3.png\" alt=\"内核对比\"></p>\n<p>类比:</p>\n<ul>\n<li><p>操作系统的体系结构问题与企业的管理问题很相似。</p>\n</li>\n<li><p>内核就是企业的管理层，负责一些重要的工作。只有管理层才能执行特权指令，普通员工只能执行非特权指令。用户态、核心态之间的切换相当于普通员工和管理层之间的工作交接</p>\n</li>\n<li><p>大内核:企业初创时体量不大，管理层的人会负责大部分的事情。优点是效率高;缺点是组织结构混乱，难以维护。</p>\n</li>\n<li><p>微内核:随着企业体量越来越大，管理层只负责最核心的一些工作。优点是组织结构清晰，方便维护;缺点是效率低。</p>\n</li>\n</ul>\n<h3 id=\"3-中断和异常\"><a href=\"#3-中断和异常\" class=\"headerlink\" title=\"3.中断和异常\"></a>3.中断和异常</h3><h4 id=\"1-概念和作用\"><a href=\"#1-概念和作用\" class=\"headerlink\" title=\"1.概念和作用\"></a>1.概念和作用</h4><p><strong>中断</strong>是指计算机运行过程中，出现某些意外情况需主机干预时，机器能自动停止正在运行的程序并转入处理新情况的程序，处理完毕后又返回原被暂停的程序继续运行。</p>\n<ol>\n<li>当中断发生时，CPU 立即进入核心态</li>\n<li>当中断发生后，当前运行的进程暂停运行，并由操作系统内核对中断进行处理。</li>\n<li>对于不同的中断信号，会进行不同的处理。</li>\n<li>有了中断，才能实现多道程序并发执行。</li>\n<li>“用户态 → 核心态”是通过中断实现的，<strong>并且中断是唯一途径</strong>。“核心态 → 用户态”的切换是通过执行一个特权指令，将程序状态字（ PSW）的标志位设置为 “用户态”。</li>\n</ol>\n<h4 id=\"2-分类\"><a href=\"#2-分类\" class=\"headerlink\" title=\"2.分类\"></a>2.分类</h4><ul>\n<li>中断信号的来源来自 CPU 内部称为内中断，外部称为外中断。</li>\n</ul>\n<p><img src=\"https://s2.loli.net/2023/07/29/AXiMY9T8dsryuBq.png\" alt=\"中断的分类\"></p>\n<h4 id=\"3-中断过程\"><a href=\"#3-中断过程\" class=\"headerlink\" title=\"3. 中断过程\"></a>3. 中断过程</h4><p>查中断向量表，根据中断代码查找处理中断的程序，如果执行该程序能解决，则继续执行原 程序，否则终止。</p>\n<h3 id=\"4-系统调用\"><a href=\"#4-系统调用\" class=\"headerlink\" title=\"4.系统调用\"></a>4.系统调用</h3><h4 id=\"1-含义\"><a href=\"#1-含义\" class=\"headerlink\" title=\"1.含义\"></a>1.含义</h4><p>“系统调用”是操作系统提供给应用程序（程序员&#x2F;编程人员）使用的接口，可以理解为一种可供应用程序调用的特殊函数，应用程序可以发出系统调用请求来获得操作系统的服务。</p>\n<p><img src=\"https://s2.loli.net/2023/07/31/MiTU3BF4EOjd2mZ.png\" alt=\"系统调用\"></p>\n<h4 id=\"2-作用\"><a href=\"#2-作用\" class=\"headerlink\" title=\"2.作用\"></a>2.作用</h4><p><strong>应用程序通过系统调用请求操作系统的服务</strong>。系统中的各种共享资源都由操作系统统一掌管，因此在用户程序中，凡是与资源有关的操作（如存储分配、I&#x2F;o 操作、文件管理等），都必须通过系统调用的方式向操作系统提出服务请求，由操作系统代为完成。<strong>这样可以保证系统的稳定性和安全性，防止用户进行非法操作。</strong></p>\n<h4 id=\"3-系统调用和库函数的区别\"><a href=\"#3-系统调用和库函数的区别\" class=\"headerlink\" title=\"3.系统调用和库函数的区别\"></a>3.系统调用和库函数的区别</h4><p>编程语言（c,java）中里边有很多库函数，其实它们（不是所有的库函数）就是将系统调用封装起来，隐藏一些细节，使上层进行系统调用更加方便。</p>\n<h4 id=\"4-过程\"><a href=\"#4-过程\" class=\"headerlink\" title=\"4.过程\"></a>4.过程</h4><ul>\n<li>系统调用发生在用户态，对系统调用的处理发生在核心态。</li>\n<li>过程包括：传参、执行陷入指令（Trap 或访管指令）、内核态处理内中断、返回程序</li>\n</ul>\n<p><img src=\"https://s2.loli.net/2023/07/29/OHAk5ylGunxSoK1.png\" alt=\"系统调用总结\"></p>\n<h2 id=\"2-进程管理\"><a href=\"#2-进程管理\" class=\"headerlink\" title=\"2.进程管理\"></a>2.进程管理</h2><h3 id=\"1-进程的定义，组成，组织方式，特征\"><a href=\"#1-进程的定义，组成，组织方式，特征\" class=\"headerlink\" title=\"1.进程的定义，组成，组织方式，特征\"></a>1.进程的定义，组成，组织方式，特征</h3><h4 id=\"1-进程\"><a href=\"#1-进程\" class=\"headerlink\" title=\"1.进程\"></a>1.进程</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>由程序段、数据段和 PCB 三部分组成</p></blockquote>\n<p>程序： 就是指令序列</p>\n<p>引入多道程序（CPU 可以并发执行多个程序）之后，为了方便操作系统进行管理，引入了进程，进程实体的概念。</p>\n<p><strong>PCB，程序段，数据段三部分构成了进程实体（也叫作进程映像）</strong>。一般情况下，我们把进程实体简称为进程。</p>\n<p>例如，所谓创建进程，实质上是创建进程实体中的 PCB;而撤销进程，实质上是撤销进程实体中的 PCB.</p>\n<p><strong>PCB 是进程存在的唯一标识。</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/37d1c420af34f332857bb3718a22689b.png\" alt=\"image-20210804132427626\"></p>\n<h4 id=\"2-进程的组织方式\"><a href=\"#2-进程的组织方式\" class=\"headerlink\" title=\"2.进程的组织方式\"></a>2.进程的组织方式</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>链接方式、索引方式</p></blockquote>\n<p>在一个系统中，通常有数十、数百乃至数千个 PCB。为了能对他们加以有效的管理，应该用适当的方式把这些 PCB 组织起来。<br>注: 进程的组成讨论的是一个进程内部由哪些部分构成的问题，而进程的组织讨论的是多个进程之间的组织方式问题。</p>\n<p>相当于 java 中的链表和数组。</p>\n<p><img src=\"https://s2.loli.net/2023/07/31/9leY4PMKtjyRgOV.png\" alt=\"进程组织方式\"></p>\n<h4 id=\"3-进程的特征\"><a href=\"#3-进程的特征\" class=\"headerlink\" title=\"3.进程的特征\"></a>3.进程的特征</h4><p><img src=\"https://s2.loli.net/2023/07/31/FplKSwUJNAjdtBa.png\" alt=\"进程的特征\"></p>\n<h3 id=\"2-进程的状态和转换\"><a href=\"#2-进程的状态和转换\" class=\"headerlink\" title=\"2.进程的状态和转换\"></a>2.进程的状态和转换</h3><h4 id=\"1-状态\"><a href=\"#1-状态\" class=\"headerlink\" title=\"1.状态\"></a>1.状态</h4><p>进程是程序的一次执行。在这个过程中，进程的状态会有各种变化。为了方便各个进程的管理，操作系统将进程划分为几个状态。</p>\n<p><img src=\"https://s2.loli.net/2023/07/31/5pvQrMqiojWTfsh.png\" alt=\"进程三种基本状态\"></p>\n<p>除此之外，进程还有两种状态。</p>\n<p><img src=\"https://s2.loli.net/2023/07/31/Pso6HvfjC9SeK3n.png\" alt=\"其它状态\"></p>\n<h4 id=\"2-转换\"><a href=\"#2-转换\" class=\"headerlink\" title=\"2.转换\"></a>2.转换</h4><p><img src=\"https://s2.loli.net/2023/07/31/5DdKoy8tWN4ZJrn.png\" alt=\"进程状态转换\"></p>\n<h3 id=\"3-进程控制\"><a href=\"#3-进程控制\" class=\"headerlink\" title=\"3.进程控制\"></a>3.进程控制</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>含义</p></blockquote>\n<p><strong>进程控制就是要实现进程状态转换。</strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>实现</p></blockquote>\n<p><strong>进程控制由原语实现。</strong>所谓原语，一般是指由若干条指令组成的程序段，用来实现某个特定功能，<strong>在执行过程中不可被中断</strong>。</p>\n<p>原语采用 “关中断指令” 和 “开中断指令” 来实现。 注意： 原语运行在核心态。</p>\n<p><img src=\"https://s2.loli.net/2023/07/31/CeDQw4M2xFrOnIk.png\" alt=\"原语实现中断\"></p>\n<p>那么原语是如何实现进程状态的转换呢？</p>\n<ol>\n<li>更新 PCB 中的信息（如修改进程状态标志、将运行环境保存到 PCB、从 PCB 恢复运行环境)<br>a.所有的进程控制原语一定都会修改进程状态标志<br>b.剥夺当前运行进程的 CPU 使用权必然需要保存其运行环境<br>c.某进程开始运行前必然要恢复期运行环境</li>\n<li>将 PCB 插入合适的队列</li>\n<li>分配&#x2F;回收资源</li>\n</ol>\n<p>具体实现如图所示：</p>\n<p><img src=\"https://s2.loli.net/2023/07/31/EHA7Y2Wvm9SDarK.png\" alt=\"原语实现进程控制\"></p>\n<h3 id=\"4-进程通信\"><a href=\"#4-进程通信\" class=\"headerlink\" title=\"4.进程通信\"></a>4.进程通信</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>含义</p></blockquote>\n<p>进程通信就是进程之间的信息交换。</p>\n<p>为了保证安全，一个进程不能直接访问另一个进程的地址空间。</p>\n<p>操作系统提供了三种方法：共享存储，消息传递，管道通信。</p>\n<h4 id=\"1-共享存储\"><a href=\"#1-共享存储\" class=\"headerlink\" title=\"1.共享存储\"></a>1.共享存储</h4><p><img src=\"https://s2.loli.net/2023/07/31/LuyRVUGYpm3HKwZ.png\" alt=\"共享存储方式\"></p>\n<h4 id=\"2-管道通信\"><a href=\"#2-管道通信\" class=\"headerlink\" title=\"2.管道通信\"></a>2.管道通信</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>循环队列</p></blockquote>\n<p>1.管道只能采用半双工通信，某一时间段内只能实现单向的传输。如果要实现双向同时通信，则需要设置两个管道。 2.各进程要互斥地访问管道。 3.数据以字符流的形式写入管道，当管道写满时，写进程的 write()系统调用将被阻塞，等待读进程将数据取走。当读进程将数据全部取后，管道变空，此时读进程的 read()系统调用将被阻塞。 4.<strong>如果没写满，就不允许读。如果没读空，就不允许写。</strong><br>5．数据一旦被读出，就从管道中被抛弃，这就意味着<strong>读进程最多只能有一个，否则可能会有读错数据的情况。</strong></p>\n<p><img src=\"https://s2.loli.net/2023/07/31/AjUfDW1cepl5O7d.png\" alt=\"管道通信方式\"></p>\n<h4 id=\"3-消息传递\"><a href=\"#3-消息传递\" class=\"headerlink\" title=\"3.消息传递\"></a>3.消息传递</h4><p>进程间的数据交换以格式化的消息为单位。进程通过操作系统提供的“发送消息&#x2F;接收消息” 两个原语进行数据交换。</p>\n<p>类似于 Http 协议。</p>\n<p><img src=\"https://s2.loli.net/2023/07/31/dBeymxlnGU6OMct.png\" alt=\"消息传递方式\"></p>\n<h3 id=\"5-线程概念和多线程模型\"><a href=\"#5-线程概念和多线程模型\" class=\"headerlink\" title=\"5.线程概念和多线程模型\"></a>5.线程概念和多线程模型</h3><h4 id=\"1-概念\"><a href=\"#1-概念\" class=\"headerlink\" title=\"1.概念\"></a>1.概念</h4><p>有的进程需要同时做很多事，例如用 QQ 来进行聊天，发送文件等，而传统的进程只能<strong>串行</strong>执行一系列程序。因此，引入“线程”，来<strong>增加并发度</strong>。</p>\n<ul>\n<li><p>可以把线程理解为轻量级的进程。</p>\n</li>\n<li><p>线程是一个基本的 CPU 执行单元，也是程序执行流的最小单位。</p>\n</li>\n<li><p>引入线程后，进程作为除 CPU 之外的系统资源的分配单元。</p>\n</li>\n</ul>\n<h4 id=\"线程与进程对比\"><a href=\"#线程与进程对比\" class=\"headerlink\" title=\"线程与进程对比\"></a>线程与进程对比</h4><p>调度：线程调度无需上下文切换，开销远远小于进程调度</p>\n<p>并发性：线程进一步提升了并发性能</p>\n<p>拥有资源：</p>\n<h4 id=\"2-线程分类\"><a href=\"#2-线程分类\" class=\"headerlink\" title=\"2.线程分类\"></a>2.线程分类</h4><ol>\n<li>用户级线程</li>\n</ol>\n<ul>\n<li>用户级线程由应用程序通过线程库实现。<strong>所有的线程管理工作都由应用程序负责（包括线程切换)</strong></li>\n<li>用户级线程中，线程切换可以在用户态下即可完成，<strong>无需操作系统干预。</strong></li>\n<li>在用户看来，是有多个线程。但是在操作系统内核看来，并意识不到线程的存在。（用户级线程对用户不透明，对操作系统透明)</li>\n<li>可以这样理解，“用户级线程”就是“从用户视角看能看到的线程”。</li>\n</ul>\n<ol start=\"2\">\n<li>内核级线程</li>\n</ol>\n<ul>\n<li>内核级线程的管理工作由操作系统内核完成。线程调度、切换等工作都由内核负责，因此内核级线程的切换必然需要在核心态下才能完成。</li>\n<li>可以这样理解，“内核级线程”就是“从操作系统内核视角看能看到的线程”。</li>\n</ul>\n<p>&#x3D;&#x3D;操作系统只“看得见”内核级线程，因此只有内核级线程才是处理机分配的单位。&#x3D;&#x3D;</p>\n<h3 id=\"6-多线程模型\"><a href=\"#6-多线程模型\" class=\"headerlink\" title=\"6.多线程模型\"></a>6.多线程模型</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>多对一模型</p></blockquote>\n<ul>\n<li>多对一模型:多个用户及线程映射到一个内核级线程。每个用户进程只对应一个内核级线程。</li>\n<li>优点:用户级线程的切换在用户空间即可完成，不需要切换到核心态，<strong>线程管理的系统开销小，效率高</strong></li>\n<li>缺点:当一个用户级线程被阻塞后，整个进程都会被阻塞，并发度不高。<strong>多个线程不可在多核处理机上并行运行</strong></li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/b7e1c04ce8954a471ee08f95df17be03.png\" alt=\"image-20210804144200566\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>一对一模型</p></blockquote>\n<ul>\n<li>一对一模型:一个用户级线程映射到一个内核级线程。</li>\n<li>优点:当一个线程被阻塞后，别的线程还可以继续执行，并发能力强。<strong>多线程可在多核处理机上并行执行。</strong></li>\n<li>缺点:一个用户进程会占用多个内核级线程，线程切换由操作系统内核完成，需要切换到核心态，<strong>因此线程管理的成本高，开销大。</strong></li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/30546ad553f8744f00864f7a3b4399aa.png\" alt=\"image-20210804144508904\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>多对多模型</p></blockquote>\n<ul>\n<li>多对多模型:n 用户级线程映射到 m 个内核级线程(n &gt;&#x3D;m)。每个用户进程对应 m 个内核级线程。</li>\n<li>克服了多对一模型并发度不高的缺点，又克服了一对一模型中一个用户进程占用太多内核级线程，开销太大的缺点。</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/a42d433bc67c626ca4be89520a9b6572.png\" alt=\"image-20210804144634167\"></p>\n<h3 id=\"7-处理机调度的概念和层次\"><a href=\"#7-处理机调度的概念和层次\" class=\"headerlink\" title=\"7.处理机调度的概念和层次\"></a>7.处理机调度的概念和层次</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>含义</p></blockquote>\n<p>在多道程序系统中，进程的数量往往是多于处理机的个数的，这样不可能同时并行地处理各个进程。</p>\n<p>处理机调度，就是从就绪队列中按照一定的算法选择一个进程并将处理机分配给它运行，以实现进程的并发执行。</p>\n<p>调度分为三个层次，分别为高级调度，中级调度，初级调度。</p>\n<h4 id=\"1-高级调度\"><a href=\"#1-高级调度\" class=\"headerlink\" title=\"1.高级调度\"></a>1.高级调度</h4><ul>\n<li>由于内存空间有限，有时无法将用户提交的作业全部放入内存，因此就需要确定某种规则来决定将作业调入内存的顺序。</li>\n<li>高级调度（作业调度)。按一定的原则从外存上处于后备队列的作业中挑选一个(或多个）作业，给他们分配内存等必要资源，并建立相应的进程（建立 PCB)，以使它（们）获得竞争处理机的权利。</li>\n<li><strong>高级调度是辅存（外存）与内存之间的调度</strong>。每个作业只调入一次，调出一次。作业调入时会建立相应的 PCB，作业调出时才撤销 PCB。<strong>高级调度主要是指调入的问题</strong>，因为只有调入的时机需要操作系统来确定，调出的时机必然是作业运行结束才调出。</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/6a9a38fbdf651ec632a50274cea46f70.png\" alt=\"image-20210804152012091\"></p>\n<h4 id=\"2-中级调度\"><a href=\"#2-中级调度\" class=\"headerlink\" title=\"2.中级调度\"></a>2.中级调度</h4><ul>\n<li>引入了虚拟存储技术之后，可将暂时不能运行的进程调至外存等待。等它重新具备了运行条件且内存又稍有空闲时，再重新调入内存。<strong>这么做的目的是为了提高内存利用率和系统吞吐量</strong>。</li>\n<li>暂时调到外存等待的进程状态为挂起状态。值得注意的是，PCB 并不会一起调到外存，而是会常驻内存。PCB 中会记录进程数据在外存中的存放位置，进程状态等信息，操作系统通过内存中的 PCB 来保持对各个进程的监控、管理。被挂起的进程 PCB 会被放到的挂起队列中。</li>\n<li><strong>中级调度（内存调度），就是要决定将哪个处于挂起状态的进程重新调入内存。</strong></li>\n<li>一个进程可能会被多次调出、调入内存，因此<strong>中级调度发生的频率要比高级调度更高。</strong></li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/37c75d014d6c0816607b1eb690d31a11.png\" alt=\"image-20210804152341270\"></p>\n<h4 id=\"补充知识：进程的七状态模型\"><a href=\"#补充知识：进程的七状态模型\" class=\"headerlink\" title=\"补充知识：进程的七状态模型\"></a>补充知识：进程的七状态模型</h4><ul>\n<li><p>暂时被调到外存等待的进程状态称为挂起状态。</p>\n</li>\n<li><p>挂起状态又可以进一步细分为就绪挂起，堵塞挂起两种状态。</p>\n</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/2d7353e5c69a5b2f8e9e7041d3593103.png\" alt=\"image-20210804152935709\"></p>\n<h4 id=\"3-低级调度\"><a href=\"#3-低级调度\" class=\"headerlink\" title=\"3.低级调度\"></a>3.低级调度</h4><ul>\n<li>低级调度（进程调度），其主要任务是按照某种方法和策略<strong>从就绪队列中选取一个进程，将处理机分配给它。</strong></li>\n<li>进程调度是操作系统中最基本的一种调度，在一般的操作系统中都必须配置进程调度。</li>\n<li>进程调度的频率很高，一般几十毫秒一次。</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/5447df82195ed45119ff23ddad012205.png\" alt=\"image-20210804153047419\"></p>\n<h4 id=\"4-三种调度的联系和对比\"><a href=\"#4-三种调度的联系和对比\" class=\"headerlink\" title=\"4.三种调度的联系和对比\"></a>4.三种调度的联系和对比</h4><p><img src=\"https://img-blog.csdnimg.cn/img_convert/002c477097ce9a50c6d7bd7690471560.png\" alt=\"image-20210804153249686\"></p>\n<h3 id=\"8-进程调度的时机，切换过程和方式\"><a href=\"#8-进程调度的时机，切换过程和方式\" class=\"headerlink\" title=\"8.进程调度的时机，切换过程和方式\"></a>8.进程调度的时机，切换过程和方式</h3><h4 id=\"1-进程调度的时机\"><a href=\"#1-进程调度的时机\" class=\"headerlink\" title=\"1.进程调度的时机\"></a>1.进程调度的时机</h4><p><img src=\"https://img-blog.csdnimg.cn/img_convert/3189df2592fc681dea9a6a830e205371.png\" alt=\"image-20210805140446449\"></p>\n<p>临界资源： 一个时间段内只允许一个进程使用的资源。各进程需要互斥的访问临界资源。</p>\n<p>临界区：访问临界资源的那段代码。</p>\n<p>内核程序临界区一般是用来访问某种内核数据结构的，比如进程的就绪队列。</p>\n<h4 id=\"2-进程调度的方式\"><a href=\"#2-进程调度的方式\" class=\"headerlink\" title=\"2.进程调度的方式\"></a>2.进程调度的方式</h4><ul>\n<li>非剥夺调度方式，又称非抢占方式。即，只允许进程主动放弃处理机。在运行过程中即便有更紧迫的任务到达，当前进程依然会继续使用处理机，直到该进程终止或主动要求进入阻塞态。</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>优点</p></blockquote>\n<ul>\n<li>实现简单,系统开销小但是无法及时处理紧急任务，适合于早期的批处理系统</li>\n</ul>\n<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>\n<ul>\n<li>剥夺调度方式，又称抢占方式。当一个进程正在处理机上执行时，如果有一个更重要或更紧迫的进程需要使用处理机，则立即暂停正在执行的进程，将处理机分配给更重要紧迫的那个进程。</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>优点</p></blockquote>\n<ul>\n<li>可以优先处理更紧急的进程，也可实现让各进程按时间片轮流执行的功能（通过时钟中断）。适合于分时操作系统、实时操作系统</li>\n</ul>\n<h4 id=\"3-进程的切换与过程\"><a href=\"#3-进程的切换与过程\" class=\"headerlink\" title=\"3.进程的切换与过程\"></a>3.进程的切换与过程</h4><p>“狭义的进程调度”与“进程切换”的区别:</p>\n<ul>\n<li><p>狭义的进程调度指的是从就绪队列中选中一个要运行的进程。(这个进程可以是刚刚被暂停执行的进程，也可能是另一个进程，后一种情况就需要进程切换）</p>\n</li>\n<li><p>进程切换是指一个进程让出处理机，由另一个进程占用处理机的过程。</p>\n</li>\n</ul>\n<p><strong>广义的进程调度包含了选择一个进程和进程切换两个步骤。</strong></p>\n<p>进程切换的过程主要完成了:</p>\n<ul>\n<li><p>1.对原来运行进程各种数据的保存</p>\n</li>\n<li><p>2.对新的进程各种数据的恢复(如:程序计数器、程序状态字、各种数据寄存器等处理机现场信息，这些信息一般保存在进程控制块)</p>\n</li>\n</ul>\n<p>注意 : <strong>进程切换是有代价的</strong>，因此如果过于频繁的进行进程调度、切换，必然会使整个系统的效率降低，使系统大部分时间都花在了进程切换上，而真正用于执行进程的时间减少。</p>\n<h3 id=\"9-调度算法的评价指标\"><a href=\"#9-调度算法的评价指标\" class=\"headerlink\" title=\"9.调度算法的评价指标\"></a>9.调度算法的评价指标</h3><ul>\n<li>CPU 利用率： CPU”忙碌”的时间占总时间的比例。</li>\n<li>系统吞吐量：单位时间内完成作业的数量。</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/279ed1d5604f327f61f532fa69fe2189.png\" alt=\"image-20210805142159718\"></p>\n<ul>\n<li>周转时间：是指从作业被提交给系统开始，到作业完成为止的时间间隔。</li>\n</ul>\n<p>（作业）周转时间&#x3D;作业完成时的时间-作业提交时间</p>\n<p>平均周转时间&#x3D;各作业周转时间之和&#x2F;作业数</p>\n<p>由于在周转时间相同的情况下，运行时间不同的作业，给用户的感觉是不一样的，所以提出了带权周转时间的概念。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/1ea90ebefb8ebaca1a61217854393b9d.png\" alt=\"image-20210805142921145\"></p>\n<ul>\n<li>等待时间：指进程&#x2F;作业处于等待处理机状态时间之和，等待时间越长，用户满意度越低。</li>\n</ul>\n<p>对于进程来说，等待时间就是指进程建立后等待被服务的时间之和，在等待 I&#x2F;O 完成的期间其实进程也是在被服务的，所以不计入等待时间。<br>对于作业来说，不仅要考虑建立进程后的等待时间，还要加上作业在外存后备队列中等待的时间。</p>\n<ul>\n<li>响应时间：指从用户提交请求到首次产生响应所用的时间。</li>\n</ul>\n<h3 id=\"10-调度算法（1）\"><a href=\"#10-调度算法（1）\" class=\"headerlink\" title=\"10.调度算法（1）\"></a>10.调度算法（1）</h3><h4 id=\"1-先来先服务（FCFS，First-Come-First-Serve）\"><a href=\"#1-先来先服务（FCFS，First-Come-First-Serve）\" class=\"headerlink\" title=\"1.先来先服务（FCFS，First Come First Serve）\"></a>1.先来先服务（FCFS，First Come First Serve）</h4><p><img src=\"https://img-blog.csdnimg.cn/img_convert/ddd1128e6e06e3683a8615a80c6dc92f.png\" alt=\"image-20210805144150920\"></p>\n<h4 id=\"2-短作业优先（SJF，Shortest-Job-First）\"><a href=\"#2-短作业优先（SJF，Shortest-Job-First）\" class=\"headerlink\" title=\"2.短作业优先（SJF，Shortest Job First）\"></a>2.短作业优先（SJF，Shortest Job First）</h4><p><img src=\"https://img-blog.csdnimg.cn/img_convert/03812d061a40da193acf0cd88103b4f3.png\" alt=\"image-20210805145121363\"></p>\n<h4 id=\"3-高响应比优先（HRRN，Highest-Response-Ratio-Next）\"><a href=\"#3-高响应比优先（HRRN，Highest-Response-Ratio-Next）\" class=\"headerlink\" title=\"3.高响应比优先（HRRN，Highest Response Ratio Next）\"></a>3.高响应比优先（HRRN，Highest Response Ratio Next）</h4><p><img src=\"https://img-blog.csdnimg.cn/img_convert/3cbe3e59dbebeea7180c95b433760ae1.png\" alt=\"image-20210805145558483\"></p>\n<h4 id=\"4-三种算法对比\"><a href=\"#4-三种算法对比\" class=\"headerlink\" title=\"4.三种算法对比\"></a>4.三种算法对比</h4><p><img src=\"https://img-blog.csdnimg.cn/img_convert/103fb44c93582d302f963c1ce7548072.png\" alt=\"image-20210805145752847\"></p>\n<p>注:这几种算法主要关心对用户的公平性、平均周转时间、平均等待时间等评价系统整体性能的指标，但是不关心“响应时间”，也并不区分任务的紧急程度，因此对于用户来说，交互性很糟糕。<strong>因此这三种算法一般适合用于早期的批处理系统</strong>，当然，FCFS 算法也常结合其他的算法使用，在现在也扮演着很重要的角色。而适合用于交互式系统的调度算法将在下个小节介绍…</p>\n<h3 id=\"11-调度算法（2）\"><a href=\"#11-调度算法（2）\" class=\"headerlink\" title=\"11.调度算法（2）\"></a>11.调度算法（2）</h3><h4 id=\"1-时间片轮转调度（RR，Round-Robin）\"><a href=\"#1-时间片轮转调度（RR，Round-Robin）\" class=\"headerlink\" title=\"1.时间片轮转调度（RR，Round-Robin）\"></a>1.时间片轮转调度（RR，Round-Robin）</h4><p><img src=\"https://img-blog.csdnimg.cn/img_convert/8c9299024e9ae9d72d4ebcc47e46140d.png\" alt=\"image-20210805151053159\"></p>\n<ul>\n<li>如果时间片太大，使得每个进程都可以在一个时间片内就完成，则时间片轮转调度算法退化为先来先服务调度算法，并且会增大进程响应时间。因此时间片不能太大。</li>\n<li>另一方面，进程调度、切换是有时间代价的(保存、恢复运行环境)，因此如果时间片太小，会导致进程切换过于频繁，系统会花大量的时间来处理进程切换，从而导致实际用于进程执行的时间比例减少。可见时间片也不能太小。</li>\n<li>一般来说，设计时间片要让切换进程的开销占比不超过 1%。</li>\n</ul>\n<h4 id=\"2-优先级调度算法\"><a href=\"#2-优先级调度算法\" class=\"headerlink\" title=\"2.优先级调度算法\"></a>2.优先级调度算法</h4><p><img src=\"https://img-blog.csdnimg.cn/img_convert/1ad11f390e65870ac70a17f5e5fa5a8d.png\" alt=\"image-20210805152056532\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/2dc33f9d6b1f31efaaf475c97517e2aa.png\" alt=\"image-20210805152129027\"></p>\n<h4 id=\"3-多级反馈队列调度算法\"><a href=\"#3-多级反馈队列调度算法\" class=\"headerlink\" title=\"3.多级反馈队列调度算法\"></a>3.多级反馈队列调度算法</h4><p><img src=\"https://img-blog.csdnimg.cn/img_convert/f7eca0fceaac9826bf70f59103187eca.png\" alt=\"image-20210805152958697\"></p>\n<ul>\n<li>通过下边的例子来加深理解</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/9a867b7870c21907cb8384fdfd17d744.png\" alt=\"image-20210805153054972\"></p>\n<h4 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4.总结\"></a>4.总结</h4><p>比起早期的批处理操作系统来说，由于计算机造价大幅降低，因此之后出现的交互式操作系统（包括分时操作系统、实时操作系统等）更注重系统的响应时间、公平性、平衡性等指标。而这几种算法恰好也能较好地满足交互式系统的需求。因此<strong>这三种算法适合用于交互式系统。</strong>(比如 UNIX 使用的就是多级反馈队列调度算法)</p>\n<h3 id=\"12-进程同步与进程互斥\"><a href=\"#12-进程同步与进程互斥\" class=\"headerlink\" title=\"12.进程同步与进程互斥\"></a>12.进程同步与进程互斥</h3><h4 id=\"1-进程同步\"><a href=\"#1-进程同步\" class=\"headerlink\" title=\"1.进程同步\"></a>1.进程同步</h4><ul>\n<li>通过进程通信——管道通信的例子来了解什么是进程同步。</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/ab782cbc2f93b0bd295915a8ad265113.png\" alt=\"image-20210805153649199\"></p>\n<p>读进程和写进程并发地运行，由于并发必然导致异步性，因此“写数据”和“读数据”两个操作执行的先后顺序是不确定的。而实际应用中，又必须按照“写数据 → 读数据”的顺序来执行的。<strong>如何解决这种异步问题，就是“进程同步”所讨论的内容。</strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>含义</p></blockquote>\n<p>同步亦称直接制约关系，它是指为完成某种任务而建立的两个或多个进程，这些进程因为需要在某些位置上协调它们的工作次序而产生的制约关系。进程间的直接制约关系就是源于它们之间的相互合作。</p>\n<h4 id=\"2-进程互斥\"><a href=\"#2-进程互斥\" class=\"headerlink\" title=\"2.进程互斥\"></a>2.进程互斥</h4><ul>\n<li>我们把一个时间段内只允许一个进程使用的资源称为临界资源。</li>\n<li>许多物理设备（比如摄像头、打印机）都属于临界资源。此外还有许多变量、数据、内存缓冲区等都属于临界资源。</li>\n<li>对临界资源的访问，必须互斥地进行。互斥，亦称间接制约关系。</li>\n<li><strong>进程互斥指当一个进程访问某临界资源时，另一个想要访问该临界资源的进程必须等待。当前访问临界资源的进程访问结束，释放该资源之后，另一个进程才能去访问临界资源。</strong></li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/a6e491f1593764945389020d3488ec2b.png\" alt=\"image-20210805154317605\"></p>\n<p>对临界资源的互斥访问，可以在逻辑上分为如下四个部分:</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/fcc9ed820167671f745395456bd93c78.png\" alt=\"image-20210805154539614\"></p>\n<p>为了实现对临界资源的互斥访问，同时保证系统整体性能，需要遵循以下原则:</p>\n<ol>\n<li>空闲让进。临界区空闲时，可以允许一个请求进入临界区的进程立即进入临界区;</li>\n<li>忙则等待。当已有进程进入临界区时，其他试图进入临界区的进程必须等待;</li>\n<li>有限等待。对请求访问的进程，应保证能在有限时间内进入临界区（保证不会饥饿)</li>\n<li>让权等待。当进程不能进入临界区时，应立即释放处理机，防止进程忙等待。</li>\n</ol>\n<h3 id=\"13-进程互斥的软件实现方法\"><a href=\"#13-进程互斥的软件实现方法\" class=\"headerlink\" title=\"13.进程互斥的软件实现方法\"></a>13.进程互斥的软件实现方法</h3><h4 id=\"1-单标志法\"><a href=\"#1-单标志法\" class=\"headerlink\" title=\"1.单标志法\"></a>1.单标志法</h4><p>算法思想:每个进程在访问完临界区后会把使用临界区的权限转交给另一个进程。也就是说<strong>每个进程进入临界区的权限只能被另一个进程赋予</strong>。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>代码实现</p></blockquote>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/ca8d3bd22ad27e78f6a089f652f2a818.png\" alt=\"image-20210805155502678\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>解释</p></blockquote>\n<p>turn 的初值为 0，即刚开始只允许 0 号进程进入临界区。<br>若 P1 先上处理机运行，则会一直卡在 ⑤。直到 P1 的时间片用完，发生调度，切换 P0 上处理机运行。代码 ① 不会卡住 P0，P0 可以正常访问临界区，在 P0 访问临界区期间即时切换回 P1，P1 依然会卡在 ⑤。只有 P0 在退出区将 turn 改为 1 后，P1 才能进入临界区。<br>因此，<strong>该算法可以实现“同一时刻最多只允许一个进程访问临界区”</strong></p>\n<p>turn 表示当前允许进入临界区的进程号，而只有当前允许进入临界区的进程在访问了临界区之后，才会修改 turn 的值。</p>\n<p>也就是说，对于临界区的访问，一定是按 P0→P1→P0→P1→……这样轮流访问。这种必须“轮流访问”带来的问题是，如果此时允许进入临界区的进程是 P0，而 P0 一直不访问临界区，那么虽然此时临界区空闲，但是并不允许 P1 访问。<br>因此，<strong>单标志法存在的主要问题是:违背“空闲让进”原则。</strong></p>\n<h4 id=\"2-双标志先检查法\"><a href=\"#2-双标志先检查法\" class=\"headerlink\" title=\"2.双标志先检查法\"></a>2.双标志先检查法</h4><p>算法思想:设置一个布尔型数组 flag[]，数组中各个元素用来标记各进程想进入临界区的意愿，比如“flag[0] &#x3D;ture”意味着 0 号进程 P0 现在想要进入临界区。每个进程在进入临界区之前先检查当前有没有别的进程想进入临界区，如果没有，则把自身对应的标志 flag[li]设为 true，之后开始访问临界区。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/0e91becb0fdb10f94f2b8fca3f0efbba.png\" alt=\"image-20210805160140406\"></p>\n<p>若按照 ①⑤②⑥③⑦….的顺序执行，P0 和 P1 将会同时访问临界区。因此，<strong>双标志先检查法的主要问题是:违反“忙则等待”原则。</strong><br>原因在于，进入区的“检查”和“上锁”两个处理不是一气呵成的。“检查”后，“上锁”前可能发生进程切换。</p>\n<h4 id=\"3-双标志后检查法\"><a href=\"#3-双标志后检查法\" class=\"headerlink\" title=\"3.双标志后检查法\"></a>3.双标志后检查法</h4><p><img src=\"https://img-blog.csdnimg.cn/img_convert/e7244375b3afd7f547061b9d5d8460fd.png\" alt=\"image-20210805160459552\"></p>\n<h4 id=\"4-Peterson-算法\"><a href=\"#4-Peterson-算法\" class=\"headerlink\" title=\"4.Peterson 算法\"></a>4.Peterson 算法</h4><p>算法思想:双标志后检查法中，两个进程都争着想进入临界区，但是谁也不让谁，最后谁都无法进入临界区。Gary L.Peterson 想到了一种方法，<strong>如果双方都争着想进入临界区，那可以让进程尝试“孔融让梨”，主动让对方先使用临界区。</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/9e38525505d28fd8c7d5be7965292a90.png\" alt=\"image-20210805161159117\"></p>\n<ul>\n<li>Peterson 算法用软件方法解决了<strong>进程互斥问题，遵循了空闲让进、忙则等待、有限等待</strong>三个原则，但是依然未遵循让权等待的原则。</li>\n<li>Peterson 算法相较于之前三种软件解决方案来说，是最好的，但依然不够好。</li>\n</ul>\n<h3 id=\"14-进程互斥的硬件实现方法\"><a href=\"#14-进程互斥的硬件实现方法\" class=\"headerlink\" title=\"14.进程互斥的硬件实现方法\"></a>14.进程互斥的硬件实现方法</h3><h4 id=\"1-中断屏蔽方法\"><a href=\"#1-中断屏蔽方法\" class=\"headerlink\" title=\"1.中断屏蔽方法\"></a>1.中断屏蔽方法</h4><p><img src=\"https://img-blog.csdnimg.cn/img_convert/43cb79615ff03f08e55e1135c9965333.png\" alt=\"image-20210805163248064\"></p>\n<h4 id=\"2-TestAndSet-指令\"><a href=\"#2-TestAndSet-指令\" class=\"headerlink\" title=\"2.TestAndSet 指令\"></a>2.TestAndSet 指令</h4><p><img src=\"https://img-blog.csdnimg.cn/img_convert/1ecf20d2bfc8482acd0186d3718004a9.png\" alt=\"image-20210805163700544\"></p>\n<h4 id=\"3-Swap-指令\"><a href=\"#3-Swap-指令\" class=\"headerlink\" title=\"3.Swap 指令\"></a>3.Swap 指令</h4><p><img src=\"https://img-blog.csdnimg.cn/img_convert/449b870fd8f5c9073aec9ad0c0330262.png\" alt=\"image-20210805163905058\"></p>\n<h3 id=\"15-信号量机制\"><a href=\"#15-信号量机制\" class=\"headerlink\" title=\"15.信号量机制\"></a>15.信号量机制</h3><h4 id=\"1-什么是信号量\"><a href=\"#1-什么是信号量\" class=\"headerlink\" title=\"1.什么是信号量\"></a>1.什么是信号量</h4><ul>\n<li>用户进程可以通过使用操作系统提供的<strong>一对原语</strong>来对信号量进行操作，从而很方便的实现了进程互斥、进程同步。</li>\n<li><strong>信号量其实就是一个变量（可以是一个整数，也可以是更复杂的记录型变量)，</strong>可以用一个信号量来表示系统中某种资源的数量，比如:系统中只有一台打印机，就可以设置一个初值为 1 的信号量。</li>\n<li>原语是一种特殊的程序段，其执行只能一气呵成，不可被中断。原语是由关中断&#x2F;开中断指令实现的。</li>\n<li>一对原语: wait(S)原语和 signal(S)原语，可以把原语理解为我们自己写的函数，函数名分别为 wait 和 signal，括号里的信号量 s 其实就是函数调用时传入的一个参数。</li>\n<li>wait、signal 原语常简称为 P、V 操作（来自荷兰语 proberen 和 verhogen)。因此，做题的时候常把 wait(S)、 signal(S)两个操作分别写为 P(S)、V(S)。</li>\n</ul>\n<h4 id=\"2-整型信号量\"><a href=\"#2-整型信号量\" class=\"headerlink\" title=\"2.整型信号量\"></a>2.整型信号量</h4><p>用一个整数型的变量作为信号量，用来表示系统中某种资源的数量。</p>\n<p>与普通整数变量的区别：对信号量的操作只有三种，初始化，P 操作，V 操作。</p>\n<p>下面以打印机为例：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/d3e9ed36c7bac31fc1dbf78aa751e000.png\" alt=\"image-20210806131030861\"></p>\n<h4 id=\"3-记录型信号量\"><a href=\"#3-记录型信号量\" class=\"headerlink\" title=\"3.记录型信号量\"></a>3.记录型信号量</h4><p>整型信号量的缺陷是存在“忙等”问题，因此人们又提出了“记录型信号量”，即用<strong>记录型数据结构表示的信号量</strong>。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/f694412f66de5efcbd4d4f4a9db4b041.png\" alt=\"image-20210806131433220\"></p>\n<h3 id=\"16-用信号量实现进程互斥，同步，前驱关系\"><a href=\"#16-用信号量实现进程互斥，同步，前驱关系\" class=\"headerlink\" title=\"16.用信号量实现进程互斥，同步，前驱关系\"></a>16.用信号量实现进程互斥，同步，前驱关系</h3><h4 id=\"1-信号量机制实现进程互斥\"><a href=\"#1-信号量机制实现进程互斥\" class=\"headerlink\" title=\"1.信号量机制实现进程互斥\"></a>1.信号量机制实现进程互斥</h4><ol>\n<li>分析并发进程的关键活动，划定临界区（如:对临界资源打印机的访问就应放在临界区)</li>\n<li>设置互斥信号量 mutex，初值为 1</li>\n<li>在临界区之前执行 P(mutex)</li>\n<li>在临界区之后执行 V(mutex)</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/87e5c5164591e6b5934f832272f201ab.png\" alt=\"image-20210806132725957\"></p>\n<p>注意： 对不同的临界资源（如摄像头，打印机）需要设置不同的互斥信号量。</p>\n<p><strong>P、V 操作必须成对出现。缺少 P(mutex)就不能保证临界资源的互斥访问。缺少 V(mutex)会导致资源永不被释放，等待进程永不被唤醒。</strong></p>\n<h4 id=\"2-信号量机制实现进程同步\"><a href=\"#2-信号量机制实现进程同步\" class=\"headerlink\" title=\"2.信号量机制实现进程同步\"></a>2.信号量机制实现进程同步</h4><p>进程同步：要让各并发进程按要求有序的进行。</p>\n<p>那么如何实现呢？</p>\n<ol>\n<li>分析什么地方需要实现“同步关系”，即必须保证“一前一后”执行的两个操作（或两句代码)</li>\n<li>设置同步信号量 s,初始为 0</li>\n<li>在“前操作”之后执行 v(S)</li>\n<li>在“后操作”之前执行 P(S)</li>\n</ol>\n<p>下面通过一个例子来解释，要求：进程 2 的代码 4 必须在进程 1 的代码 2 之后执行。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/081e617577b927356337cc0e9fd189d4.png\" alt=\"image-20210806133559929\"></p>\n<h4 id=\"3-信号量机制实现前驱关系\"><a href=\"#3-信号量机制实现前驱关系\" class=\"headerlink\" title=\"3.信号量机制实现前驱关系\"></a>3.信号量机制实现前驱关系</h4><p>进程 P1 中有句代码 S1，P2 中有句代码 S2 …P… P6 中有句代码 S6。这些代码要求按如下前驱图所示的顺序来执行:<br>其实每一对前驱关系都是一个进程同步问题（需要保证一前一后的操作)，因此，<br>1．要为每一对前驱关系各设置一个同步变量</p>\n<p>2．在“前操作”之后对相应的同步变量执行 V 操作</p>\n<p>3.在“后操作”之前对相应的同步变量执行 Р 操作</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/ee8027dccb57609b12bd84bb7163a7be.png\" alt=\"image-20210806133958251\"></p>\n<h3 id=\"17-生产者——消费者问题\"><a href=\"#17-生产者——消费者问题\" class=\"headerlink\" title=\"17.生产者——消费者问题\"></a>17.生产者——消费者问题</h3><h4 id=\"1-问题描述\"><a href=\"#1-问题描述\" class=\"headerlink\" title=\"1.问题描述\"></a>1.问题描述</h4><p>系统中有一组生产者进程和一组消费者进程，生产者进程每次生产一个产品放入缓冲区，消费者进程每次从缓冲区中取出一个产品并使用。(注:这里的“产品”理解为某种数据)</p>\n<ul>\n<li>生产者、消费者共享一个初始为空、大小为 n 的缓冲区。</li>\n<li>只有缓冲区没满时，生产者才能把产品放入缓冲区，否则必须等待。</li>\n<li>只有缓冲区不空时，消费者才能从中取出产品，否则必须等待。</li>\n<li>缓冲区是临界资源，各进程必须互斥地访问。</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/772d66766aaa0182f31b1558d9cc18c1.png\" alt=\"image-20210806134848101\"></p>\n<h4 id=\"2-问题分析\"><a href=\"#2-问题分析\" class=\"headerlink\" title=\"2.问题分析\"></a>2.问题分析</h4><p><img src=\"https://img-blog.csdnimg.cn/img_convert/6dd4f6b27a8d9f02c97a790519dc7a83.png\" alt=\"image-20210806134953024\"></p>\n<h4 id=\"3-如何实现\"><a href=\"#3-如何实现\" class=\"headerlink\" title=\"3.如何实现\"></a>3.如何实现</h4><p><img src=\"https://img-blog.csdnimg.cn/img_convert/f48264b874b5a5198ddd6796e26bd415.png\" alt=\"image-20210806135800310\"></p>\n<h4 id=\"4-能够改变相邻-P，V-的顺序\"><a href=\"#4-能够改变相邻-P，V-的顺序\" class=\"headerlink\" title=\"4.能够改变相邻 P，V 的顺序\"></a>4.能够改变相邻 P，V 的顺序</h4><p><img src=\"https://img-blog.csdnimg.cn/img_convert/d1a0a5110093ccfe6d8cba675f23907e.png\" alt=\"image-20210806135911104\"></p>\n<h3 id=\"18-多生产者——多消费者\"><a href=\"#18-多生产者——多消费者\" class=\"headerlink\" title=\"18.多生产者——多消费者\"></a>18.多生产者——多消费者</h3><h4 id=\"1-问题描述-1\"><a href=\"#1-问题描述-1\" class=\"headerlink\" title=\"1.问题描述\"></a>1.问题描述</h4><p>桌子上有一只盘子，每次只能向其中放入一个水果。爸爸专向盘子中放苹果，妈妈专向盘子中放橘子，儿子专等着吃盘子中的橘子，女儿专等着吃盘子中的苹果。只有盘子空时，爸爸或妈妈才可向盘子中放一个水果。仅当盘子中有自己需要的水果时，儿子或女儿可以从盘子中取出水果。用 PV 操作实现上述过程。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/f310ca95c670b6f61db93333e070134a.png\" alt=\"image-20210806140946552\"></p>\n<h4 id=\"2-如何实现\"><a href=\"#2-如何实现\" class=\"headerlink\" title=\"2.如何实现\"></a>2.如何实现</h4><p><img src=\"https://img-blog.csdnimg.cn/img_convert/4ac991dd36cb6f27f554522a4cc5f8f9.png\" alt=\"image-20210806141024230\"></p>\n<p>问题：可不可以不使用问题信号量？</p>\n<p>结论:即使不设置专门的互斥变量 mutex，也不会出现多个进程同时访问盘子的现象</p>\n<p>原因在于:本题中的缓冲区大小为 1，在任何时刻，apple、orange、plate 三个同步信号量中最多只有一个是 1。因此在任何时刻,最多只有一个进程的 P 操作不会被阻塞，并顺利地进入临界区…</p>\n<p>如果盘子（缓冲区）数量为 2，可能会出现两个进程同时访问缓冲区的情况，有可能导致两个进程写入缓冲区的数据相互覆盖的情况。</p>\n<h4 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3.总结\"></a>3.总结</h4><ol>\n<li>在生产者-消费者问题中，如果缓冲区大小为 1，那么有可能不需要设置互斥信号量就可以实现互斥访问缓冲区的功能。当然，这不是绝对的，要具体问题具体分析。</li>\n<li>建议:在考试中如果来不及仔细分析，可以加上互斥信号量，保证各进程一定会互斥地访问缓冲区。但需要注意的是，实现互斥的 P 操作一定要在实现同步的 P 操作之后，否则可能引起“死锁”。</li>\n</ol>\n<h3 id=\"19-吸烟者问题\"><a href=\"#19-吸烟者问题\" class=\"headerlink\" title=\"19.吸烟者问题\"></a>19.吸烟者问题</h3><h4 id=\"1-问题描述-2\"><a href=\"#1-问题描述-2\" class=\"headerlink\" title=\"1.问题描述\"></a>1.问题描述</h4><p>假设一个系统有三个抽烟者进程和一个供应者进程。每个抽烟者不停地卷烟并抽掉它，但是要卷起并抽掉一支烟，抽烟者需要有三种材料:烟草、纸和胶水。三个抽烟者中，第一个拥有烟草、第二个拥有纸、第三个拥有胶水。供应者进程无限地提供三种材料，供应者每次将两种材料放桌子上，拥有剩下那种材料的抽烟者卷一根烟并抽掉它，并给供应者进程一个信号告诉完成了，供应者就会放另外两种材料再桌上，这个过程一直重复(让三个抽烟者轮流地抽烟)。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/6725edf55ad6a75ccbb8373c947733f2.png\" alt=\"image-20210807131831561\"></p>\n<h4 id=\"2-如何解决\"><a href=\"#2-如何解决\" class=\"headerlink\" title=\"2.如何解决\"></a>2.如何解决</h4><p><img src=\"https://img-blog.csdnimg.cn/img_convert/aa825efe6a5b9ccb9544b2d5c59d6599.png\" alt=\"image-20210807131924674\"></p>\n<h3 id=\"20-读者——写者问题\"><a href=\"#20-读者——写者问题\" class=\"headerlink\" title=\"20.读者——写者问题\"></a>20.读者——写者问题</h3><h4 id=\"1-问题描述-3\"><a href=\"#1-问题描述-3\" class=\"headerlink\" title=\"1.问题描述\"></a>1.问题描述</h4><p>有读者和写者两组并发进程，共享一个文件，当两个或两个以上的读进程同时访问共享数据时不会产生副作用，但若某个写进程和其他进程（读进程或写进程）同时访问共享数据时则可能导致数据不一致的错误。因此要求:</p>\n<p>① 允许多个读者可以同时对文件执行读操作;</p>\n<p>② 只允许一个写者往文件中写信息;</p>\n<p>③ 任一写者在完成写操作之前不允许其他读者或写者工作;</p>\n<p>④ 写者执行写操作前，应让已有的读者和写者全部退出。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/177ebb9d437f0a037bb81df8faf39a04.png\" alt=\"image-20210807133416464\"></p>\n<h4 id=\"2-如何实现-1\"><a href=\"#2-如何实现-1\" class=\"headerlink\" title=\"2.如何实现\"></a>2.如何实现</h4><p><img src=\"https://img-blog.csdnimg.cn/img_convert/20eb775044267cfb7ef9926fb41d6104.png\" alt=\"image-20210807133502764\"></p>\n<ul>\n<li>潜在的问题：只要读进程还在读，写进程就要一直堵塞等待，可能会饿死。因此在这种算法中，读进程优先。下面来实现“ 先来先服务”算法，这样就不会导致写进程饿死。</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/4e603a19e928c08bf3caf6eee68ef233.png\" alt=\"image-20210807133533828\"></p>\n<h4 id=\"3-总结-1\"><a href=\"#3-总结-1\" class=\"headerlink\" title=\"3.总结\"></a>3.总结</h4><p>读者-写者问题为我们解决复杂的互斥问题提供了一个参考思路。<br>其核心思想在于<strong>设置了一个计数器 count 用来记录当前正在访问共享文件的读进程数</strong>。我们可以用 count 的值来判断当前进入的进程是否是第一个&#x2F;最后一个读进程，从而做出不同的处理。<br>另外，对 count 变量的检查和赋值不能一气呵成导致了一些错误，<strong>如果需要实现“一气呵成”，自然应该想到用互斥信号量。</strong><br>最后，还要认真体会我们是如何解决“写进程饥饿”问题的。</p>\n<h3 id=\"21-哲学家吃饭\"><a href=\"#21-哲学家吃饭\" class=\"headerlink\" title=\"21.哲学家吃饭\"></a>21.哲学家吃饭</h3><h4 id=\"1-问题描述-4\"><a href=\"#1-问题描述-4\" class=\"headerlink\" title=\"1.问题描述\"></a>1.问题描述</h4><p>一张圆桌上坐着 5 名哲学家，每两个哲学家之间的桌上摆一根筷子，桌子的中间是一碗米饭。哲学家们倾注毕生的精力用于思考和进餐，哲学家在思考时，并不影响他人。只有当哲学家饥饿时，才试图拿起左、右两根筷子（一根一根地拿起)。如果筷子已在他人手上，则需等待。饥饿的哲学家只有同时拿起两根筷子才可以开始进餐，当进餐完毕后，放下筷子继续思考。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/360ff5d3aeb35f194be861f686519311.png\" alt=\"image-20210807134907136\"></p>\n<h4 id=\"2-问题分析-1\"><a href=\"#2-问题分析-1\" class=\"headerlink\" title=\"2.问题分析\"></a>2.问题分析</h4><p>1.关系分析。系统中有 5 个哲学家进程，5 位哲学家与左右邻居对其中间筷子的访问是互斥关系。</p>\n<p>2.整理思路。这个问题中只有互斥关系，但与之前遇到的问题不同的是，每个哲学家进程需要同时持有两个临界资源才能开始吃饭。如何避免临界资源分配不当造成的死锁现象，是哲学家问题的精髓。 3.信号量设置。定义互斥信号量数组 chopstick[5]&#x3D;{1,1,1,1,1}，用于实现对 5 个筷子的互斥访问。并对哲学家按 0~4 编号，哲学家 i 左边的筷子编号为 i，右边的筷子编号为(i+1)%5。</p>\n<h4 id=\"3-如何实现-1\"><a href=\"#3-如何实现-1\" class=\"headerlink\" title=\"3.如何实现\"></a>3.如何实现</h4><ul>\n<li>如果使用下图所示的方法，则会导致死锁问题。</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/725536caf67af3d7caa18e9ce79305be.png\" alt=\"image-20210807135145340\"></p>\n<ul>\n<li>那么如何解决呢？</li>\n</ul>\n<p>① 可以对哲学家进程施加一些限制条件，比如最多允许四个哲学家同时进餐。这样可以保证至少有一个哲学家是可以拿到左右两只筷子的</p>\n<p>② 要求奇数号哲学家先拿左边的筷子，然后再拿右边的筷子，而偶数号哲学家刚好相反。用这种方法可以保证如果相邻的两个奇偶号哲学家都想吃饭，那么只会有其中一个可以拿起第一只筷子，另一个会直接阻塞。这就避免了占有一支后再等待另一只的情况。</p>\n<p>③ 仅当一个哲学家左右两支筷子都可用时才允许他抓起筷子。</p>\n<p>下面用代码实现第三种方式。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/b0977fc37a695dcf08f2bb2ff1b77f9d.png\" alt=\"image-20210807135344301\"></p>\n<h3 id=\"22-管程\"><a href=\"#22-管程\" class=\"headerlink\" title=\"22.管程\"></a>22.管程</h3><h4 id=\"1-为什么引入管程？\"><a href=\"#1-为什么引入管程？\" class=\"headerlink\" title=\"1. 为什么引入管程？\"></a>1. 为什么引入管程？</h4><p>信号量机制存在的问题 : 编写程序困难、易出错。 因此人们想设计一种机制，让程序员写程序时不需要再关注复杂的 PV 操作，让写代码更轻松。1973 年，Brinch Hansen 首次在程序设计语言(Pascal)中引入了“管程”成分――一种高级同步机制。</p>\n<h4 id=\"2-管程的定义和基本特征\"><a href=\"#2-管程的定义和基本特征\" class=\"headerlink\" title=\"2.管程的定义和基本特征\"></a>2.管程的定义和基本特征</h4><p><strong>管程相当于对临界区资源进行抽象而编写的一个类。</strong></p>\n<p>管程是一种特殊的软件模块，有这些部分组成:</p>\n<p>1.局部于管程的共享数据结构说明; （一个类）</p>\n<p>2.对该数据结构进行操作的一组过程; （类中的方法）</p>\n<p>3．对局部于管程的共享数据设置初始值的语句; （类中的变量）</p>\n<p>4.管程有一个名字。 （类名）</p>\n<p>管程的基本特征:</p>\n<p>1．局部于管程的数据只能被局部于管程的过程所访问; （类中变量有自己的作用范围）</p>\n<p>**2.一个进程只有通过调用管程内的过程才能进入管程访问共享数据; ** <strong>这种互斥特性是由编译器来实现的。</strong></p>\n<p><strong>3．每次仅允许一个进程在管程内执行某个内部过程。</strong></p>\n<h4 id=\"3-java-中类似于管程的机制（单例模式）\"><a href=\"#3-java-中类似于管程的机制（单例模式）\" class=\"headerlink\" title=\"3.java 中类似于管程的机制（单例模式）\"></a>3.java 中类似于管程的机制（单例模式）</h4><p><img src=\"https://img-blog.csdnimg.cn/img_convert/ae7939e60bc5b80ee6ba3e825b5cba77.png\" alt=\"image-20210807141404776\"></p>\n<h3 id=\"23-死锁\"><a href=\"#23-死锁\" class=\"headerlink\" title=\"23.死锁\"></a>23.死锁</h3><h4 id=\"1-含义-1\"><a href=\"#1-含义-1\" class=\"headerlink\" title=\"1.含义\"></a>1.含义</h4><p>在并发环境下，各进程因竞争资源而造成的一种互相等待对方手里的资源，导致各进程都阻塞，都无法向前推进的现象，就是“死锁“。</p>\n<p>发生死锁后若无外力干涉,这些进程都将无法向前推进。</p>\n<h4 id=\"2-死锁，饥饿，死循环的区别\"><a href=\"#2-死锁，饥饿，死循环的区别\" class=\"headerlink\" title=\"2.死锁，饥饿，死循环的区别\"></a>2.死锁，饥饿，死循环的区别</h4><ul>\n<li>死锁:各进程互相等待对方手里的资源，导致各进程都阻塞，无法向前推进的现象。</li>\n<li>饥饿:由于长期得不到想要的资源，某进程无法向前推进的现象。比如:在短进程优先（SPF）算法中，若有源源不断的短进程到来，则长进程将一直得不到处理机，从而发生长进程“饥饿”。</li>\n<li>死循环:某进程执行过程中一直跳不出某个循环的现象。有时是因为程序逻辑 bug 导致的，有时是程序员故意设计的。</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/e6b26d2c084370559acda853d2d8c42e.png\" alt=\"image-20210807142049088\"></p>\n<h4 id=\"3-死锁产生的必要条件\"><a href=\"#3-死锁产生的必要条件\" class=\"headerlink\" title=\"3.死锁产生的必要条件\"></a>3.死锁产生的必要条件</h4><p>产生死锁必须同时满足一下四个条件，只要其中任一条件不成立，死锁就不会发生。</p>\n<ul>\n<li><p><strong>互斥条件</strong>:只有对必须互斥使用的资源的争抢才会导致死锁(如哲学家的筷子、打印机设备）。像内存、扬声器这样可以同时让多个进程使用的资源是不会导致死锁的(因为进程不用阻塞等待这种资源）。</p>\n</li>\n<li><p><strong>不剥夺条件</strong>:进程所获得的资源在未使用完之前，不能由其他进程强行夺走，只能主动释放。</p>\n</li>\n<li><p><strong>请求 和 保持条件</strong>:进程已经保持了至少一个资源，但又提出了新的资源请求，而该资源又被其他进程占有，此时请求进程被阻塞，但又对自己已有的资源保持不放。</p>\n</li>\n<li><p><strong>循环等待条件</strong>:存在一种进程资源的循环等待链，链中的每一个进程已获得的资源同时被下一个进程所请求。</p>\n</li>\n</ul>\n<p>注意 : 发生死锁时一定有循环等待 , 但是发生循环等待时未必死锁（<strong>循环等待是死锁的必要不充分条件</strong>)</p>\n<p>如果同类资源数大于 1，则即使有循环等待，也未必发生死锁。但如果系统中每类资源都只有一个，那循环等待就是死锁的充分必要条件了。</p>\n<h4 id=\"4-什么时候会发生死锁\"><a href=\"#4-什么时候会发生死锁\" class=\"headerlink\" title=\"4.什么时候会发生死锁\"></a>4.什么时候会发生死锁</h4><ol>\n<li><p><strong>对系统资源的竞争</strong>。各进程对不可剥夺的资源（如打印机）的竞争可能引起死锁，对可剥夺的资源(CPU)的竞争是不会引起死锁的</p>\n</li>\n<li><p><strong>进程推进顺序非法</strong>。请求和释放资源的顺序不当，也同样会导致死锁。例如，并发执行的进程 P1、P2 分别申请并占有了资源 R1、R2，之后进程 p1 又紧接着申请资源 R2，而进程 p2 又申请资源 R1,两者会因为申请的资源被对方占有而阻塞，从而发生死锁。</p>\n</li>\n<li><p><strong>信号量的使用不当也会造成死锁</strong>。如生产者-消费者问题中，如果实现互斥的 P 操作在实现同步的 P 操作之前，就有可能导致死锁。(可以把互斥信号量、同步信号量也看做是一种抽象的系统资源)</p>\n</li>\n</ol>\n<p>总之，对不可剥夺资源的不合理分配，可能导致死锁。</p>\n<h4 id=\"5-死锁的处理策略\"><a href=\"#5-死锁的处理策略\" class=\"headerlink\" title=\"5.死锁的处理策略\"></a>5.死锁的处理策略</h4><ol>\n<li>预防死锁。破坏死锁产生的四个必要条件中的一个或几个。</li>\n<li>避免死锁。用某种方法防止系统进入不安全状态，从而避免死锁（银行家算法)</li>\n<li>死锁的检测和解除。允许死锁的发生，不过操作系统会负责检测出死锁的发生，然后采取某种措施解除死锁。</li>\n</ol>\n<h3 id=\"24-预防死锁\"><a href=\"#24-预防死锁\" class=\"headerlink\" title=\"24.预防死锁\"></a>24.预防死锁</h3><p><img src=\"https://img-blog.csdnimg.cn/img_convert/fb6587d81b2b63eda36043138bb6f0ca.png\" alt=\"image-20210807144115187\"></p>\n<h3 id=\"25-避免死锁\"><a href=\"#25-避免死锁\" class=\"headerlink\" title=\"25.避免死锁\"></a>25.避免死锁</h3><h4 id=\"11-什么是安全序列\"><a href=\"#11-什么是安全序列\" class=\"headerlink\" title=\"11.什么是安全序列\"></a>11.什么是安全序列</h4><p><img src=\"https://img-blog.csdnimg.cn/img_convert/75e60e10c3364d0e57206bc73035417b.png\" alt=\"image-20210807145513416\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/38e23117bf18e59e503260594a952a93.png\" alt=\"image-20210807145554354\"></p>\n<ul>\n<li>所谓安全序列，就是指如果系统按照这种序列分配资源，则每个进程都能顺利完成。只要能找出一个安全序列，系统就是安全状态。当然，安全序列可能有多个。</li>\n<li>如果分配了资源之后，系统中找不出任何一个安全序列，系统就进入了不安全状态。这就意味着之后可能所有进程都无法顺利的执行下去。当然，如果有进程提前归还了一些资源，那系统也有可能重新回到安全状态，不过我们在分配资源之前总是要考虑到最坏的情况。</li>\n<li><strong>如果系统处于安全状态，就一定不会发生死锁。如果系统进入不安全状态，则可能会发生死锁。（不安全状态未必就是发生了死锁，但发生死锁时一定是在不安全状态)</strong></li>\n<li>因此可以在资源分配之前预先判断这次分配是否会导致系统进入不安全状态，以此决定是否答应资源分配请求。这也是“银行家算法”的核心思想。</li>\n</ul>\n<h4 id=\"2-银行家算法\"><a href=\"#2-银行家算法\" class=\"headerlink\" title=\"2.银行家算法\"></a>2.银行家算法</h4><p><strong>数据结构:</strong><br>长度为 m 的一维数组 Available 表示还有多少可用资源</p>\n<p>n<em>m 矩阵 Max 表示各进程对资源的最大需求数</em></p>\n<p><em>n</em>m 矩阵 Allocation 表示已经给各进程分配了多少资源</p>\n<p>Max - Allocation &#x3D; Need 矩阵表示各进程最多还需要多少资源</p>\n<p>用长度为 m 的一位数组 Request 表示进程此次申请的各种资源数</p>\n<p><strong>银行家算法步骤:</strong><br>① 检查此次申请是否超过了之前声明的最大需求数</p>\n<p>② 检查此时系统剩余的可用资源是否还能满足这次请求</p>\n<p>③ 试探着分配，更改各数据结构</p>\n<p>④ 用安全性算法检查此次分配是否会导致系统进入不安全状态</p>\n<p><strong>安全性算法步骤:</strong><br>检查当前的剩余可用资源是否能满足某个进程的最大需求，如果可以，就把该进程加入安全序列，并把该进程持有的资源全部回收。<br>不断重复上述过程，看最终是否能让所有进程都加入安全序列。</p>\n<h3 id=\"26-死锁的检测和解除\"><a href=\"#26-死锁的检测和解除\" class=\"headerlink\" title=\"26.死锁的检测和解除\"></a>26.死锁的检测和解除</h3><h4 id=\"1-死锁的检测\"><a href=\"#1-死锁的检测\" class=\"headerlink\" title=\"1.死锁的检测\"></a>1.死锁的检测</h4><p>为了能对系统是否已发生了死锁进行检测，必须:</p>\n<p>① 用某种数据结构来保存资源的请求和分配信息;<br>② 提供一种算法，利用上述信息来检测系统是否已进入死锁状态。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/97dc902bcb246554f9de99acb1fb6fe1.png\" alt=\"image-20210807151232864\"></p>\n<p>如果系统中剩余的可用资源数足够满足进程的需求，那么这个进程暂时是不会阻塞的，可以顺利地执行下去。如果这个进程执行结束了把资源归还系统，就可能使某些正在等待资源的进程被激活，并顺利地执行下去。相应的，这些被激活的进程执行完了之后又会归还一些资源，这样可能又会激活另外一些阻塞的进程.<br><strong>如果按上述过程分析，最终能消除所有边，就称这个图是可完全简化的。此时一定没有发生死锁（相当于能找到一个安全序列)。</strong><br>如果最终不能消除所有边，那么此时就是发生了死锁。</p>\n<p><strong>死锁定理:如果某时刻系统的资源分配图是不可完全简化的，那么此时系统死锁。</strong></p>\n<h4 id=\"2-死锁的解除\"><a href=\"#2-死锁的解除\" class=\"headerlink\" title=\"2.死锁的解除\"></a>2.死锁的解除</h4><p>一旦检测出死锁的发生，就应该立即解除死锁。<br>补充:并不是系统中所有的进程都是死锁状态，用死锁检测算法化简资源分配图后，还连着边的那些进程就是死锁进程<br>解除死锁的主要方法有 :</p>\n<ol>\n<li>资源剥夺法。挂起（暂时放到外存上）某些死锁进程，并抢占它的资源，将这些资源分配给其他的死锁进程。但是应防止被挂起的进程长时间得不到资源而饥饿。</li>\n<li>撤销进程法（或称终止进程法）。强制撤销部分、甚至全部死锁进程，并剥夺这些进程的资源。这种方式的优点是实现简单，但所付出的代价可能会很大。因为有些进程可能已经运行了很长时间，已经接近结束了，一旦被终止可谓功亏一篑，以后还得从头再来</li>\n<li>进程回退法。让一个或多个死锁进程回退到足以避免死锁的地步。这就要求系统要记录进程的历史信息，设置还原点。</li>\n</ol>\n<p>如何选择对哪些进程动手？</p>\n<ol>\n<li>进程优先级 (优先级低的)</li>\n<li>已执行多长时间 （执行时间短的）</li>\n<li>还要多久能完成 （时间长的进行处理）</li>\n<li>进程己经使用了多少资源 （资源多的）</li>\n<li>进程是交互式的还是批处理式的 （进行批处理的）</li>\n</ol>\n<h2 id=\"3-内存管理\"><a href=\"#3-内存管理\" class=\"headerlink\" title=\"3.内存管理\"></a>3.内存管理</h2><h3 id=\"1-基础知识\"><a href=\"#1-基础知识\" class=\"headerlink\" title=\"1.基础知识\"></a>1.基础知识</h3><p><strong>内存是用于存放数据的硬件。程序执行前需要先放到内存中才能被 CPU 处理。</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/5151089654a429d7ba63d56994a1ebba.png\" alt=\"image-20210807162229945\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>相对地址和绝对地址</p></blockquote>\n<p><strong>编译时产生的指令只关心“相对地址”，实际放入内存中时再想办法根据起始位置得到“绝对地址”。</strong><br>Eg: 编译时只需确定变量 x 存放的相对地址是 100（也就是说相对于进程在内存中的起始地址而言的地址）。CPU 想要找到 x 在内存中的实际存放位置，只需要用进程的起始地址+100 即可。</p>\n<p><strong>相对地址又称逻辑地址，绝对地址又称物理地址。</strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>写程序到程序运行</p></blockquote>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/d86f101e631d897b3ac517264e448198.png\" alt=\"image-20210807162523347\"></p>\n<h3 id=\"2-内存管理\"><a href=\"#2-内存管理\" class=\"headerlink\" title=\"2.内存管理\"></a>2.内存管理</h3><p>操作系统对内存进行管理，那么要管理哪些内容呢？</p>\n<ol>\n<li>内存空间的分配和回收</li>\n<li>操作系统需要提供某种技术从逻辑上对内存空间进行扩充。</li>\n<li>操作系统需要提供地址转换功能，负责程序的逻辑地址与物理地址的转换</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/07a609df0fdec29ab43654773e37b5ab.png\" alt=\"image-20210808144126553\"></p>\n<ol start=\"4\">\n<li>操作系统需要提供内存保护功能。保证各进程在各自存储空间内运行，互不干扰</li>\n</ol>\n<p>内存保护可采取两种方法:</p>\n<p>方法一:在 CPU 中设置一对上、下限寄存器，存放进程的上、下限地址。进程的指令要访问某个地址时，CPU 检查是否越界。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/52b901e6ea188a24f8baad9d72b8cdbe.png\" alt=\"image-20210808144249365\"></p>\n<p>方法二:采用重定位寄存器（又称基址寄存器）和界地址寄存器（又称限长寄存器）进行越界检查。重定位寄存器中存放的是进程的起始物理地址。界地址寄存器中存放的是进程的最大逻辑地址。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/fd5a139a2c073fd55e9da9b70e93c423.png\" alt=\"image-20210808144341286\"></p>\n<h3 id=\"3-覆盖和交换\"><a href=\"#3-覆盖和交换\" class=\"headerlink\" title=\"3.覆盖和交换\"></a>3.覆盖和交换</h3><p><img src=\"https://img-blog.csdnimg.cn/img_convert/8e4c90ff0a0fc6dc5be5db64e6627e22.png\" alt=\"image-20210808144501243\"></p>\n<h4 id=\"1-覆盖技术\"><a href=\"#1-覆盖技术\" class=\"headerlink\" title=\"1.覆盖技术\"></a>1.覆盖技术</h4><p>覆盖技术的思想 : <strong>将程序分为多个段（多个模块）</strong>。常用的段常驻内存，不常用的段在需要时调入内存。<br>内存中分为一个“固定区”和若干个“覆盖区”。需要常驻内存的段放在“固定区”中，调入后就不再调出（除非运行结束)不常用的段放在“覆盖区”，需要用到时调入内存，用不到时调出内存。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/edd42b2c38af07a4a6021b4527f0efc0.png\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/edd42b2c38af07a4a6021b4527f0efc0.png\" alt=\"image-20210808151012190\"></p>\n<p>必须由程序员声明覆盖结构，操作系统完成自动覆盖。<strong>缺点:对用户不透明，增加了用户编程负担。</strong>覆盖技术只用于早期的操作系统中，现在已成为历史。</p>\n<h4 id=\"2-交换技术\"><a href=\"#2-交换技术\" class=\"headerlink\" title=\"2.交换技术\"></a>2.交换技术</h4><p>交换（对换）技术的设计思想: <strong>内存空间紧张时，系统将内存中某些进程暂时换出外存，把外存中某些已具备运行条件的进程换入内存（进程在内存与磁盘间动态调度）</strong>。之前讲的中级调度（内存调度）就是为这个服务的。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/94f1d714b7b6c1f486a1d60150f5f4be.png\" alt=\"image-20210808151250246\"></p>\n<p>1.应该在外存（磁盘）的什么位置保存被换出的进程?</p>\n<p>具有对换功能的操作系统中，通常把<strong>磁盘空间分为文件区和对换区</strong>两部分。文件区主要用于存放文件，主要追求存储空间的利用率，因此对文件区空间的管理采用<strong>离散分配方式</strong>;对换区空间只占磁盘空间的小部分，<strong>被换出的进程数据就存放在对换区</strong>。由于对换的速度直接影响到系统的整体速度，因此对换区空间的管理主要追求换入换出速度，因此通常对换区采用<strong>连续分配</strong>方式（学过文件管理章节后即可理解）。总之，对换区的 I&#x2F;O 速度比文件区的更快。</p>\n<p>2.什么时候应该交换?</p>\n<p>交换通常在许多进程运行且内存吃紧时进行，而系统负荷降低就暂停。例如:在发现许多进程运行时经常发生缺页，就说明内存紧张，此时可以换出一些进程;如果缺页率明显下降，就可以暂停换出。</p>\n<p>3.应该换出哪些进程?</p>\n<p>可优先换出阻塞进程;可换出优先级低的进程;为了防止优先级低的进程在被调入内存后很快又被换出，有的系统还会考虑进程在内存的驻留时间…</p>\n<p><strong>(注意:PCB 会常驻内存，不会被换出外存)</strong></p>\n<h3 id=\"4-连续分配管理方式\"><a href=\"#4-连续分配管理方式\" class=\"headerlink\" title=\"4.连续分配管理方式\"></a>4.连续分配管理方式</h3><p>连续分配：指为用户进程分配的必须是一个连续的内存空间。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/b2c1dc99b722bace451d4df89c041ec3.png\" alt=\"image-20210808151616403\"></p>\n<h4 id=\"1-单一连续分配\"><a href=\"#1-单一连续分配\" class=\"headerlink\" title=\"1.单一连续分配\"></a>1.单一连续分配</h4><ul>\n<li>在单一连续分配方式中，内存被分为系统区和用户区。系统区通常位于内存的低地址部分，用于存放操作系统相关数据;用户区用于存放用户进程相关数据。</li>\n<li>内存中只能有一道用户程序，用户程序独占整个用户区空间。</li>\n<li>优点: 实现简单 ;无外部碎片;可以采用覆盖技术扩充内存;不一定需要采取内存保护（eg:早期的 PC 操作系统 MS-DOS)。</li>\n<li>缺点:只能用于单用户、单任务的操作系统中;有内部碎片;存储器利用率极低。</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/f37af84459a5776ef29988ba7e63b5ac.png\" alt=\"image-20210808153202643\"></p>\n<h4 id=\"2-固定分区分配\"><a href=\"#2-固定分区分配\" class=\"headerlink\" title=\"2.固定分区分配\"></a>2.固定分区分配</h4><p><img src=\"https://img-blog.csdnimg.cn/img_convert/a5549d30aa3ec597fe0f0770b441d046.png\" alt=\"image-20210808153255068\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/0b4097c2a3f3c66b33767dbf49546bfd.png\" alt=\"image-20210808153337606\"></p>\n<h4 id=\"3-动态分区分配\"><a href=\"#3-动态分区分配\" class=\"headerlink\" title=\"3.动态分区分配\"></a>3.动态分区分配</h4><p>动态分区分配又称为可变分区分配。<strong>这种分配方式不会预先划分内存分区，而是在进程装入内存时，根据进程的大小动态地建立分区，并使分区的大小正好适合进程的需要</strong>。因此系统分区的大小和数目是可变的。</p>\n<ul>\n<li>使用这种方式的话，我们需要考虑以下三个问题。</li>\n</ul>\n<ol>\n<li>系统要用什么样的数据结构记录内存的使用情况?</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/98605d272e0d2cc91de3982d9ca5a19f.png\" alt=\"image-20210808153616151\"></p>\n<ol start=\"2\">\n<li><p>当很多个空闲分区都能满足需求时,应该选择哪个分区进行分配?</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki Tokyo Night\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #a9b1d6\">使用动态分区算法，这个将在下一小节进行详细介绍。</span></span></code></pre></div></li>\n<li><p>如何进行分区的分配与回收操作?</p>\n</li>\n</ol>\n<ul>\n<li>如何分配 ———–&gt; 使用动态分区算法之后，修改数据结构即可。</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/f353febfbf73c2f3f8d924e9c1f96264.png\" alt=\"image-20210808153849729\"></p>\n<ul>\n<li>如何回收——————————-&gt; 牢记一点即可，会把相邻的空闲区域合并为一个。</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/19cf34972627d3769c9d5e80e61314e7.png\" alt=\"image-20210808154037814\"></p>\n<h4 id=\"4-内部碎片和外部碎片\"><a href=\"#4-内部碎片和外部碎片\" class=\"headerlink\" title=\"4.内部碎片和外部碎片\"></a>4.内部碎片和外部碎片</h4><ul>\n<li>动态分区分配没有内部碎片，但是有外部碎片。</li>\n<li><strong>内部碎片</strong>，分配给某进程的内存区域中，如果有些部分没有用上。</li>\n<li><strong>外部碎片</strong>，是指内存中的某些空闲分区由于太小而难以利用。</li>\n<li>如果内存中空闲空间的总和本来可以满足某进程的要求，但由于进程需要的是一整块连续的内存空间，因此这些<br>进程“碎片”不能满足进程的需求。可以通过<strong>紧凑</strong>（(拼凑，Compaction)技术来解决外部碎片。</li>\n</ul>\n<h3 id=\"5-动态分区分配算法\"><a href=\"#5-动态分区分配算法\" class=\"headerlink\" title=\"5.动态分区分配算法\"></a>5.动态分区分配算法</h3><p>动态分区分配算法:在动态分区分配方式中，当很多个空闲分区都能满足需求时，应该选择哪个分区进行分配?</p>\n<h4 id=\"1-首次适应算法\"><a href=\"#1-首次适应算法\" class=\"headerlink\" title=\"1.首次适应算法\"></a>1.首次适应算法</h4><p>算法思想: 每次都从低地址开始查找，<strong>找到第一个能满足大小的空闲分区</strong>。<br>如何实现:空闲分区以地址递增的次序排列。每次分配内存时顺序查找空闲分区链(或空闲分区表），找到大小能满足要求的第一个空闲分区。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/161691d8e26c7ff7f58def19ce5c6b53.png\" alt=\"image-20210808155515584\"></p>\n<h4 id=\"2-最佳适应算法\"><a href=\"#2-最佳适应算法\" class=\"headerlink\" title=\"2.最佳适应算法\"></a>2.最佳适应算法</h4><p>算法思想:由于动态分区分配是一种连续分配方式，为各进程分配的空间必须是连续的一整片区域。因此为了保证当“大进程”到来时能有连续的大片空间，可以尽可能多地留下大片的空闲区，即，<strong>优先使用更小的空闲区</strong>。<br>如何实现:空闲分区按容量递增次序链接。每次分配内存时顺序查找空闲分区链(或空闲分区表)，找到大小能满足要求的第一个空闲分区。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/5bf66568b85d6d72094ce1e9afd34555.png\" alt=\"image-20210808155644448\"></p>\n<h4 id=\"3-最大适应算法\"><a href=\"#3-最大适应算法\" class=\"headerlink\" title=\"3.最大适应算法\"></a>3.最大适应算法</h4><p>又称最坏适应算法(Largest Fit)<br>算法思想:为了解决最佳适应算法的问题――即留下太多难以利用的小碎片，可以在<strong>每次分配时优先使用最大的连续空闲区</strong>，这样分配后剩余的空闲区就不会太小，更方便使用。<br>如何实现:空闲分区按容量递减次序链接。每次分配内存时顺序查找空闲分区链(或空闲分区表），找到大小能满足要求的第一个空闲分区。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/77ea246fc29d148c012ae77b7eeb2c4a.png\" alt=\"image-20210808155801357\"></p>\n<h4 id=\"4-临近适应算法\"><a href=\"#4-临近适应算法\" class=\"headerlink\" title=\"4.临近适应算法\"></a>4.临近适应算法</h4><p>算法思想:首次适应算法每次都从链头开始查找的。这可能会导致低地址部分出现很多小的空闲分区，而每次分配查找时，都要经过这些分区，因此也增加了查找的开销。<strong>如果每次都从上次查找结束的位置开始检索，就能解决上述问题。</strong><br>如何实现:空闲分区以地址递增的顺序排列(可排成一个循环链表）。每次分配内存时从上次查找结束的位置开始查找空闲分区链（或空闲分区表），找到大小能满足要求的第一个空闲分区。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/54634cd9bc916ca1e4e19d2a61300f75.png\" alt=\"image-20210808160041410\"></p>\n<h4 id=\"5-四种算法对比\"><a href=\"#5-四种算法对比\" class=\"headerlink\" title=\"5.四种算法对比\"></a>5.四种算法对比</h4><p><img src=\"https://img-blog.csdnimg.cn/img_convert/0e9e2f352aaf86e9b6eb84e4b94fe62f.png\" alt=\"image-20210808160008902\"></p>\n<h3 id=\"6-基本分页存储管理\"><a href=\"#6-基本分页存储管理\" class=\"headerlink\" title=\"6.基本分页存储管理\"></a>6.基本分页存储管理</h3><p>连续分配:为用户进程分配的必须是一个连续的内存空间。</p>\n<p>非连续分配:为用户进程分配的可以是一些分散的内存空间。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/0f4e93675ac646001a63d9f6ce517c34.png\" alt=\"image-20210808163001835\"></p>\n<p><strong>基本分页存储管理的思想――把内存分为一个个相等的小分区,再按照分区大小把进程拆分成一个个小部分。</strong></p>\n<p>将内存空间分为一个个大小相等的分区（比如:每个分区 4KB），每个分区就是一个“页框”，或称“页帧”、“内存块”、“物理块”。每个页框有一个编号，即“页框号”(或者“内存块号”、“页帧号”、“物理块号”)页框号从 0 开始。</p>\n<p>将用户进程的地址空间也分为与页框大小相等的一个个区域，称为“页”或“页面”。每个页面也有一个编号，即“页号”，页号也是从 0 开始。<br>(注:进程的最后一个页面可能没有一个页框那么大。因此，页框不能太大，否则可能产生过大的内部碎片)</p>\n<p>操作系统以页框为单位为各个进程分配内存空间。进程的每个页面分别放入一个页框中。也就是说，进程的页面与内存的页框有一一对应的关系。</p>\n<p><strong>各个页面不必连续存放，也不必按先后顺序来，可以放到不相邻的各个页框中。</strong></p>\n<p>思考： 将进程地址空间分页之后，操作系统该如何实现逻辑地址到物理地址的转换?</p>\n<ol>\n<li>要算出逻辑地址对应的页号</li>\n<li>要知道该页号对应页面在内存中的起始地址</li>\n<li>要算出逻辑地址在页面内的“偏移量”</li>\n<li>物理地址 &#x3D; 页面始址＋页内偏移量</li>\n</ol>\n<p>如何计算:</p>\n<ol>\n<li>页号&#x3D;逻辑地址&#x2F;页面长度(取除法的整数部分)</li>\n<li>页内偏移量 &#x3D; 逻辑地址%页面长度（取除法的余数部分)</li>\n<li>页面在内存中的起始位置:操作系统需要用某种数据结构记录进程各个页面的起始位置。</li>\n</ol>\n<p>举例:</p>\n<p>页号&#x3D;80 &#x2F; 50&#x3D; 1<br>页内偏移量&#x3D;80 % 50 &#x3D; 30<br>1 号页在内存中存放的起始位置 450</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/af74511cebf32839b2cfd846e1b6da35.png\" alt=\"image-20210808163353323\"></p>\n<p>思考: 如何知道该页号对应页面在内存中的起始地址?</p>\n<p>操作系统为每一个进程创建一个页表?</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/87a39f7c9df30d864141b888e9d690f9.png\" alt=\"image-20210808163849055\"></p>\n<ul>\n<li>如何理解每个页表项的长度是相同的，页号是“隐含的”？</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/2f305a7358bd0ceef112786dfbcb948c.png\" alt=\"image-20210809132717571\"></p>\n<h3 id=\"7-基本地址变换机构\"><a href=\"#7-基本地址变换机构\" class=\"headerlink\" title=\"7.基本地址变换机构\"></a>7.基本地址变换机构</h3><p>基本地址变换机构可以<strong>借助进程的页表将逻辑地址转换为物理地址</strong>。<br>通常会在系统中设置一个页表寄存器(PTR），存放页表在内存中的起始地址 F 和页表长度 M。进程未执行时，页表的始址和页表长度放在进程控制块(PCB）中，当进程被调度时，操作系统内核会把它们放到页表寄存器中。</p>\n<ul>\n<li>执行流程</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/96dba8e1d26bfce90588d95fa3d67093.png\" alt=\"image-20210809132912720\"></p>\n<ul>\n<li>页表项长度，页表长度，页面大小</li>\n</ul>\n<p>页表长度是指这个页表中总共有几个页表项，即总共有多少页。页面大小是指一个页面占多大的存储空间。页表项长度是指每个页表项占多大的存储空间。</p>\n<p>通过下面这个例子来理解页表项长度。</p>\n<p>Eg:假设某系统物理内存大小为 4GB，页面大小为 4KB，内存总共会被分为 2^32&#x2F; 2^12&#x3D;2^20 个内存块，因此内存块号的范围应该是 0~2^20 - 1。因此至少要 20 个二进制位才能表示这么多的内存块号，因此至少要 3 个字节才够(每个字节 8 个二进制位，3 个字节共 24 个二进制位)。每个块号用三个字节来表示。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/a32ce137c88c5004cc868d3ec65a1d94.png\" alt=\"image-20210809133518059\"></p>\n<h3 id=\"8-具有快表的地址变换机构\"><a href=\"#8-具有快表的地址变换机构\" class=\"headerlink\" title=\"8.具有快表的地址变换机构\"></a>8.具有快表的地址变换机构</h3><h4 id=\"1-局部性原理\"><a href=\"#1-局部性原理\" class=\"headerlink\" title=\"1.局部性原理\"></a>1.局部性原理</h4><p><strong>时间局部性</strong>:如果执行了程序中的某条指令，那么不久后这条指令很有可能再次执行;如果某个数据被访问过，不久之后该数据很可能再次被访问。(因为程序中存在大量的循环)<br><strong>空间局部性</strong>:一旦程序访问了某个存储单元，在不久之后，其附近的存储单元也很有可能被访问。(因为很多数据在内存中都是连续存放的)</p>\n<p>上小节介绍的基本地址变换机构中，每次要访问一个逻辑地址，都需要查询内存中的页表。由于局部性原理，可能连续很多次查到的都是同一个页表项。既然如此，能否利用这个特性减少访问页表的次数呢?</p>\n<h4 id=\"2-快表\"><a href=\"#2-快表\" class=\"headerlink\" title=\"2.快表\"></a>2.快表</h4><p>快表，又称联想寄存器（TLB），是一种<strong>访问速度比内存快很多的高速缓冲存储器</strong>，用来存放当前访问的若干页表项，以加速地址变换的过程。与此对应，内存中的页表常称为慢表。</p>\n<ul>\n<li>执行流程</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/77ffe868216a19436cb741628724760a.png\" alt=\"image-20210809134807098\"></p>\n<h3 id=\"9-两级页表\"><a href=\"#9-两级页表\" class=\"headerlink\" title=\"9.两级页表\"></a>9.两级页表</h3><p>两级页表的出现主要是为了解决单级页表的问题。那么单级页表有什么问题呢？</p>\n<p>问题一:页表必须连续存放，因此当页表很大时，需要占用很多个连续的页框。<br>问题二:没有必要让整个页表常驻内存，因为进程在一段时间内可能只需要访问某几个特定的页面。</p>\n<h4 id=\"1-解决问题一\"><a href=\"#1-解决问题一\" class=\"headerlink\" title=\"1.解决问题一\"></a>1.解决问题一</h4><p>我们可以回想以下当初是如何解决进程必须连续的问题 ？</p>\n<p>我们可以把页表放在不同的页框中，再用一个表来记录各个各个子页表所在位置，我们把这个表叫做页目录表（外层页表，顶级页表）。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/ee7a1b90d78aeb48ba7df15070bc0625.png\" alt=\"image-20210809141121083\"></p>\n<h4 id=\"2-解决问题二\"><a href=\"#2-解决问题二\" class=\"headerlink\" title=\"2.解决问题二\"></a>2.解决问题二</h4><p><img src=\"https://img-blog.csdnimg.cn/img_convert/c1ac36edcad8ed9f6bdb1f9955966772.png\" alt=\"image-20210809141302977\"></p>\n<h4 id=\"3-其他细节\"><a href=\"#3-其他细节\" class=\"headerlink\" title=\"3. 其他细节\"></a>3. 其他细节</h4><ol>\n<li><p>若采用多级页表机制，则各级页表的大小不能超过一个页面</p>\n</li>\n<li><p>两级页表的访存次数分析（假设没有快表机构）</p>\n</li>\n</ol>\n<ul>\n<li>第一次访存:访问内存中的页目录表</li>\n<li>第二次访存:访问内存中的二级页表</li>\n<li>第三次访存:访问目标内存单元</li>\n</ul>\n<p>&#x3D;&#x3D;N 级页表访问一个逻辑地址需要 N+1 次访问内存。&#x3D;&#x3D;</p>\n<h3 id=\"10-基本分段存储管理方式\"><a href=\"#10-基本分段存储管理方式\" class=\"headerlink\" title=\"10.基本分段存储管理方式\"></a>10.基本分段存储管理方式</h3><h4 id=\"1-分段\"><a href=\"#1-分段\" class=\"headerlink\" title=\"1.分段\"></a>1.分段</h4><p>进程的地址空间:<strong>按照程序自身的逻辑关系划分为若干个段</strong>，每个段都有一个段名（在低级语言中，程序员使用段名来编程)，每段从 0 开始编址。<br>内存分配规则 : 以段为单位进行分配，每个段在内存中占据连续空间，但各段之间可以不相邻。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/0484baeb6ada8fd5aab483625ed40c94.png\" alt=\"image-20210809144740848\"></p>\n<ul>\n<li>分段系统的逻辑地址结构由段号（段名）和段内地址（段内偏移量）所组成。</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/8647b91e9abb594953a6263b67542d96.png\" alt=\"image-20210809144846609\"></p>\n<p><strong>段号的位数决定了每个进程最多可以分几个段。</strong></p>\n<p><strong>段内地址位数决定了每个段的最大长度是多少。</strong></p>\n<h4 id=\"2-段表\"><a href=\"#2-段表\" class=\"headerlink\" title=\"2.段表\"></a>2.段表</h4><p><img src=\"https://img-blog.csdnimg.cn/img_convert/e44ef24b52156fe644fc9d4dfeff3e15.png\" alt=\"image-20210809145109741\"></p>\n<h4 id=\"3-段内寻址\"><a href=\"#3-段内寻址\" class=\"headerlink\" title=\"3.段内寻址\"></a>3.段内寻址</h4><p><img src=\"https://img-blog.csdnimg.cn/img_convert/dcfc379fc1eec971565205809465ed3b.png\" alt=\"image-20210809145221546\"></p>\n<h4 id=\"4-分段，分页对比\"><a href=\"#4-分段，分页对比\" class=\"headerlink\" title=\"4.分段，分页对比\"></a>4.分段，分页对比</h4><ul>\n<li>页是信息的物理单位。分页的主要目的是为了实现离散分配，提高内存利用率。分页仅仅是系统管理上的需要，完全是系统行为，对用户是不可见的。</li>\n<li>段是信息的逻辑单位。分段的主要目的是更好地满足用户需求。一个段通常包含着一组属于一个逻辑模块的信息。分段对用户是可见的，用户编程时需要显式地给出段名。</li>\n<li>页的大小固定且由系统决定。段的长度却不固定，决定于用户编写的程序。</li>\n<li>分页的用户进程地址空间是一维的，程序员只需给出一个记忆符即可表示一个地址。</li>\n<li>分段的用户进程地址空间是二维的，程序员在标识一个地址时，既要给出段名，也要给出段内地址。</li>\n<li><strong>分段比分页更容易实现信息的共享和保护。</strong></li>\n</ul>\n<h3 id=\"11-段页式管理方式\"><a href=\"#11-段页式管理方式\" class=\"headerlink\" title=\"11.段页式管理方式\"></a>11.段页式管理方式</h3><h4 id=\"1-分页，分段的优缺点\"><a href=\"#1-分页，分段的优缺点\" class=\"headerlink\" title=\"1.分页，分段的优缺点\"></a>1.分页，分段的优缺点</h4><p><img src=\"https://img-blog.csdnimg.cn/img_convert/1313cc914e1a38bc5ae7292f2a376f7c.png\" alt=\"image-20210809150649428\"></p>\n<p>既然两者都有优缺点，那么可不可以把他们结合起来呢？答案当然是可以的。如下图所示。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/9b82b9db7d56adce8bb4be42d84b6859.png\" alt=\"image-20210809150813503\"></p>\n<h4 id=\"2-段页式管理的逻辑结构\"><a href=\"#2-段页式管理的逻辑结构\" class=\"headerlink\" title=\"2.段页式管理的逻辑结构\"></a>2.段页式管理的逻辑结构</h4><p><img src=\"https://img-blog.csdnimg.cn/img_convert/06426999bd3386b49cac332e1f3e2045.png\" alt=\"image-20210809150857246\"></p>\n<p>段号的位数决定了每个进程最多可以分几个段</p>\n<p>页号位数决定了每个段最大有多少页</p>\n<p>页内偏移量决定了页面大小、内存块大小是多少</p>\n<h4 id=\"3-段内寻址-1\"><a href=\"#3-段内寻址-1\" class=\"headerlink\" title=\"3.段内寻址\"></a>3.段内寻址</h4><p><img src=\"https://img-blog.csdnimg.cn/img_convert/4cd303aceff43ce2ffcaa393b091b9df.png\" alt=\"image-20210809151045913\"></p>\n<h3 id=\"12-虚拟内存\"><a href=\"#12-虚拟内存\" class=\"headerlink\" title=\"12.虚拟内存\"></a>12.虚拟内存</h3><h4 id=\"1-传统存储管理方式的特征和缺点\"><a href=\"#1-传统存储管理方式的特征和缺点\" class=\"headerlink\" title=\"1.传统存储管理方式的特征和缺点\"></a>1.传统存储管理方式的特征和缺点</h4><ul>\n<li>一次性:作业必须一次性全部装入内存后才能开始运行。这会造成两个问题:① 作业很大时，不能全部装入内存，导致大作业无法运行;② 当大量作业要求运行时，由于内存无法容纳所有作业，因此只有少量作业能运行，导致多道程序并发度下降。</li>\n<li>驻留性:一旦作业被装入内存，就会一直驻留在内存中，直至作业运行结束。事实上，在一个时间段内，只需要访问作业的一小部分数据即可正常运行，这就导致了内存中会驻留大量的、暂时用不到的数据，浪费了宝贵的内存资源。</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/4afc02ebeca0040c34574d75ecb93861.png\" alt=\"image-20210809152229610\"></p>\n<h4 id=\"2-虚拟内存的定义和特征\"><a href=\"#2-虚拟内存的定义和特征\" class=\"headerlink\" title=\"2.虚拟内存的定义和特征\"></a>2.虚拟内存的定义和特征</h4><ul>\n<li>基于局部性原理（忘记的话，可以到第 8 节查看），在程序装入时，可以将程序中很快会用到的部分装入内存，暂时用不到的部分留在外存，就可以让程序开始执行。</li>\n<li>在程序执行过程中，当所访问的信息不在内存时，由操作系统负责将所需信息从外存调入内存，然后继续执行程序。</li>\n<li>若内存空间不够，由操作系统负责将内存中暂时用不到的信息换出到外存。</li>\n<li>在操作系统的管理下，在用户看来似乎有一个比实际内存大得多的内存，这就是虚拟内存。</li>\n</ul>\n<p>易混知识点:</p>\n<p><strong>虚拟内存的最大容量是由计算机的地址结构（ CPU 寻址范围）确定的</strong></p>\n<p><strong>虚拟内存的实际容量&#x3D; min(内存和外存容量之和，CPU 寻址范围)</strong></p>\n<p>如: 某计算机地址结构为 32 位，按字节编址，内存大小为 512MB，外存大小为 2GB.</p>\n<p>则虚拟内存的最大容量为 2^32B&#x3D; 4GB 。 虚拟内存的实际容量&#x3D;min (2^32B,512MB+2GB)&#x3D; 2GB+512MB</p>\n<p>虚拟内存有一下三个主要特征:</p>\n<ul>\n<li>多次性:无需在作业运行时一次性全部装入内存，而是允许被分成多次调入内存。</li>\n<li>对换性:在作业运行时无需一直常驻内存，而是允许在作业运行过程中，将作业换入、换出。</li>\n<li>虚拟性:从逻辑上扩充了内存的容量，使用户看到的内存容量，远大于实际的容量。</li>\n</ul>\n<p><strong>虚拟内存的实现需要建立在离散分配的内存管理方式基础上。</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/b2797826b0323b52e4b1a07b1f89df7e.png\" alt=\"image-20210809153046973\"></p>\n<h3 id=\"13-请求分页管理方式\"><a href=\"#13-请求分页管理方式\" class=\"headerlink\" title=\"13.请求分页管理方式\"></a>13.请求分页管理方式</h3><h4 id=\"1-页表机制\"><a href=\"#1-页表机制\" class=\"headerlink\" title=\"1.页表机制\"></a>1.页表机制</h4><p>与基本分页管理相比，请求分页管理中，为了实现“请求调页”，</p>\n<ol>\n<li>操作系统需要知道每个页面是否已经调入内存;</li>\n<li>如果还没调入，那么也需要知道该页面在外存中存放的位置。</li>\n<li>当内存空间不够时，要实现“页面置换”，操作系统需要通过某些指标来决定到底换出哪个页面;</li>\n<li>有的页面没有被修改过，就不用再浪费时间写回外存。有的页面修改过，就需要将外存中的旧数据覆盖，因此，操作系统也需要记录各个页面是否被修改的信息。</li>\n</ol>\n<p>因此页表会增加四个字段来上面的信息。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/2ecf5884ab1959d0b5c090cc57629ab8.png\" alt=\"image-20210809154307694\"></p>\n<h4 id=\"2-缺页中断机制\"><a href=\"#2-缺页中断机制\" class=\"headerlink\" title=\"2.缺页中断机制\"></a>2.缺页中断机制</h4><p>假设此时要访问逻辑地址 &#x3D; (页号，页内偏移量）&#x3D; (0，1024)</p>\n<p>在请求分页系统中，每当要访问的页面不在内存时，便产生一个缺页中断，然后由操作系统的缺页中断处理程序处理中断。</p>\n<p>此时缺页的进程阻塞，放入阻塞队列，调页完成后再将其唤醒，放回就绪队列。</p>\n<p>如果内存中有空闲块，则为进程分配一个空闲块，将所缺页面装入该块，并修改页表中相应的页表项。</p>\n<p>如果内存中没有空闲块，则由页面置换算法选择一个页面淘汰，若该页面在内存期间被修改过，则要将其写回外存。未修改过的页面不用写回外存。</p>\n<p>缺页中断是因为当前执行的指令想要访问的目标页面未调入内存而产生的，因此属于内中断</p>\n<p>一条指令在执行期间，可能产生多次缺页中断。(如: copy AtoB，即将逻辑地址 A 中的数据复制到逻辑地址 B，而 A、B 属于不同的页面，则有可能产生两次中断)</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/0a2f46ccc0da552d63b2dcdac3745099.png\" alt=\"image-20210809154630244\"></p>\n<h4 id=\"3-地址变换\"><a href=\"#3-地址变换\" class=\"headerlink\" title=\"3.地址变换\"></a>3.地址变换</h4><p><img src=\"https://img-blog.csdnimg.cn/img_convert/9920dd67a33a7aefb18540e58e8042c8.png\" alt=\"image-20210809154720385\"></p>\n<h4 id=\"4-补充知识点\"><a href=\"#4-补充知识点\" class=\"headerlink\" title=\"4.补充知识点\"></a>4.补充知识点</h4><p>① 只有“写指令”才需要修改“修改位”。并且，一般来说只需修改快表中的数据，只有要将快表项删除时才需要写回内存中的慢表。这样可以减少访存次数。</p>\n<p>② 和普通的中断处理一样，缺页中断处理依然需要保留 CPU 现场。</p>\n<p>③ 需要用某种“页面置换算法”来决定一个换出页面（下节内容)</p>\n<p>④ 换入&#x2F;换出页面都需要启动慢速的 I&#x2F;o 操作，可见，如果换入&#x2F;换出太频繁，会有很大的开销。</p>\n<p>⑤ 页面调入内存后，需要修改慢表，同时也需要将表项复制到快表中。</p>\n<h3 id=\"14-页面置换算法\"><a href=\"#14-页面置换算法\" class=\"headerlink\" title=\"14.页面置换算法\"></a>14.页面置换算法</h3><h4 id=\"1-最佳置换算法\"><a href=\"#1-最佳置换算法\" class=\"headerlink\" title=\"1.最佳置换算法\"></a>1.最佳置换算法</h4><p>最佳置换算法（OPT，Optimal):每次选择淘汰的页面将是以后永不使用，或者在最长时间内不再被访问的页面，这样可以保证最低的缺页率。</p>\n<p>最佳置换算法可以保证最低的缺页率，但实际上，只有在进程执行的过程中才能知道接下来会访问到的是哪个页面。操作系统无法提前预判页面访问序列。因此，<strong>最佳置换算法是无法实现的</strong>。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/20243797dc9f1c3bf67a6e1a8bee2721.png\" alt=\"image-20210809161659809\"></p>\n<h4 id=\"2-先进先出置换算法\"><a href=\"#2-先进先出置换算法\" class=\"headerlink\" title=\"2.先进先出置换算法\"></a>2.先进先出置换算法</h4><p>先进先出置换算法（FIFO):每次选择淘汰的页面是最早进入内存的页面</p>\n<p>实现方法:把调入内存的页面根据调入的先后顺序排成一个队列，需要换出页面时选择队头页面即可。队列的最大长度取决于系统为进程分配了多少个内存块。</p>\n<p>Belady 异常―一当为进程分配的物理块数增大时，缺页次数不减反增的异常现象。</p>\n<p><strong>只有 FIFO 算法会产生 Belady 异常</strong>。另外，FIFO 算法虽然实现简单，但是该算法与进程实际运行时的规律不适应，因为先进入的页面也有可能最经常被访问。因此，<strong>算法性能差。</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/ddec656e73421061245bddb66da4550c.png\" alt=\"image-20210809161847953\"></p>\n<h4 id=\"3-最近最久未使用算法\"><a href=\"#3-最近最久未使用算法\" class=\"headerlink\" title=\"3.最近最久未使用算法\"></a>3.最近最久未使用算法</h4><p>最近最久未使用置换算法（LRU，least recently used):每次淘汰的页面是最近最久未使用的页面。</p>\n<p>实现方法:赋予每个页面对应的页表项中，用访问字段记录该页面自上次被访问以来所经历的时间 t。当需要淘汰一个页面时，选择现有页面中 t 值最大的，即最近最久未使用的页面。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/dd607f957cd695304dc9422d84d5c66d.png\" alt=\"image-20210809162117351\"></p>\n<h4 id=\"4-时钟置换算法\"><a href=\"#4-时钟置换算法\" class=\"headerlink\" title=\"4.时钟置换算法\"></a>4.时钟置换算法</h4><p>最佳置换算法性能最好，但无法实现;先进先出置换算法实现简单，但算法性能差;最近最久未使用置换算法性能好，是最接近 OPT 算法性能的，但是实现起来需要专门的硬件支持，算法开销大。</p>\n<p>时钟置换算法是一种性能和开销较均衡的算法，又称 CLOCK 算法，或最近未用算法(NRU，NotRecently Used)</p>\n<p>简单的 CLOCK 算法实现方法:为每个页面设置一个访问位，再将内存中的页面都通过链接指针链接成一个循环队列。当某页被访问时，其访问位置为 1。当需要淘汰一个页面时，只需检查页的访问位。如果是 0，就选择该页换出;如果是 1，则将它置为 0，暂不换出，继续检查下一个页面，若第一轮扫描中所有页面都是 1，则将这些页面的访问位依次置为 0 后，再进行第二轮扫描（第二轮扫描中一定会有访问位为 0 的页面，<strong>因此简单的 CLOCK 算法选择一个淘汰页面最多会经过两轮扫描)</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/0c6a83cab0e240d3ae2ea189b149f868.png\" alt=\"image-20210809162337421\"></p>\n<h4 id=\"5-改进型的时钟置换算法\"><a href=\"#5-改进型的时钟置换算法\" class=\"headerlink\" title=\"5.改进型的时钟置换算法\"></a>5.改进型的时钟置换算法</h4><p>简单的时钟置换算法仅考虑到一个页面最近是否被访问过。事实上，如果被淘汰的页面没有被修改过，就不需要执行 I&#x2F;o 操作写回外存。只有被淘汰的页面被修改过时，才需要写回外存。<br>因此，除了考虑一个页面最近有没有被访问过之外，操作系统还应考虑页面有没有被修改过。在其他条件都相同时，应优先淘汰没有修改过的页面，避免 I&#x2F;o 操作。这就是改进型的时钟置换算法的思想。修改位&#x3D;0，表示页面没有被修改过;修改位&#x3D;1，表示页面被修改过。<br>为方便讨论，用（访问位，修改位）的形式表示各页面状态。如（1，1)表示一个页面近期被访问过，且被修改过。</p>\n<p>算法规则: 将所有可能被置换的页面排成一个循环队列<br>第一轮:从当前位置开始扫描到第一个（0，0）的帧用于替换。本轮扫描不修改任何标志位<br>第二轮:若第一轮扫描失败，则重新扫描，查找第一个（0，1）的帧用于替换。本轮将所有扫描过的帧访问位设为 0<br>第三轮:若第二轮扫描失败，则重新扫描，查找第一个(0，0）的帧用于替换。本轮扫描不修改任何标志位<br>第四轮:若第三轮扫描失败，则重新扫描，查找第一个（0，1）的帧用于替换。<br>由于第二轮已将所有帧的访问位设为 0，因此经过第三轮、第四轮扫描一定会有一个帧被选中，因此<strong>改进型 CLOCK 置换算法选择一个淘汰页面最多会进行四轮扫描</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/a601016bafd5e28fad0c3a920ef8f618.png\" alt=\"image-20210809162555604\"></p>\n<h4 id=\"6-五种算法对比\"><a href=\"#6-五种算法对比\" class=\"headerlink\" title=\"6.五种算法对比\"></a>6.五种算法对比</h4><p><img src=\"https://img-blog.csdnimg.cn/img_convert/10cf20937acd90e5e521376e1f7a15ac.png\" alt=\"image-20210809162647669\"></p>\n<h3 id=\"15-页面分配策略\"><a href=\"#15-页面分配策略\" class=\"headerlink\" title=\"15.页面分配策略\"></a>15.页面分配策略</h3><h4 id=\"1-页面分配，置换策略\"><a href=\"#1-页面分配，置换策略\" class=\"headerlink\" title=\"1.页面分配，置换策略\"></a>1.页面分配，置换策略</h4><p><strong>驻留集:指请求分页存储管理中给进程分配的物理块的集合。</strong></p>\n<p>在采用了虚拟存储技术的系统中，驻留集大小一般小于进程的总大小。</p>\n<p>若驻留集太小，会导致缺页频繁，系统要花大量的时间来处理缺页，实际上用于进程推进的时间很少。</p>\n<p>驻留集太大，又会导致多道程序并发度下降，资源利用率降低。所以应该选择一个合适的驻留集大小。</p>\n<p>固定分配:操作系统为每个进程分配一组固定数目的物理块，在进程运行期间大小不变。即，<strong>驻留集大小不变。</strong></p>\n<p>可变分配:先为每个进程分配一定数目的物理块，在进程运行期间，可根据情况做适当的增加或减少。即，<strong>驻留集大小可变</strong></p>\n<p>局部置换:发生缺页时只能选进程自己的物理块进行置换。</p>\n<p>全局置换:可以将操作系统保留的空闲物理块分配给缺页进程，也可以将别的进程持有的物理块置换到外存，再分配给缺页进程。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/47b2b1f4af5a606cd9c2a947270d322b.png\" alt=\"image-20210809164303593\"></p>\n<p>下面来分别介绍这几种方式。</p>\n<ul>\n<li><p>固定分配局部置换:系统为每个进程分配一定数量的物理块，在整个运行期间都不改变。若进程在运行中发生缺页，则只能从该进程在内存中的页面中选出一页换出，然后再调入需要的页面。这种策略的缺点是:很难在刚开始就确定应为每个进程分配多少个物理块才算合理。(采用这种策略的系统可以根据进程大小、优先级、或是根据程序员给出的参数来确定为一个进程分配的内存块数)</p>\n</li>\n<li><p>可变分配全局置换:刚开始会为每个进程分配一定数量的物理块。操作系统会保持一个空闲物理块队列。当某进程发生缺页时，从空闲物理块中取出一块分配给该进程;若已无空闲物理块，则可选择一个未锁定的页面换出外存，再将该物理块分配给缺页的进程。采用这种策略时，只要某进程发生缺页都将获的物理块，仅当空闲物理块用完时，系统才选择一个未锁定的页面调出。被选择调出的页可能是进程中任意一个进程的页，因此被选中的这个进程物理块会减少，缺页率会增加。</p>\n</li>\n<li><p>可变分配局部置换： 刚开始会为每个进程分配一定数量的物理块，当某进程发生缺页时，只允许从该进程自己的物理块中选出一个换出外存。如果进程在运行中频繁地缺页，系统会为该进程多分配几个物理块，直至该进程缺页率趋势适当，反之，如果进程在运行中缺页率特别低，则可适当减少分配给该进程的物理块。</p>\n</li>\n</ul>\n<p>可变分配全局置换:只要缺页就给分配新物理块<br>可变分配局部置换:要根据发生缺页的频率来动态地增加或减少进程的物理块</p>\n<h4 id=\"2-何时调入页面\"><a href=\"#2-何时调入页面\" class=\"headerlink\" title=\"2.何时调入页面\"></a>2.何时调入页面</h4><p>1．预调页策略:根据局部性原理（主要是空间局部性），一次调入若干个相邻的页面可能比一次调入一个页面更高效。但如果提前调入的页面中大多数都没被访问过，则又是低效的。因此可以预测不久之后可能访问到的页面，将它们预先调入内存，但目前预测成功率只有 50%左右。故这种策略主要用于进程的首次调入，由程序员指出应该先调入哪些部分。<strong>它是运行前调入</strong>。</p>\n<p>2．请求调页策略:进程在运行期间发现缺页时才将所缺页面调入内存。由这种策略调入的页面一定会被访问到，但由于每次只能调入一页，而每次调页都要磁盘 l&#x2F;o 操作，因此 I&#x2F;o 开销较大。<strong>它是运行时调入</strong>。</p>\n<h4 id=\"3-从何处调入页面\"><a href=\"#3-从何处调入页面\" class=\"headerlink\" title=\"3.从何处调入页面\"></a>3.从何处调入页面</h4><ol>\n<li>系统拥有足够的对换区空间:页面的调入、调出都是在内存与对换区之间进行，这样可以保证页面的调入、调出速度很快。在进程运行前，需将进程相关的数据从文件区复制到对换区。</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/d57fdf9f7db93b3ae3790b3846367b29.png\" alt=\"image-20210809165455533\"></p>\n<ol start=\"2\">\n<li>系统缺少足够的对换区空间:凡是不会被修改的数据都直接从文件区调入，由于这些页面不会被修改，因此换出时不必写回磁盘，下次需要时再从文件区调入即可。对于可能被修改的部分，换出时需写回磁盘对换区，下次需要时再从对换区调入。</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/ce0ac4f20a08b61518dbcc45b78b7599.png\" alt=\"image-20210809165517173\"></p>\n<ol start=\"3\">\n<li>UNIX 方式:运行之前进程有关的数据全部放在文件区，故未使用过的页面，都可从文件区调入。若被使用过的页面需要换出，则写回对换区，下次需要时从对换区调入。</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/99bf3270b91f33c4f070cf24d6da60ff.png\" alt=\"image-20210809165535864\"></p>\n<h4 id=\"4-抖动（颠簸）现象，工作集\"><a href=\"#4-抖动（颠簸）现象，工作集\" class=\"headerlink\" title=\"4.抖动（颠簸）现象，工作集\"></a>4.抖动（颠簸）现象，工作集</h4><p>刚刚换出的页面马上又要换入内存，刚刚换入的页面马上又要换出外存，这种频繁的页面调度行为称为抖动，或颠簸。<strong>产生抖动的主要原因是进程频繁访问的页面数目高于可用的物理块数</strong>（分配给进程的物理块不够)。</p>\n<p>为进程分配的物理块太少，会使进程发生抖动现象。为进程分配的物理块太多，又会降低系统整体的并发度，降低某些资源的利用率</p>\n<p>为了研究为应该为每个进程分配多少个物理块，Denning 提出了进程“工作集”的概念。</p>\n<p>驻留集:指请求分页存储管理中给进程分配的内存块的集合。</p>\n<p><strong>工作集:指在某段时间间隔里，进程实际访问页面的集合。</strong></p>\n<p>一般来说，驻留集大小不能小于工作集大小，否则进程运行过程中将频繁缺页。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/9b2abc20a7a0141d0bfab172b93782d5.png\" alt=\"image-20210809165818657\"></p>\n<h2 id=\"4-文件系统\"><a href=\"#4-文件系统\" class=\"headerlink\" title=\"4.文件系统\"></a>4.文件系统</h2><h3 id=\"1-文件管理\"><a href=\"#1-文件管理\" class=\"headerlink\" title=\"1.文件管理\"></a>1.文件管理</h3><ul>\n<li><p>文件――就是一组有意义的信息&#x2F;数据集合。</p>\n</li>\n<li><p>一个文件有哪些属性？</p>\n<ol>\n<li>文件名:由创建文件的用户决定文件名，主要是为了方便用户找到文件，同一目录下不允许有重名文件。</li>\n<li>标识符:一个系统内的各文件标识符唯一，对用户来说毫无可读性，因此标识符只是操作系统用于区分各个文件的一种内部名称。</li>\n<li>类型:指明文件的类型</li>\n<li>位置:文件存放的路径（让用户使用)、在外存中的地址(操作系统使用，对用户不可见)</li>\n<li>大小:指明文件大小创建时间、上次修改时间文件所有者信息</li>\n<li>保护信息:对文件进行保护的访问控制信息</li>\n</ol>\n</li>\n<li><p>文件分为有结构文件和无结构文件。</p>\n</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/5c0ebd6dd5cacb9801719b98bcf70850.png\" alt=\"image-20210810142605554\"></p>\n<ul>\n<li>操作系统向上（用户和应用程序）提供的功能</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/914c3a4bb38a17995adb6db607593dcd.png\" alt=\"image-20210810142721956\"></p>\n<h3 id=\"2-文件的逻辑结构\"><a href=\"#2-文件的逻辑结构\" class=\"headerlink\" title=\"2.文件的逻辑结构\"></a>2.文件的逻辑结构</h3><p><img src=\"https://img-blog.csdnimg.cn/img_convert/348809239c946d13944d59f2339305ce.png\" alt=\"image-20210810144248520\"></p>\n<p>按文件是否有结构分类，可以分为无结构文件、有结构文件两种。</p>\n<p>无结构文件:文件内部的数据就是一系列二进制流或字符流组成。又称“流式文件”。如:Windows 操作系统中的.txt 文件。</p>\n<p>有结构文件:由一组相似的记录组成，又称“记录式文件”。每条记录又若干个数据项组成。如:数据库表文件。一般来说，每条记录有一个数据项可作为关键字（作为识别不同记录的 ID)</p>\n<p>我们主要研究有结构文件。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/0b19abd7adcc698dbcaa240c5905f272.png\" alt=\"image-20210810144515415\"></p>\n<h4 id=\"1-顺序文件\"><a href=\"#1-顺序文件\" class=\"headerlink\" title=\"1.顺序文件\"></a>1.顺序文件</h4><p>顺序文件:文件中的记录一个接一个地顺序排列（逻辑上），记录可以是定长的或可变长的。各个记录在物理上可以顺序存储（相当于数组）或链式存储（相当于链表）。</p>\n<p>顺序存储又可以分为串结构和顺序结构。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/442c25a2230e519a015eb644375e3c77.png\" alt=\"image-20210810144803262\"></p>\n<p>那么这几种存储方式可以快速找到第 i 个记录对应的地址呢？</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/8e34230949612ec31dbfbe27be7e6ba5.png\" alt=\"image-20210810145032903\"></p>\n<p>结论:定长记录的顺序文件，若物理上采用顺序存储，则可实现随机存取;若能再保证记录的顺序结构，则可实现快速检索(即根据关键字快速找到对应记录)</p>\n<h4 id=\"2-索引文件\"><a href=\"#2-索引文件\" class=\"headerlink\" title=\"2.索引文件\"></a>2.索引文件</h4><p>思考：对于可变长记录文件，要找到第 i 个记录，必须先顺序第查找前 i-1 个记录,但是很多应用场景中又必须使用可变长记录。如何解决这个问题?</p>\n<p>这时我们可以建立一张索引表来快速找到第 i 个记录。如图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/0ed08cb468263930fb8ce29d870f9d1a.png\" alt=\"image-20210810145421034\"></p>\n<p><strong>索引表本身是定长记录的顺序文件。</strong>因此可以快速找到第 i 个记录对应的索引项。</p>\n<p>可将关键字作为索引号内容，若按关键字顺序排列，则还可以支持按照关键字折半查找。</p>\n<p>每当要增加&#x2F;删除一个记录时，需要对索引表进行修改。由于索引文件有很快的检索速度，因此主要用于对信息处理的及时性要求比较高的场合。</p>\n<p>另外，可以用不同的数据项建立多个索引表。如:学生信息表中，可用关键字“学号”建立一张索引表。也可用“姓名”建立一张索引表。这样就可以根据“姓名”快速地检索文件了。(Eg: SQL 就支持根据某个数据项建立索引的功能)</p>\n<h4 id=\"3-索引顺序文件\"><a href=\"#3-索引顺序文件\" class=\"headerlink\" title=\"3.索引顺序文件\"></a>3.索引顺序文件</h4><p>思考索引文件的缺点:每个记录对应一个索引表项，因此索引表可能会很大。比如:文件的每个记录平均只占 8 字节，而每个索引表项占 32 个字节，那么索引表都要比文件内容本身大 4 倍，这样对存储空间的利用率就太低了。</p>\n<p>那么如何解决呢？</p>\n<p>我们可以建立一个索引顺序文件。</p>\n<p>索引顺序文件是索引文件和顺序文件思想的结合。索引顺序文件中，同样会为文件建立一张索引表，但不同的是:<strong>并不是每个记录对应一个索引表项，而是一组记录对应一个索引表项。</strong></p>\n<p>在本例中，学生记录按照学生姓名的开头字母进行分组。每个分组就是一个顺序文件，分组内的记录不需要按关键字排序。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/1f6bc1e1774b9f5c4387ef54e3b6983f.png\" alt=\"image-20210810145653881\"></p>\n<h4 id=\"4-多级索引顺序文件\"><a href=\"#4-多级索引顺序文件\" class=\"headerlink\" title=\"4.多级索引顺序文件\"></a>4.多级索引顺序文件</h4><p>为了进一步提高检索效率，可以为顺序文件建立多级索引表。</p>\n<p>例如，对于一个含 10^6 个记录的文件，可先为该文件建立一张低级索引表，每 100 个记录为一组，故低级索引表中共有 10000 个表项(即 10000 个定长记录)，再把这 10000 个定长记录分组，每组 100 个，为其建立顶级索引表，故顶级索引表中共有 100 个表项。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/c57391f7d0fd8cb6fe66d30df8060bdd.png\" alt=\"image-20210810145950405\"></p>\n<h3 id=\"3-文件目录\"><a href=\"#3-文件目录\" class=\"headerlink\" title=\"3.文件目录\"></a>3.文件目录</h3><p><img src=\"https://img-blog.csdnimg.cn/img_convert/53120cd1e8d7e5ffa75a3785d838aad7.png\" alt=\"image-20210810151340203\"></p>\n<ul>\n<li>目录本身就是一种有结构文件，由一条条记录组成。每条记录对应一个在该放在该目录下的文件。如图所示</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/455ae681993634c26745abb4a5ef3877.png\" alt=\"image-20210810151448625\"></p>\n<h4 id=\"1-文件控制块（FCB）\"><a href=\"#1-文件控制块（FCB）\" class=\"headerlink\" title=\"1.文件控制块（FCB）\"></a>1.文件控制块（FCB）</h4><ul>\n<li>目录文件中的一条记录就是一个“文件控制块（FCB)</li>\n</ul>\n<p>FCB 的有序集合称为“文件目录”，一个 FCB 就是一个文件目录项。</p>\n<p>FCB 中包含了文件的基本信息（文件名、物理地址、逻辑结构、物理结构等），存取控制信息（是否可读&#x2F;可写、禁止访问的用户名单等)，使用信息（如文件的建立时间、修改时间等）。</p>\n<p>最重要，最基本的还是文件名、文件存放的物理地址。</p>\n<h4 id=\"2-单级目录结构\"><a href=\"#2-单级目录结构\" class=\"headerlink\" title=\"2.单级目录结构\"></a>2.单级目录结构</h4><p><img src=\"https://img-blog.csdnimg.cn/img_convert/6916bba80959bfb9bd318ea0fae93071.png\" alt=\"image-20210810151856934\"></p>\n<h4 id=\"3-二级目录结构\"><a href=\"#3-二级目录结构\" class=\"headerlink\" title=\"3.二级目录结构\"></a>3.二级目录结构</h4><p><img src=\"https://img-blog.csdnimg.cn/img_convert/24461e7a115feda74dfd5a328857af71.png\" alt=\"image-20210810151925508\"></p>\n<h4 id=\"4-多级目录结构（树形目录结构）\"><a href=\"#4-多级目录结构（树形目录结构）\" class=\"headerlink\" title=\"4.多级目录结构（树形目录结构）\"></a>4.多级目录结构（树形目录结构）</h4><p><img src=\"https://img-blog.csdnimg.cn/img_convert/09b5390d37938510db4ce5d774398940.png\" alt=\"image-20210810152024749\"></p>\n<p>树形目录结构可以很方便地对文件进行分类，层次结构清晰，也能够更有效地进行文件的管理和保护。但是，树形结构不便于实现文件的共享。为此，提出了“无环图目录结构”。</p>\n<h4 id=\"5-无环图目录结构\"><a href=\"#5-无环图目录结构\" class=\"headerlink\" title=\"5.无环图目录结构\"></a>5.无环图目录结构</h4><p><img src=\"https://img-blog.csdnimg.cn/img_convert/6460c75fa54a21687994959945c75e6d.png\" alt=\"image-20210810152149951\"></p>\n<p>可以用不同的文件名指向同一个文件，甚至可以指向同一个目录(共享同一目录下的所有内容）。</p>\n<p>需要为每个共享结点设置一个共享计数器，用于记录此时有多少个地方在共享该结点。用户提出删除结点的请求时，只是删除该用户的 FCB、并使共享计数器减 1，并不会直接删除共享结点。</p>\n<p>只有共享计数器减为 0 时，才删除结点。</p>\n<p>注意:共享文件不同于复制文件。在共享文件中，由于各用户指向的是同一个文件，因此只要其中一个用户修改了文件数据，那么所有用户都可以看到文件数据的变化。</p>\n<h4 id=\"6-索引结点（对-FCB-的改进）\"><a href=\"#6-索引结点（对-FCB-的改进）\" class=\"headerlink\" title=\"6.索引结点（对 FCB 的改进）\"></a>6.索引结点（对 FCB 的改进）</h4><p><img src=\"https://img-blog.csdnimg.cn/img_convert/c37cb7773063eb6a3e639f5106d9734b.png\" alt=\"image-20210810152356089\"></p>\n<p>当找到文件名对应的目录项时，才需要将索引结点调入内存，索引结点中记录了文件的各种信息，包括文件在外存中的存放位置，根据“存放位置”即可找到文件。</p>\n<p>存放在外存中的索引结点称为“磁盘索引结点”，当索引结点放入内存后称为“内存索引结点”。相比之下内存索引结点中需要增加一些信息，比如:文件是否被修改、此时有几个进程正在访问该文件等。</p>\n<h3 id=\"4-文件分配方式（文件物理结构）\"><a href=\"#4-文件分配方式（文件物理结构）\" class=\"headerlink\" title=\"4.文件分配方式（文件物理结构）\"></a>4.文件分配方式（文件物理结构）</h3><p><img src=\"https://img-blog.csdnimg.cn/img_convert/254ba278ff55f9d078c5833f2d19e1ed.png\" alt=\"image-20210810160612269\"></p>\n<p>在介绍这些分配方式之前，先介绍一下什么是文件块，磁盘块。</p>\n<p>在内存管理中，进程的逻辑地址空间被分为一个一个页面。</p>\n<p>同样的，在外存管理中，为了方便对文件数据的管理，文件的逻辑地址空间也被分为了一个一个的文件“块”。</p>\n<p>于是文件的逻辑地址也可以表示为（逻辑块号，块内地址）的形式。</p>\n<p><strong>用户通过逻辑地址来操作自己的文件，操作系统要负责实现从逻辑地址到物理地址的映射。</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/2e337392fe6b347faf9b8c052b6f8203.png\" alt=\"image-20210810160801866\"></p>\n<h4 id=\"1-连续分配\"><a href=\"#1-连续分配\" class=\"headerlink\" title=\"1.连续分配\"></a>1.连续分配</h4><p><strong>连续分配方式要求每个文件在磁盘上占有一组连续的块。</strong>如图所示</p>\n<p>用户给出要访问的逻辑块号，操作系统找到该文件对应的目录项（FCB)</p>\n<p><strong>物理块号&#x3D;起始块号＋逻辑块号</strong></p>\n<p>当然，还需要检查用户提供的逻辑块号是否合法（逻辑块号 ≥ 长度就不合法)、</p>\n<p>优点:支持顺序访问和直接访问（即随机访问)；连续分配的文件在顺序访问时速度最快</p>\n<p>缺点:不方便文件拓展;存储空间利用率低，会产生磁盘碎片</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/d6919ae11bb4e125b3f0e6d81f80c7c9.png\" alt=\"image-20210810161040710\"></p>\n<h4 id=\"2-链接分配——隐式链接\"><a href=\"#2-链接分配——隐式链接\" class=\"headerlink\" title=\"2.链接分配——隐式链接\"></a>2.链接分配——隐式链接</h4><p>链接分配采取离散分配的方式，可以为文件分配离散的磁盘块。分为隐式链接和显式链接两种。</p>\n<ul>\n<li>从逻辑块号到物理块号的转变</li>\n</ul>\n<p>用户给出要访问的逻辑块号 i，操作系统找到该文件对应的目录项(FCB)</p>\n<p>从目录项中找到起始块号（即 0 号块），将 0 号逻辑块读入内存，由此知道 1 号逻辑块存放的物理块号，于是读入 1 号逻辑块，再找到 2 号逻辑块的存放位置……以此类推。</p>\n<p>因此，读入 i 号逻辑块，总共需要 i+1 次磁盘 l&#x2F;O。</p>\n<p>结论:采用链式分配（隐式链接）方式的文件，只支持顺序访问，不支持随机访问，查找效率低。另外，指向下一个盘块的指针也需要耗费少量的存储空间。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/78021e0d2ec00fecab38cb0fe87d71f8.png\" alt=\"image-20210810161314939\"></p>\n<h4 id=\"3-链接分配——显式链接\"><a href=\"#3-链接分配——显式链接\" class=\"headerlink\" title=\"3.链接分配——显式链接\"></a>3.链接分配——显式链接</h4><p>把用于链接文件各物理块的指针显式地存放在一张表中。即文件分配表（FAT，File Allocation Table)。如图所示</p>\n<p>注意:一个磁盘仅设置一张 FAT。开机时，将 FAT 读入内存，并常驻内存。FAT 的各个表项在物理上连续存储，且每一个表项长度相同，因此“物理块号”字段可以是隐含的。</p>\n<ul>\n<li>从逻辑块号到物理块号的转变</li>\n</ul>\n<p>用户给出要访问的逻辑块号 i，操作系统找到该文件对应的目录项( FCB)</p>\n<p>从目录项中找到起始块号，若 i&gt;0，则查询内存中的文件分配表 FAT，往后找到 i 号逻辑块对应的物理块号。逻辑块号转换成物理块号的过程不需要读磁盘操作。</p>\n<p>结论:采用链式分配（显式链接）方式的文件，支持顺序访问，也支持随机访问（想访问 i 号逻辑块时，并不需要依次访问之前的 0~i-1 号逻辑块)，由于块号转换的过程不需要访问磁盘，因此相比于隐式链接来说，访问速度快很多。</p>\n<p>显然，显式链接也不会产生外部碎片，也可以很方便地对文件进行拓展。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/01d002c1a099e83f3981fceb95e89dce.png\" alt=\"image-20210810161613102\"></p>\n<h4 id=\"4-两种链接分配方式总结\"><a href=\"#4-两种链接分配方式总结\" class=\"headerlink\" title=\"4.两种链接分配方式总结\"></a>4.两种链接分配方式总结</h4><p>隐式链接――除文件的最后一个盘块之外，每个盘块中都存有指向下一个盘块的指针。文件目录包括文件第一块的指针和最后一块的指针。</p>\n<ul>\n<li>优点:很方便文件拓展，不会有碎片问题，外存利用率高。</li>\n<li>缺点:只支持顺序访问，不支持随机访问，查找效率低，指向下一个盘块的指针也需要耗费少量的存储空间。</li>\n</ul>\n<p>显式链接――把用于链接文件各物理块的指针显式地存放在一张表中，即文件分配表（FAT，FileAllocation Table)。一个磁盘只会建立一张文件分配表。开机时文件分配表放入内存，并常驻内存。</p>\n<ul>\n<li>优点:很方便文件拓展，不会有碎片问题，外存利用率高，并且支持随机访问。相比于隐式链接来说，地址转换时不需要访问磁盘，因此文件的访问效率更高。</li>\n<li>缺点:文件分配表的需要占用一定的存储空间。</li>\n</ul>\n<h4 id=\"5-索引分配\"><a href=\"#5-索引分配\" class=\"headerlink\" title=\"5.索引分配\"></a>5.索引分配</h4><p>索引分配允许文件离散地分配在各个磁盘块中，<strong>系统会为每个文件建立一张索引表</strong>，索引表中记录了文件的各个逻辑块对应的物理块（索引表的功能类似于内存管理中的页表――建立逻辑页面到物理页之间的映射关系)。<strong>索引表存放的磁盘块称为索引块。文件数据存放的磁盘块称为数据块。</strong></p>\n<ul>\n<li>从逻辑块号到物理块号的转变</li>\n</ul>\n<p>用户给出要访问的逻辑块号 i，操作系统找到该文件对应的目录项（FCB)</p>\n<p>从目录项中可知索引表存放位置，将索引表从外存读入内存，并查找索引表即可知道 i 号逻辑块在外存中的存放位置。</p>\n<p>可见，索引分配方式可以支持随机访问。文件拓展也很容易实现(只需要给文件分配一个空闲块，并增加一个索引表项即可)</p>\n<p>但是索引表需要占用一定的存储空间</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/27c2d5bff551562e2c981f36b44f677f.png\" alt=\"image-20210810162255818\"></p>\n<ul>\n<li>如果一个文件的索引表太大，一个磁盘块放不下，那么如何解决呢？</li>\n</ul>\n<p>可以用以下三种方式解决。</p>\n<p>① 链接方案:如果索引表太大，一个索引块装不下，那么可以将多个索引块链接起来存放。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/25b3f3f2f52c118046dc13d067320719.png\" alt=\"image-20210810162649614\"></p>\n<p>② 多层索引:建立多层索引（原理类似于多级页表)。使第一层索引块指向第二层的索引块。还可根据文件大小的要求再建立第三层、第四层索引块。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/d5527ab48037c33ea4b86291fef38692.png\" alt=\"image-20210810162724018\"></p>\n<p>③ 混合索引:多种索引分配方式的结合。例如，一个文件的顶级索引表中，既包含直接地址索引（直接指向数据块），又包含一级间接索引（指向单层索引表)、还包含两级间接索引（指向两层索引表)。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/29c46f644f01928a558baa7390cff6ff.png\" alt=\"image-20210810162801596\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>总结</p></blockquote>\n<p>① 链接方案 : 如果索引表太大，一个索引块装不下，那么可以将多个索引块链接起来存放。缺点:若文件很大，索引表很长，就需要将很多个索引块链接起来。想要找到 i 号索引块，必须先依次读入 0~i-1 号索引块，这就导致磁盘 I&#x2F;O 次数过多，查找效率低下。</p>\n<p>② 多层索引:建立多层索引(原理类似于多级页表）。使第一层索引块指向第二层的索引块。还可根据文件大小的要求再建立第三层、第四层索引块。采用 K 层索引结构，且顶级索引表未调入内存，则访问一个数据块只需要 K+1 次读磁盘操作。缺点:即使是小文件，访问一个数据块依然需要 K+1 次读磁盘。</p>\n<p>③ 混合索引:多种索引分配方式的结合。例如，一个文件的顶级索引表中，既包含直接地址索引（直接指向数据块），又包含一级间接索引（指向单层索引表)、还包含两级间接索引(指向两层索引表)。优点:对于小文件来说，访问一个数据块所需的读磁盘次数更少。</p>\n<h4 id=\"6-三种分配方式总结\"><a href=\"#6-三种分配方式总结\" class=\"headerlink\" title=\"6.三种分配方式总结\"></a>6.三种分配方式总结</h4><p><img src=\"https://img-blog.csdnimg.cn/img_convert/a935e9d61703ac76486ce85fff02032c.png\" alt=\"image-20210810163334462\"></p>\n<h3 id=\"5-对空闲磁盘块的管理（文件存储空间管理）\"><a href=\"#5-对空闲磁盘块的管理（文件存储空间管理）\" class=\"headerlink\" title=\"5.对空闲磁盘块的管理（文件存储空间管理）\"></a>5.对空闲磁盘块的管理（文件存储空间管理）</h3><p><img src=\"https://img-blog.csdnimg.cn/img_convert/65d8f4e50b9f5ee8319a406ae5bd9399.png\" alt=\"image-20210810165416231\"></p>\n<h4 id=\"1-文件卷\"><a href=\"#1-文件卷\" class=\"headerlink\" title=\"1.文件卷\"></a>1.文件卷</h4><p>存储空间的划分:将物理磁盘划分为一个个文件卷(逻辑卷、逻辑盘)。所谓的文件卷就相当于电脑上的 C 盘，D 盘等。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/9190ef1cc05c0bc46256935a1505c2ef.png\" alt=\"image-20210810165312412\"></p>\n<h4 id=\"2-空闲表法\"><a href=\"#2-空闲表法\" class=\"headerlink\" title=\"2.空闲表法\"></a>2.空闲表法</h4><p>为一个磁盘创建一个表，来存储空闲磁盘块的位置。</p>\n<p>如何分配磁盘块 : 与内存管理中的动态分区分配很类似，为一个文件分配连续的存储空间。同样可采用首次适应、最佳适应、最坏适应等算法来决定要为文件分配哪个区间。</p>\n<p>如何回收磁盘块:与内存管理中的动态分区分配很类似，当回收某个存储区时需要有四种情况―—① 回收区的前后都没有相邻空闲区;② 回收区的前后都是空闲区;③ 回收区前面是空闲区;④ 回收区后面是空闲区。总之，回收时需要注意表项的合并问题。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/23f116036ca8eb3fb7b85496ef93769b.png\" alt=\"image-20210810165513344\"></p>\n<h4 id=\"3-空闲链表法\"><a href=\"#3-空闲链表法\" class=\"headerlink\" title=\"3.空闲链表法\"></a>3.空闲链表法</h4><p>空闲链表发分为空闲盘块链和空闲盘区链。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/b77bd000a1f9e5ee32f2373a8c5ac6c4.png\" alt=\"image-20210810165802397\"></p>\n<h5 id=\"1-空闲盘块链\"><a href=\"#1-空闲盘块链\" class=\"headerlink\" title=\"1.空闲盘块链\"></a>1.空闲盘块链</h5><ul>\n<li>操作系统保存着链头、链尾指针。</li>\n<li>如何分配:若某文件申请 K 个盘块，则从链头开始依次摘下 K 个盘块分配，并修改空闲链的链头指针。</li>\n<li>如何回收:回收的盘块依次挂到链尾，并修改空闲链的链尾指针。</li>\n<li>适用于离散分配的物理结构。为文件分配多个盘块时可能要重复多次操作。</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/7292df03815fd9209ca5e8595b19d9c4.png\" alt=\"image-20210810170003033\"></p>\n<h5 id=\"2-空闲盘区链\"><a href=\"#2-空闲盘区链\" class=\"headerlink\" title=\"2.空闲盘区链\"></a>2.空闲盘区链</h5><ul>\n<li>操作系统保存着链头、链尾指针。</li>\n<li>如何分配:若某文件申请 K 个盘块，则可以采用首次适应、最佳适应等算法，从链头开始检索，按照算法规则找到一个大小符合要求的空闲盘区，分配给文件。若没有合适的连续空闲块，也可以将不同盘区的盘块同时分配给一个文件，注意分配后可能要修改相应的链指针、盘区大小等数据。</li>\n<li>如何回收:若回收区和某个空闲盘区相邻，则需要将回收区合并到空闲盘区中。若回收区没有和任何空闲区相邻，将回收区作为单独的一个空闲盘区挂到链尾。</li>\n<li>离散分配、连续分配都适用。为一个文件分配多个盘块时效率更高</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/b9dfcb60830df513bd8446b4197658b6.png\" alt=\"image-20210810170223448\"></p>\n<h4 id=\"4-位示图法\"><a href=\"#4-位示图法\" class=\"headerlink\" title=\"4.位示图法\"></a>4.位示图法</h4><p>位示图:每个二进制位对应一个盘块。在本例中，“0”代表盘块空闲，“1”代表盘块已分配。位示图一般用连续的“字”来表示，如本例中一个字的字长是 16 位，字中的每一位对应一个盘块。因此可以用(字号，位号）对应一个盘块号。当然有的题目中也描述为（行号，列号)</p>\n<p>(字号,位号)&#x3D;(i j) 的二进制位对应的盘块号 b&#x3D; ni + j</p>\n<p>b 号盘块对应的字号 i &#x3D; b&#x2F;n，位号 j &#x3D; b%n。</p>\n<p>如何分配:若文件需要 K 个块，</p>\n<p>① 顺序扫描位示图，找到 K 个相邻或不相邻的“0”;</p>\n<p>② 根据字号、位号算出对应的盘块号，将相应盘块分配给文件;</p>\n<p>③ 将相应位设置为“1”。</p>\n<p>如何回收:</p>\n<p>① 根据回收的盘块号计算出对应的字号、位号;</p>\n<p>② 将相应二进制位设为“0”。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/88f18be166ec7bc85acebf36a2ddeb3c.png\" alt=\"image-20210810170334688\"></p>\n<h4 id=\"5-成组链接法\"><a href=\"#5-成组链接法\" class=\"headerlink\" title=\"5.成组链接法\"></a>5.成组链接法</h4><p>空闲表法、空闲链表法不适用于大型文件系统，因为空闲表或空闲链表可能过大。UNIX 系统中采用了成组链接法对磁盘空闲块进行管理。<br>文件卷的目录区中专门用一个磁盘块作为“超级块”，当系统启动时需要将超级块读入内存。并且要保证内存与外存中的“超级块”数据一致。如图所示。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/b884e81fa6bd4f0b022600eafce9b82c.png\" alt=\"image-20210810170623901\"></p>\n<ul>\n<li>超级块中存储的内容</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/326b4386246193c4e7d558161cb21a03.png\" alt=\"image-20210810170801760\"></p>\n<ul>\n<li><p>如何分配?<br>Eg :需要 100 个空闲块<br>① 检查第一个分组的块数是否足够。100&#x3D;100，是足够的。</p>\n<p>② 分配第一个分组中的 100 个空闲块。但是由于 300 号块内存放了再下一组的信息，因此 300 号块的数据需要复制到超级块中。</p>\n<p>Eg :需要 1 个空闲块<br>① 检查第一个分组的块数是否足够。1&lt;100，因此是足够的。</p>\n<p>② 分配第一个分组中的 1 个空闲块，并修改相应数据</p>\n</li>\n<li><p>如何回收?<br>Eg :假设每个分组最多为 100 个空闲块，此时第一个分组已有 99 个块，还要再回收一块。</p>\n<p>Eg : 假设每个分组最多为 100 个空闲块，此时第一个分组已有 100 个块，还要再回收一块。需要将超级块中的数据复制到新回收的块中，并修改超级块的内容，让新回收的块成为第一个分组。</p>\n</li>\n</ul>\n<h3 id=\"6-文件的基本操作\"><a href=\"#6-文件的基本操作\" class=\"headerlink\" title=\"6.文件的基本操作\"></a>6.文件的基本操作</h3><h4 id=\"1-创建文件\"><a href=\"#1-创建文件\" class=\"headerlink\" title=\"1.创建文件\"></a>1.创建文件</h4><p>进行 Create 系统调用时，需要提供的几个主要参数:</p>\n<ol>\n<li><p>所需的外存空间大小（如:一个盘块，即 1KB)</p>\n</li>\n<li><p>文件存放路径（“D:&#x2F;Demo”)</p>\n</li>\n<li><p>文件名（这个地方默认为“新建文本文档.txt”)</p>\n<p>操作系统在处理 Create 系统调用时，主要做了两件事:</p>\n</li>\n</ol>\n<p>1.在外存中找到文件所需的空间（结合上小节学习的空闲链表法、位示图、成组链接法等管理策略，找到空闲空间) 2.根据文件存放路径的信息找到该目录对应的目录文件（此处就是 D:&#x2F;Demo 目录），在目录中创建该文件对应的目录项。目录项中包含了文件名、文件在外存中的存放位置等信息。</p>\n<h4 id=\"2-删除文件\"><a href=\"#2-删除文件\" class=\"headerlink\" title=\"2.删除文件\"></a>2.删除文件</h4><p>进行 Delete 系统调用时，需要提供的几个主要参数:</p>\n<p>1.文件存放路径（“D:&#x2F;Demo”)</p>\n<p>2.文件名（“test.txt”)</p>\n<p>操作系统在处理 Delete 系统调用时，主要做了几件事:</p>\n<p>1．根据文件存放路径找到相应的目录文件，从目录中找到文件名对应的目录项。</p>\n<p>2．根据该目录项记录的文件在外存的存放位置、文件大小等信息，回收文件占用的磁盘块。(回收磁盘块时，根据空闲表法、空闲链表法、位图法等管理策略的不同，需要做不同的处理)</p>\n<p>3.从目录表中删除文件对应的目录项。</p>\n<h4 id=\"3-打开文件\"><a href=\"#3-打开文件\" class=\"headerlink\" title=\"3.打开文件\"></a>3.打开文件</h4><p>在很多操作系统中，在对文件进行操作之前，要求用户先使用 open 系统调用“打开文件”，需要提供的几个主要参数:<br>1．文件存放路径（“D:&#x2F;Demo”)</p>\n<p>2.文件名（ “test.txt”)</p>\n<p>3．要对文件的操作类型（如:r 只读;rw 读写等)</p>\n<p>操作系统在处理 open 系统调用时，主要做了几件事:</p>\n<p>1．根据文件存放路径找到相应的目录文件，从目录中找到文件名对应的的目录项，并检查该用户是否有指定的操作权限。</p>\n<p>2．将目录项复制到内存中的“打开文件表”中。并将对应表目的编号返回给用户。之后用户使用打开文件表的编号来指明要操作的文件。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/244f8f3efa56916fab688288de724d43.png\" alt=\"image-20210813142750578\"></p>\n<ul>\n<li>需要注意的是，有两张打开文件表，一个是进程自带的，另一个是系统的（只有一张）。</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/6c2bc848e4337717642c135d1eac31d1.png\" alt=\"image-20210813142335669\"></p>\n<h4 id=\"4-关闭文件\"><a href=\"#4-关闭文件\" class=\"headerlink\" title=\"4.关闭文件\"></a>4.关闭文件</h4><p>进程使用完文件后，要“关闭文件”。<br>操作系统在处理 Close 系统调用时，主要做了几件事:</p>\n<p>1.将进程的打开文件表相应表项删除</p>\n<p>2.回收分配给该文件的内存空间等资源</p>\n<p>3.系统打开文件表的打开计数器 count 减 1，若 count &#x3D;0，则删除对应表项。</p>\n<h4 id=\"5-读文件\"><a href=\"#5-读文件\" class=\"headerlink\" title=\"5.读文件\"></a>5.读文件</h4><p>进程使用 read 系统调用完成写操作。</p>\n<p>需要指明是哪个文件（在支持“打开文件”操作的系统中，只需要提供文件在打开文件表中的索引号即可)，</p>\n<p>还需要指明要读入多少数据（如:读入 1KB）、</p>\n<p>指明读入的数据要放在内存中的什么位置。</p>\n<p>操作系统在处理 read 系统调用时，会从读指针指向的外存中，将用户指定大小的数据读入用户指定的内存区域中。</p>\n<h4 id=\"6-写文件\"><a href=\"#6-写文件\" class=\"headerlink\" title=\"6.写文件\"></a>6.写文件</h4><p>进程使用 write 系统调用完成写操作，</p>\n<p>需要指明是哪个文件（在支持“打开文件”操作的系统中，只需要提供文件在打开文件表中的索引号即可），</p>\n<p>还需要指明要写出多少数据（如:写出 1KB)、</p>\n<p>写回外存的数据放在内存中的什么位置</p>\n<p>操作系统在处理 write 系统调用时，会从用户指定的内存区域中，将指定大小的数据写回写指针指向的外存。</p>\n<h3 id=\"7-文件共享\"><a href=\"#7-文件共享\" class=\"headerlink\" title=\"7.文件共享\"></a>7.文件共享</h3><h4 id=\"1-基于索引节点的共享方式（硬链接）\"><a href=\"#1-基于索引节点的共享方式（硬链接）\" class=\"headerlink\" title=\"1.基于索引节点的共享方式（硬链接）\"></a>1.基于索引节点的共享方式（硬链接）</h4><p>知识回顾:索引结点，是一种文件目录瘦身策略。由于检索文件时只需用到文件名，因此可以将除了文件名之外的其他信息放到索引结点中。这样目录项就只需要包含文件名、索引结点指针。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/1a5b412df0b98fbe964d16684e05af82.png\" alt=\"image-20210813144036702\"></p>\n<p><strong>索引结点中设置一个链接计数变量 count，用于表示链接到本索引结点上的用户目录项数。</strong><br>若 count &#x3D;2，说明此时有两个用户目录项链接到该索引结点上，或者说是有两个用户在共享此文件。若某个用户决定“删除”该文件，则只是要把用户目录中与该文件对应的目录项删除，且索引结点的 count 值减 1。<br>若 count&gt;0，说明还有别的用户要使用该文件，暂时不能把文件数据删除，否则会导致指针悬空。当 count &#x3D;0 时系统负责删除文件。</p>\n<h4 id=\"2-基于符号链的共享方式（软链接）\"><a href=\"#2-基于符号链的共享方式（软链接）\" class=\"headerlink\" title=\"2.基于符号链的共享方式（软链接）\"></a>2.基于符号链的共享方式（软链接）</h4><p>当 User3 访问“ccc”时，操作系统判断文件“ccc”属于 Link 类型文件，于是会根据其中记录的路径层层查找目录，最终找到 User1 的目录表中的“aaa”表项，于是就找到了文件 1 的索引结点。类似于快捷方式。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/d608b1a370f5c8b07ae74529ca59a093.png\" alt=\"image-20210813144244690\"></p>\n<h3 id=\"8-文件保护\"><a href=\"#8-文件保护\" class=\"headerlink\" title=\"8.文件保护\"></a>8.文件保护</h3><h4 id=\"1-口令保护\"><a href=\"#1-口令保护\" class=\"headerlink\" title=\"1.口令保护\"></a>1.口令保护</h4><p>为文件设置一个“口令”(如: abc112233），用户请求访问该文件时必须提供“口令”。</p>\n<p>口令一般存放在文件对应的 FCB 或索引结点中。用户访问文件前需要先输入“口令”，操作系统会将用户提供的口令与 FCB 中存储的口令进行对比，如果正确，则允许该用户访问文件。</p>\n<p>优点:保存口令的空间开销不多，验证口令的时间开销也很小。</p>\n<p>缺点:正确的“口令”存放在系统内部，不够安全。</p>\n<h4 id=\"2-加密保护\"><a href=\"#2-加密保护\" class=\"headerlink\" title=\"2.加密保护\"></a>2.加密保护</h4><p>使用某个“密码”对文件进行加密，在访问文件时需要提供正确的“密码”才能对文件进行正确的解密。<br>Eg:一个最简单的加密算法――异或加密。<br>假设用于加密&#x2F;解密的“密码”为“01001”。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/16b36ff5f4c1142c476390fe8675b67d.png\" alt=\"image-20210813145725112\"></p>\n<p>优点:保密性强，不需要在系统中存储“密码”。</p>\n<p>缺点:编码&#x2F;译码，或者说加密&#x2F;解密要花费一定时间。</p>\n<h4 id=\"3-访问控制\"><a href=\"#3-访问控制\" class=\"headerlink\" title=\"3.访问控制\"></a>3.访问控制</h4><p>在每个文件的 FCB（或索引结点）中增加一个访问控制列表(Access-Control List, ACL)，该表中记录了各个用户可以对该文件执行哪些操作。如图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/b17edf512d307f91a1a15cdb6a068ac4.png\" alt=\"image-20210813145849324\"></p>\n<p>精简的访问列表:以“组”为单位，标记各“组”用户可以对文件执行哪些操作。如:分为系统管理员、文件主、文件主的伙伴、其他用户几个分组。当某用户想要访问文件时，系统会检查该用户所属的分组是否有相应的访问权限。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/e4fff7eb5201827e7cc9ef083e72a7dd.png\" alt=\"image-20210813145938099\"></p>\n<h4 id=\"4-总结-1\"><a href=\"#4-总结-1\" class=\"headerlink\" title=\"4.总结\"></a>4.总结</h4><p><img src=\"https://img-blog.csdnimg.cn/img_convert/946de3aa6b1036fb14827d65f9b3c7f6.png\" alt=\"image-20210813150016165\"></p>\n<h3 id=\"9-文件的层次结构\"><a href=\"#9-文件的层次结构\" class=\"headerlink\" title=\"9.文件的层次结构\"></a>9.文件的层次结构</h3><p><img src=\"https://img-blog.csdnimg.cn/img_convert/10668e3ef884278c3255e9922dbf2dda.png\" alt=\"image-20210813150515554\"></p>\n<p>用一个例子来辅助记忆文件系统的层次结构:</p>\n<p>假设某用户请求删除文件“D:&#x2F;工作目录&#x2F;学生信息.xlsx”的最后 100 条记录。</p>\n<ol>\n<li>用户需要通过操作系统提供的接口发出上述请求一用户接口。</li>\n<li>由于用户提供的是文件的存放路径，因此需要操作系统一层一层地查找目录，找到对应的目录项――文件目录系统</li>\n<li>不同的用户对文件有不同的操作权限，因此为了保证安全，需要检查用户是否有访问权限―一存取控制模块（存取控制验证层)</li>\n<li>验证了用户的访问权限之后，需要把用户提供的“记录号”转变为对应的逻辑地址――逻辑文件系统与文件信息缓冲区</li>\n<li>知道了目标记录对应的逻辑地址后，还需要转换成实际的物理地址――物理文件系统</li>\n<li>要删除这条记录，必定要对磁盘设备发出请求――设备管理程序模块</li>\n<li>删除这些记录后，会有一些盘块空闲，因此要将这些空闲盘块回收――辅助分配模块。</li>\n</ol>\n<h3 id=\"10-磁盘结构\"><a href=\"#10-磁盘结构\" class=\"headerlink\" title=\"10.磁盘结构\"></a>10.磁盘结构</h3><ul>\n<li>磁盘的表面由一些磁性物质组成，可以用这些磁性物质来记录二进制数据</li>\n<li>磁盘的盘面被划分成一个个磁道。这样的一个“圈”就是一个磁道。</li>\n<li>一个磁道又被划分成一个个扇区，每个扇区就是一个“磁盘块”。各个扇区存放的数据量相同（如 1KB)。</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/5d3e9a9610fef48c7bec9b2bdc1ca781.png\" alt=\"image-20210813151311575\"></p>\n<ul>\n<li>所有盘面中相对位置相同的磁道组成柱面。</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/2086cd965a3b65368cc829804454175c.png\" alt=\"image-20210813151500796\"></p>\n<ul>\n<li><p><strong>可用(柱面号，盘面号，扇区号）来定位任意一个“磁盘块”。</strong></p>\n</li>\n<li><p>可根据该地址读取一个“块”<br>① 根据“柱面号”移动磁臂，让磁头指向指定柱面;<br>② 激活指定盘面对应的磁头;<br>③ 磁盘旋转的过程中，指定的扇区会从磁头下面划过，这样就完成了对指定扇区的读&#x2F;写。</p>\n</li>\n<li><p>磁盘分类</p>\n</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/44eb50127c6e7aa9eac2063f6e4efc14.png\" alt=\"image-20210813151834210\"></p>\n<h3 id=\"11-磁盘调度算法\"><a href=\"#11-磁盘调度算法\" class=\"headerlink\" title=\"11.磁盘调度算法\"></a>11.磁盘调度算法</h3><h4 id=\"1-一次磁盘读-写操作需要的时间\"><a href=\"#1-一次磁盘读-写操作需要的时间\" class=\"headerlink\" title=\"1.一次磁盘读&#x2F;写操作需要的时间\"></a>1.一次磁盘读&#x2F;写操作需要的时间</h4><p><img src=\"https://img-blog.csdnimg.cn/img_convert/1b76fd0a459e00dddb9a38233d4bc18c.png\" alt=\"image-20210813155004975\"></p>\n<ul>\n<li><p><strong>寻找时间</strong>(寻道时间)Ts:在读&#x2F;写数据前，将磁头移动到指定磁道所花的时间。<br>① 启动磁头臂是需要时间的。假设耗时为 s;<br>② 移动磁头也是需要时间的。假设磁头匀速移动，每跨越一个磁道耗时为 m，总共需要跨越 n 条磁道。则:<br>寻道时间 Ts &#x3D; s + m*n</p>\n</li>\n<li><p><strong>延迟时间</strong>T:通过旋转磁盘，使磁头定位到目标扇区所需要的时间。设磁盘转速为 r(单位:转&#x2F;秒，或转&#x2F;分），则平均所需的延迟时间 T&#x3D;(1&#x2F;2)*(1&#x2F;r)&#x3D; 1&#x2F;2r。</p>\n<p>1&#x2F;r 就是转一圈需要的时间。找到目标扇区平均需要转半圈，因此再乘以 1&#x2F;2</p>\n</li>\n<li><p><strong>传输时间</strong>Tt:从磁盘读出或向磁盘写入数据所经历的时间，假设磁盘转速为 r，此次读&#x2F;写的字节数为 b，每个磁道上的字节数为 N。则:<br>传输时间 Tt &#x3D; (1&#x2F;r)*(b&#x2F;N) &#x3D; b&#x2F;(rN)</p>\n<p>每个磁道要可存 N 字节的数据，因此 b 字节的数据需要 b&#x2F;N 个磁道才能存储。而读&#x2F;写一个磁道所需的时间刚好又是转一圈所需要的时间 1&#x2F;r。</p>\n</li>\n<li><p>总的平均存取时间 T&#x3D;Ts+ 1&#x2F;2r + b&#x2F;(rN)</p>\n</li>\n</ul>\n<p>延迟时间和传输时间都与磁盘转速相关，且为线性相关。而转速是硬件的固有属性，因此操作系统也无法优化延迟时间和传输时间。但是操作系统的磁盘调度算法会直接影响寻道时间。</p>\n<h4 id=\"2-先来先服务算法\"><a href=\"#2-先来先服务算法\" class=\"headerlink\" title=\"2.先来先服务算法\"></a>2.先来先服务算法</h4><ul>\n<li>根据进程请求访问磁盘的先后顺序进行调度。</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/257d07ab99e1e4c9a5454a0882fd2902.png\" alt=\"image-20210813154130996\"></p>\n<h4 id=\"3-最短寻找时间优先（SSTF）\"><a href=\"#3-最短寻找时间优先（SSTF）\" class=\"headerlink\" title=\"3. 最短寻找时间优先（SSTF）\"></a>3. 最短寻找时间优先（SSTF）</h4><p>SSTF 算法会优先处理的磁道是与当前磁头最近的磁道。可以保证每次的寻道时间最短，但是并不能保证总的寻道时间最短。(其实就是贪心算法的思想，只是选择眼前最优，但是总体未必最优)</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/47fabb28ddaecfd76ea4d2dfa0b4167c.png\" alt=\"image-20210813154241694\"></p>\n<h4 id=\"4-扫描算法（SCAN）\"><a href=\"#4-扫描算法（SCAN）\" class=\"headerlink\" title=\"4.扫描算法（SCAN）\"></a>4.扫描算法（SCAN）</h4><p>SSTF 算法会产生饥饿的原因在于:磁头有可能在一个小区域内来回来去地移动。为了防止这个问题，可以规定，只有磁头移动到最外侧磁道的时候才能往内移动，移动到最内侧磁道的时候才能往外移动。这就是扫描算法（SCAN)的思想。由于磁头移动的方式很像电梯，因此也叫电梯算法。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/9829ac37c98996d23f4d4bc981c76853.png\" alt=\"image-20210813154355809\"></p>\n<h4 id=\"5-LOOK-调度算法\"><a href=\"#5-LOOK-调度算法\" class=\"headerlink\" title=\"5.LOOK 调度算法\"></a>5.LOOK 调度算法</h4><p>扫描算法（SCAN)中，只有到达最边上的磁道时才能改变磁头移动方向，事实上，处理了 184 号磁道的访问请求之后就不需要再往右移动磁头了。LOOK 调度算法就是为了解决这个问题，如果在磁头移动方向上已经没有别的请求，就可以立即改变磁头移动方向。(边移动边观察，因此叫 LOOK)。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/750e7461ef9890cd4995284f060d32ea.png\" alt=\"image-20210813154445923\"></p>\n<h4 id=\"6-循环扫描算法（C—SCAN）\"><a href=\"#6-循环扫描算法（C—SCAN）\" class=\"headerlink\" title=\"6.循环扫描算法（C—SCAN）\"></a>6.循环扫描算法（C—SCAN）</h4><p>SCAN 算法对于各个位置磁道的响应频率不平均，而 C-SCAN 算法就是为了解决这个问题。规定只有磁头朝某个特定方向移动时才处理磁道访问请求，而返回时直接快速移动至起始端而不处理任何请求。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/4886bb838661f65adc18c2fdd2480e4e.png\" alt=\"image-20210813154603757\"></p>\n<h4 id=\"7-C-LOOK-调度算法\"><a href=\"#7-C-LOOK-调度算法\" class=\"headerlink\" title=\"7.C-LOOK 调度算法\"></a>7.C-LOOK 调度算法</h4><p>C-SCAN 算法的主要缺点是只有到达最边上的磁道时才能改变磁头移动方向，并且磁头返回时不一定需要返回到最边缘的磁道上。C-LOOK 算法就是为了解决这个问题。如果磁头移动的方向上已经没有磁道访问请求了，就可以立即让磁头返回，并且磁头只需要返回到有磁道访问请求的位置即可。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/fdce0d6e9a21aafe91c6c34f05f0364b.png\" alt=\"image-20210813154656781\"></p>\n<h3 id=\"12-减少延迟时间的方法\"><a href=\"#12-减少延迟时间的方法\" class=\"headerlink\" title=\"12.减少延迟时间的方法\"></a>12.减少延迟时间的方法</h3><p><img src=\"https://img-blog.csdnimg.cn/img_convert/925f80e8771b6865bb4aaf7359240a22.png\" alt=\"image-20210813160340909\"></p>\n<p>假设要连续读取橙色区域的 2、3、4 扇区:<br>磁头读取一块的内容（也就是一个扇区的内容）后，需要一小段时间处理，而盘片又在不停地旋转<br>因此，如果 2、3 号扇区相邻着排列，则读完 2 号扇区后无法连续不断地读入 3 号扇区<br>必须等盘片继续旋转，3 号扇区再次划过磁头，才能完成扇区读入。</p>\n<p>结论:磁头读入一个扇区数据后需要一小段时间处理，如果逻辑上相邻的扇区在物理上也相邻，则读入几个连续的逻辑扇区，可能需要很长的“延迟时间”。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/fecc8f266994899bfc69f872d275fcd8.png\" alt=\"image-20210813160402020\"></p>\n<h4 id=\"1-交替编号\"><a href=\"#1-交替编号\" class=\"headerlink\" title=\"1.交替编号\"></a>1.交替编号</h4><p>若采用交替编号的策略，即让逻辑上相邻的扇区在物理上有一定的间隔，可以使读取连续的逻辑扇区所需要的延迟时间更小。如图所示。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/706a5c85cb0c50130e486122a77f8c02.png\" alt=\"image-20210813160529803\"></p>\n<h4 id=\"2-磁盘地址结构的设计\"><a href=\"#2-磁盘地址结构的设计\" class=\"headerlink\" title=\"2.磁盘地址结构的设计\"></a>2.磁盘地址结构的设计</h4><p>思考:为什么磁盘的物理地址是（柱面号，盘面号，扇区号)，而不是(盘面号，柱面号，扇区号)？</p>\n<p>答:读取地址连续的磁盘块时，采用（柱面号，盘面号，扇区号）的地址结构可以减少磁头移动消耗的时间</p>\n<p>注：不是很理解</p>\n<h4 id=\"3-错位命名\"><a href=\"#3-错位命名\" class=\"headerlink\" title=\"3.错位命名\"></a>3.错位命名</h4><p><img src=\"https://img-blog.csdnimg.cn/img_convert/33b98e507dedcb34fa42516b3b954afd.png\" alt=\"image-20210813160725166\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/ef5527060892742253d8ba60f3d9775c.png\" alt=\"image-20210813160747164\"></p>\n<h3 id=\"13-磁盘的管理\"><a href=\"#13-磁盘的管理\" class=\"headerlink\" title=\"13.磁盘的管理\"></a>13.磁盘的管理</h3><h4 id=\"1-磁盘初始化\"><a href=\"#1-磁盘初始化\" class=\"headerlink\" title=\"1.磁盘初始化\"></a>1.磁盘初始化</h4><p>磁盘初始化:<br>Step 1:进行低级格式化（物理格式化），将磁盘的各个磁道划分为扇区。一个扇区通常可分为头、数据区域（如 512B 大小）、尾三个部分组成。管理扇区所需要的各种数据结构一般存放在头、尾两个部分，包括扇区校验码（如奇偶校验、CRC 循环冗余校验码等，校验码用于校验扇区中的数据是否发生错误)</p>\n<p>Step 2:将磁盘分区，每个分区由若干柱面（磁道）组成（即分为我们熟悉的 C 盘、D 盘、E 盘)</p>\n<p>step 3:进行逻辑格式化，创建文件系统。包括创建文件系统的根目录、初始化存储空间管理所用的数据结构（如位示图、空闲分区表)</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/4cd21c25564fd0f4c5a686c336d5802e.png\" alt=\"image-20210813161518921\"></p>\n<h4 id=\"2-引导块\"><a href=\"#2-引导块\" class=\"headerlink\" title=\"2.引导块\"></a>2.引导块</h4><ul>\n<li><p>计算机开机时需要进行一系列初始化的工作，这些初始化工作是通过执行初始化程序（自举程序）完成的。</p>\n</li>\n<li><p>初始化程序可以放在 ROM(只读存储器）中。ROM 中的数据在出厂时就写入了，并且以后不能再修改 。</p>\n</li>\n</ul>\n<p>初始化程序程序（自举程序）放在 ROM 中存在什么问题?万一需要更新自举程序，将会很不方便，因为 ROM 中的数据无法更改。如何解决呢?</p>\n<ul>\n<li><p>ROM 中只存放很小的“自举装入程序”。开机时计算机先运行“自举装入程序”，通过执行该程序就可找到引导块，并将完整的“自举程序”读入内存，完成初始化</p>\n</li>\n<li><p>完整的自举程序放在磁盘的启动块(即引导块&#x2F;启动分区)上，启动块位于磁盘的固定位置。</p>\n</li>\n<li><p>拥有启动分区的磁盘称为启动磁盘或系统磁盘（c:盘)</p>\n</li>\n</ul>\n<h4 id=\"3-坏块的管理\"><a href=\"#3-坏块的管理\" class=\"headerlink\" title=\"3.坏块的管理\"></a>3.坏块的管理</h4><ul>\n<li>坏了、无法正常使用的扇区就是“坏块”。这属于硬件故障，操作系统是无法修复的。应该将坏块标记出来，以免错误地使用到它。</li>\n<li>对于简单的磁盘，可以在逻辑格式化时（建立文件系统时)对整个磁盘进行坏块检查，标明哪些扇区是坏扇区，比如:在 FAT 表上标明。（在这种方式中，坏块对操作系统不透明)</li>\n<li>对于复杂的磁盘，磁盘控制器（磁盘设备内部的一个硬件部件）会维护一个坏块链表。<br>在磁盘出厂前进行低级格式化（物理格式化）时就将坏块链进行初始化。<br>会保留一些“备用扇区”，用于替换坏块。这种方案称为扇区备用。且这种处理方式中，坏块对操作系统透明。</li>\n</ul>\n<h2 id=\"5-I-O-管理\"><a href=\"#5-I-O-管理\" class=\"headerlink\" title=\"5.I&#x2F;O 管理\"></a>5.I&#x2F;O 管理</h2><h3 id=\"1-I-O-设备的概念\"><a href=\"#1-I-O-设备的概念\" class=\"headerlink\" title=\"1.I&#x2F;O 设备的概念\"></a>1.I&#x2F;O 设备的概念</h3><ul>\n<li>“I&#x2F;O” 就是“输入&#x2F;输出”(Input&#x2F;Output)</li>\n<li>I&#x2F;O 设备就是可以将数据输入到计算机，或者可以接收计算机输出数据的外部设备，属于计算机中的硬件部件。</li>\n</ul>\n<h3 id=\"2-I-O-控制器\"><a href=\"#2-I-O-控制器\" class=\"headerlink\" title=\"2.I&#x2F;O 控制器\"></a>2.I&#x2F;O 控制器</h3><h4 id=\"1-含义-2\"><a href=\"#1-含义-2\" class=\"headerlink\" title=\"1.含义\"></a>1.含义</h4><ul>\n<li>CPU 无法直接控制 l&#x2F;O 设备的机械部件，因此 I&#x2F;O 设备还要有一个电子部件作为 CPU 和 I&#x2F;O 设备机械部件之间的“中介”，用于实现 CPU 对设备的控制。</li>\n<li>这个电子部件就是 I&#x2F;O 控制器，又称设备控制器。CPU 可控制 I&#x2F;o 控制器，又由 I&#x2F;O 控制器来控制设备的机械部件。</li>\n</ul>\n<h4 id=\"2-功能\"><a href=\"#2-功能\" class=\"headerlink\" title=\"2.功能\"></a>2.功能</h4><p><img src=\"https://img-blog.csdnimg.cn/img_convert/b245e1b6ad88b4dfe3719359142edd4d.png\" alt=\"image-20210804154622720\"></p>\n<h4 id=\"3-组成\"><a href=\"#3-组成\" class=\"headerlink\" title=\"3.组成\"></a>3.组成</h4><p><img src=\"https://img-blog.csdnimg.cn/img_convert/8c9ebb99a1a9074a142f333bee867ea2.png\" alt=\"image-20210804155007898\"></p>\n<h3 id=\"3-I-O-控制方式\"><a href=\"#3-I-O-控制方式\" class=\"headerlink\" title=\"3.I&#x2F;O 控制方式\"></a>3.I&#x2F;O 控制方式</h3><h4 id=\"1-程序直接控制方式\"><a href=\"#1-程序直接控制方式\" class=\"headerlink\" title=\"1.程序直接控制方式\"></a>1.程序直接控制方式</h4><ul>\n<li>完成一次读&#x2F;写操作的流程图(以读操作为例)</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/306152b917fc4eadafdf980ebb4e7eee.png\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li>流程图</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/c270e30fb0374ce426893887ce4e9d3b.png\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"2-中断驱动方式\"><a href=\"#2-中断驱动方式\" class=\"headerlink\" title=\"2.中断驱动方式\"></a>2.中断驱动方式</h4><ul>\n<li>由于程序直接控制方式 CPU 利用率低，忙等，所以提出了中断驱动方式。</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/f74e1473feb475dd14eeca4f37b5a021.png\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/c795c5127f304fc4a5f02a349bbcc9a0.png\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"3-DMA-方式\"><a href=\"#3-DMA-方式\" class=\"headerlink\" title=\"3.DMA 方式\"></a>3.DMA 方式</h4><ul>\n<li>虽然中断驱动方式解决了程序直接控制方式的问题，但是每一次只能读&#x2F;写一个字，导致 CPU 频繁切换，耗费了很多时间。于是人们又发明了 DMA 方式。</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/ce47762f25cfbf9839a181db27141e14.png\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li>DMA 控制器</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/98c04f667c7ed1631bff510e3fc5937c.png\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li></li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/3f387b03b08612e01e051f18ff44e33a.png\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"4-通道控制方式\"><a href=\"#4-通道控制方式\" class=\"headerlink\" title=\"4.通道控制方式\"></a>4.通道控制方式</h4><ul>\n<li>通道控制方式是为了解决 DMA 方式连续存储的问题</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/6457dfe15349fbddab5a18be6aa21916.png\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/2713e1afa5f6e44bb77f1199efa43c38.png\" alt=\"在这里插入图片描述\"></p>\n<h4 id=\"5-四种方式总结\"><a href=\"#5-四种方式总结\" class=\"headerlink\" title=\"5.四种方式总结\"></a>5.四种方式总结</h4><p><img src=\"https://img-blog.csdnimg.cn/img_convert/23c164533617729d7433e1227332177d.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"4-I-O-软件层次结构\"><a href=\"#4-I-O-软件层次结构\" class=\"headerlink\" title=\"4.I&#x2F;O 软件层次结构\"></a>4.I&#x2F;O 软件层次结构</h3><h4 id=\"1-知识总览\"><a href=\"#1-知识总览\" class=\"headerlink\" title=\"1.知识总览\"></a>1.知识总览</h4><p><img src=\"https://img-blog.csdnimg.cn/img_convert/5847e7daab7e2dd23fa2d4358f37b71d.png\" alt=\"image-20210813172017447\"></p>\n<h4 id=\"2-用户层软件\"><a href=\"#2-用户层软件\" class=\"headerlink\" title=\"2.用户层软件\"></a>2.用户层软件</h4><ul>\n<li>用户层软件实现了与用户交互的接口，用户可直接使用该层提供的、与 I&#x2F;o 操作相关的库函数对设备进行操作。</li>\n<li>用户层软件将用户请求翻译成格式化的 I&#x2F;o 请求，并通过“系统调用”请求操作系统内核的服务。</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/756c09b8cd0bd1e5e6ad714f0ba8b070.png\" alt=\"image-20210813172214640\"></p>\n<h4 id=\"3-设备独立性软件\"><a href=\"#3-设备独立性软件\" class=\"headerlink\" title=\"3.设备独立性软件\"></a>3.设备独立性软件</h4><p>设备独立性软件，又称设备无关性软件。与设备的硬件特性无关的功能几乎都在这一层实现。</p>\n<p>主要功能：</p>\n<ol>\n<li>向上层提供统一的调用接口（如 read&#x2F;write 系统调用)</li>\n<li>设备的保护。（原理类似与文件保护。设备被看做是一种特殊的文件，不同用户对各个文件的访问权限是不一样的，同理，对设备的访问权限也不一样。）</li>\n<li>差错处理（设备独立性软件需要对一些设备的错误进行处理）</li>\n<li>设备的分配与回收</li>\n<li>数据缓冲区管理（可以通过缓冲技术屏蔽设备之间数据交换单位大小和传输速度的差异）</li>\n<li>建立逻辑设备名到物理设备名的映射关系;根据设备类型选择调用相应的驱动程序</li>\n</ol>\n<p>用户或用户层软件发出 I&#x2F;o 操作相关系统调用的系统调用时，需要指明此次要操作的 I&#x2F;o 设备的逻辑设备名（eg:去学校打印店打印时，需要选择打印机 1&#x2F;打印机 2&#x2F;打印机 3，其实这些都是逻辑设备名)<br>设备独立性软件需要通过“逻辑设备表（LUT，Logical UnitTable）”来确定逻辑设备对应的物理设备，并找到该设备对应的设备驱动程序。如图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/e09722205b779262ad239f569279491a.png\" alt=\"image-20210813172808277\"></p>\n<p>操作系统系统可以采用两种方式管理逻辑设备表(LUT) :<br>第一种方式，整个系统只设置一张 LUT，这就意味着所有用户不能使用相同的逻辑设备名，因此这种方式只适用于单用户操作系统。</p>\n<p>第二种方式，为每个用户设置一张 LUT，各个用户使用的逻辑设备名可以重复，适用于多用户操作系统。系统会在用户登录时为其建立一个用户管理进程，而 LUT 就存放在用户管理进程的 PCB 中。</p>\n<h4 id=\"4-驱动设备\"><a href=\"#4-驱动设备\" class=\"headerlink\" title=\"4.驱动设备\"></a>4.驱动设备</h4><p>思考:为何不同的设备需要不同的设备驱动程序?</p>\n<p>不同设备的内部硬件特性也不同，这些特性只有厂家才知道，因此厂家须提供与设备相对应的驱动程序，CPU 执行驱动程序的指令序列，来完成设置设备寄存器，检查设备状态等工作。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/959f5d25bffa0a2c27f15966d1bead07.png\" alt=\"image-20210813173131230\"></p>\n<h4 id=\"5-中断处理程序\"><a href=\"#5-中断处理程序\" class=\"headerlink\" title=\"5.中断处理程序\"></a>5.中断处理程序</h4><p>当 I&#x2F;o 任务完成时，I&#x2F;o 控制器会发送一个中断信号，系统会根据中断信号类型找到相应的中断处理程序并执行。中断处理程序的处理流程如下:</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/6331bc728bc60ecf52d671ea760e97d2.png\" alt=\"image-20210813173226846\"></p>\n<h4 id=\"6-总结\"><a href=\"#6-总结\" class=\"headerlink\" title=\"6.总结\"></a>6.总结</h4><p><img src=\"https://img-blog.csdnimg.cn/img_convert/e75bd4df046d748f7891e08bab14db8f.png\" alt=\"image-20210813173303452\"></p>\n<h3 id=\"5-I-O-核心子系统\"><a href=\"#5-I-O-核心子系统\" class=\"headerlink\" title=\"5.I&#x2F;O 核心子系统\"></a>5.I&#x2F;O 核心子系统</h3><h4 id=\"1-知识总览-1\"><a href=\"#1-知识总览-1\" class=\"headerlink\" title=\"1.知识总览\"></a>1.知识总览</h4><p><img src=\"https://img-blog.csdnimg.cn/img_convert/c0a6413a509710ba2cf7b3cd60545d68.png\" alt=\"image-20210813173804207\"></p>\n<ul>\n<li>这些功能在哪些层次上实现呢？</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/5ae321d874294707abfd86536c4f9d64.png\" alt=\"image-20210813173845210\"></p>\n<h4 id=\"2-I-O-调度\"><a href=\"#2-I-O-调度\" class=\"headerlink\" title=\"2.I&#x2F;O 调度\"></a>2.I&#x2F;O 调度</h4><p><strong>I&#x2F;O 调度:用某种算法确定一个好的顺序来处理各个 I&#x2F;o 请求。</strong><br>如:磁盘调度（先来先服务算法、最短寻道优先算法、SCAN 算法、C-SCAN 算法、LOOK 算法、C-LOOK 算法）。</p>\n<p>当多个磁盘 I&#x2F;o 请求到来时，用某种调度算法确定满足 I&#x2F;o 请求的顺序。</p>\n<p>同理，打印机等设备也可以用先来先服务算法、优先级算法、短作业优先等算法来确定 IV&#x2F;o 调度顺序。</p>\n<h4 id=\"3-设备保护\"><a href=\"#3-设备保护\" class=\"headerlink\" title=\"3.设备保护\"></a>3.设备保护</h4><p>操作系统需要实现文件保护功能，不同的用户对各个文件有不同的访问权限（如:只读、读和写等）。<br>在 UNIx 系统中，设备被看做是一种特殊的文件，每个设备也会有对应的 FCB。当用户请求访问某个设备时，系统根据 FCB 中记录的信息来判断该用户是否有相应的访问权限，以此实现“设备保护”的功能。(参考“文件保护”小节)</p>\n<h3 id=\"6-假脱机技术（SPOOLing-技术）\"><a href=\"#6-假脱机技术（SPOOLing-技术）\" class=\"headerlink\" title=\"6.假脱机技术（SPOOLing 技术）\"></a>6.假脱机技术（SPOOLing 技术）</h3><h4 id=\"1-脱机技术\"><a href=\"#1-脱机技术\" class=\"headerlink\" title=\"1.脱机技术\"></a>1.脱机技术</h4><ul>\n<li>手工操作阶段:主机直接从 l&#x2F;o 设备获得数据，由于设备速度慢，主机速度很快。人机速度矛盾明显，主机要浪费很多时间来等待设备。因此在批处理阶段引入了脱机输入&#x2F;输出技术（用磁带完成).</li>\n</ul>\n<p>Tips:为什么称为“脱机”？一脱离主机的控制进行的输入&#x2F;输出操作。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/b8655545ac79350b99d5648c9308b19a.png\" alt=\"image-20210813174939614\"></p>\n<h4 id=\"2-假脱机技术\"><a href=\"#2-假脱机技术\" class=\"headerlink\" title=\"2.假脱机技术\"></a>2.假脱机技术</h4><p>“假脱机技术”，又称“SPOOLing 技术”，用软件的方式模拟脱机技术。SPOQLing 系统的组成如下:</p>\n<ul>\n<li>“输入井”模拟脱机输入时的磁带，用于收容 I&#x2F;o 设备输入的数据</li>\n<li>“输出井”模拟脱机输出时的磁带，用于收容用户进程输出的数据</li>\n<li>“输入进程”模拟脱机输入时的外围控制机</li>\n<li>“输出进程”模拟脱机输出时的外围控制机</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/1cb679f7403e661ca47fe0cd5de69f70.png\"></p>\n<p>要实现 SPOOLing 技术，必须要有多道程序技术的支持。系统会建立“输入进程”和“输出进程”。</p>\n<h3 id=\"7-设备的分配和回收\"><a href=\"#7-设备的分配和回收\" class=\"headerlink\" title=\"7.设备的分配和回收\"></a>7.设备的分配和回收</h3><h4 id=\"1-知识总览-2\"><a href=\"#1-知识总览-2\" class=\"headerlink\" title=\"1.知识总览\"></a>1.知识总览</h4><p><img src=\"https://img-blog.csdnimg.cn/img_convert/b325e2ddf44d20ed7843f032ed557773.png\" alt=\"image-20210813182209052\"></p>\n<h4 id=\"2-设备分配时考虑的因素\"><a href=\"#2-设备分配时考虑的因素\" class=\"headerlink\" title=\"2.设备分配时考虑的因素\"></a>2.设备分配时考虑的因素</h4><p><img src=\"https://img-blog.csdnimg.cn/img_convert/cc7c4db27ad593251cb8949c2c574bcb.png\" alt=\"image-20210813182256861\"></p>\n<h5 id=\"1-固有属性\"><a href=\"#1-固有属性\" class=\"headerlink\" title=\"1.固有属性\"></a>1.固有属性</h5><p>设备的固有属性可分为三种:独占设备、共享设备、虚拟设备。</p>\n<ul>\n<li>独占设备—— 一个时段只能分配给一个进程（如打印机)</li>\n<li>共享设备――可同时分配给多个进程使用（如磁盘)，各进程往往是宏观上同时共享使用设备，而微观上交替使用。</li>\n<li>虚拟设备――采用 SPOOLing 技术将独占设备改造成虚拟的共享设备，可同时分配给多个进程使用（如采用 SPOOLing 技术实现的共享打印机）</li>\n</ul>\n<h5 id=\"2-分配算法\"><a href=\"#2-分配算法\" class=\"headerlink\" title=\"2.分配算法\"></a>2.分配算法</h5><p>先来先服务，优先级高者优先，短任务优先…….</p>\n<h5 id=\"3-安全性\"><a href=\"#3-安全性\" class=\"headerlink\" title=\"3.安全性\"></a>3.安全性</h5><p>从进程运行的安全性上考虑，设备分配有两种方式:</p>\n<p><strong>安全分配方式</strong>:为进程分配一个设备后就将进程阻塞，本次 I&#x2F;O 完成后才将进程唤醒。(eg:考虑进程请求打印机打印输出的例子)</p>\n<ul>\n<li>一个时段内每个进程只能使用一个设备</li>\n<li>优点:破坏了“请求和保持”条件，不会死锁</li>\n<li>缺点:对于一个进程来说，CPU 和 I&#x2F;o 设备只能串行工作</li>\n</ul>\n<p><strong>不安全分配方式</strong>:进程发出 I&#x2F;o 请求后，系统为其分配 I&#x2F;O 设备，进程可继续执行，之后还可以发出新的 I&#x2F;o 请求。只有某个 l&#x2F;o 请求得不到满足时才将进程阻塞。</p>\n<ul>\n<li>一个进程可以同时使用多个设备</li>\n<li>优点:进程的计算任务和 I&#x2F;o 任务可以并行处理，使进程迅速推进</li>\n<li>缺点:有可能发生死锁(死锁避免、死锁的检测和解除)</li>\n</ul>\n<h4 id=\"3-静态分配和动态分配\"><a href=\"#3-静态分配和动态分配\" class=\"headerlink\" title=\"3.静态分配和动态分配\"></a>3.静态分配和动态分配</h4><ul>\n<li>静态分配:进程运行前为其分配全部所需资源，运行结束后归还资源。破坏了“请求和保持”条件，不会发生死锁</li>\n<li>动态分配:进程运行过程中动态申请设备资源</li>\n</ul>\n<h4 id=\"4-设备分配中的数据结构\"><a href=\"#4-设备分配中的数据结构\" class=\"headerlink\" title=\"4.设备分配中的数据结构\"></a>4.设备分配中的数据结构</h4><p>“设备、控制器、通道”之间的关系:</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/eed8f3381d1ca8d9a3eca4c3d3940a84.png\" alt=\"image-20210813183138648\"></p>\n<ul>\n<li>**设备控制表（DCT):**系统为每个设备配置一张 DCT，用于记录设备情况</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/754953b8778912c40240516d506e3600.png\" alt=\"image-20210813183223442\"></p>\n<ul>\n<li>**控制器控制表(COCT):**每个设备控制器都会对应一张 COCT。操作系统根据 COCT 的信息对控制器进行操作和管理。</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/5910d8c0e2e8b9ec83d77427a1b3dcfe.png\" alt=\"image-20210813183256911\"></p>\n<ul>\n<li>**通道控制表（CHCT):**每个通道都会对应一张 CHCT。操作系统根据 CHCT 的信息对通道进行操作和管理。</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/2fd201a632d64cfd73b3121eabaac8d1.png\" alt=\"image-20210813183402979\"></p>\n<ul>\n<li><strong>系统设备表(SDT)</strong>:记录了系统中全部设备的情况，每个设备对应一个表目。</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/ba7cc6105c8ebb3a419734edadaa39de.png\" alt=\"image-20210813183445007\"></p>\n<h4 id=\"5-设备分配的步骤\"><a href=\"#5-设备分配的步骤\" class=\"headerlink\" title=\"5.设备分配的步骤\"></a>5.设备分配的步骤</h4><p>① 根据进程请求的物理设备名查找 SDT（注:物理设备名是进程请求分配设备时提供的参数)</p>\n<p>② 根据 SDT 找到 DCT，若设备忙碌则将进程 PCB 挂到设备等待队列中，不忙碌则将设备分配给进程。</p>\n<p>③ 根据 DCT 找到 COCT，若控制器忙碌则将进程 PCB 挂到控制器等待队列中，不忙碌则将控制器分配给进程。</p>\n<p>④ 根据 COCT 找到 CHCT，若通道忙碌则将进程 PCB 挂到通道等待队列中，不忙碌则将通道分配给进程。</p>\n<p>注 ∶ 只有设备、控制器、通道三者都分配成功时，这次设备分配才算成功，之后便可后动&#x2F;O 设备进行数据传送。</p>\n<p>缺点:<br>① 用户编程时必须使用“物理设备名”，底层细节对用户不透明，不方便编程</p>\n<p>② 若换了一个物理设备，则程序无法运行</p>\n<p>③ 若进程请求的物理设备正在忙碌，则即使系统中还有同类型的设备，进程也必须阻塞等待</p>\n<p>改进方法:建立逻辑设备名与物理设备名的映射机制，用户编程时只需提供逻辑设备名</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/b193222294d78fd22bc3cbe099337365.png\" alt=\"image-20210813183902617\"></p>\n<h4 id=\"6-设备分配步骤的改进\"><a href=\"#6-设备分配步骤的改进\" class=\"headerlink\" title=\"6.设备分配步骤的改进\"></a>6.设备分配步骤的改进</h4><p>① 根据进程请求的逻辑设备名查找 SDT(注:用户编程时提供的逻辑设备名其实就是“设备类型”)</p>\n<p>② 查找 SDT，找到用户进程指定类型的、并且空闲的设备，将其分配给该进程。操作系统在逻辑设备表（LUT)中新增一个表项。</p>\n<p>③ 根据 DCT 找到 cOCT，若控制器忙碌则将进程 PCB 挂到控制器等待队列中，不忙碌则将控制器分配给进程。</p>\n<p>④ 根据 COCT 找到 CHCT，若通道忙碌则将进程 PCB 挂到通道等待队列中，不忙碌则将通道分配给进程。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/4ceb806da6cb08069408544586626927.png\" alt=\"image-20210813183835147\"></p>\n<ul>\n<li>逻辑设备表</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/bc3f8875a6fc4046cd09b15a14028d6f.png\" alt=\"image-20210813183947599\"></p>\n<h3 id=\"8-缓冲区管理\"><a href=\"#8-缓冲区管理\" class=\"headerlink\" title=\"8.缓冲区管理\"></a>8.缓冲区管理</h3><h4 id=\"1-知识总览-3\"><a href=\"#1-知识总览-3\" class=\"headerlink\" title=\"1.知识总览\"></a>1.知识总览</h4><p><img src=\"https://img-blog.csdnimg.cn/img_convert/7584d0bcc82642831f254ac6495d8b0e.png\" alt=\"image-20210813184118658\"></p>\n<h4 id=\"2-含义和作用\"><a href=\"#2-含义和作用\" class=\"headerlink\" title=\"2.含义和作用\"></a>2.含义和作用</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>含义</p></blockquote>\n<p>缓冲区是一个存储区域，可以由专门的硬件寄存器组成，也可利用内存作为缓冲区。</p>\n<p>使用硬件作为缓冲区的成本较高，容量也较小，一般仅用在对速度要求非常高的场合（如存储器管理中所用的联想寄存器，由于对页表的访问频率极高，因此使用速度很快的联想寄存器来存放页表项的副本)</p>\n<p>一般情况下，更多的是利用内存作为缓冲区，“设备独立性软件”的缓冲区管理就是要组织管理好这些缓冲区</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>作用</p></blockquote>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/1856920cb50c0e6e4719e0e92932a2ae.png\" alt=\"image-20210813184305965\"></p>\n<h4 id=\"3-单缓冲\"><a href=\"#3-单缓冲\" class=\"headerlink\" title=\"3.单缓冲\"></a>3.单缓冲</h4><p>假设某用户进程请求某种块设备读入若干块的数据。若采用单缓冲的策略，操作系统会在主存中为其分配一个缓冲区（若题目中没有特别说明，一个缓冲区的大小就是一个块）。如图所示<br><strong>注意:当缓冲区数据非空时，不能往缓冲区冲入数据，只能从缓冲区把数据传出;当缓冲区为空时，可以往缓冲区冲入数据，但必须把缓冲区充满以后，才能从缓冲区把数据传出。</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/5a212ffd1b1beccd83b63bf80ebed731.png\" alt=\"image-20210813184442012\"></p>\n<ul>\n<li>处理一块数据的平均时间</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/395562b2e164baffc952ef7f163c4dcf.png\" alt=\"image-20210813184559073\"></p>\n<h4 id=\"4-双缓冲\"><a href=\"#4-双缓冲\" class=\"headerlink\" title=\"4.双缓冲\"></a>4.双缓冲</h4><p>假设某用户进程请求某种块设备读入若干块的数据。若采用双缓冲的策略，操作系统会在主存中为其分配两个缓冲区（若题目中没有特别说明，一个缓冲区的大小就是一个块)。</p>\n<ul>\n<li>假设 T&gt;C+M</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/e5ec5cd1f55a449d7e0470a32a6a066e.png\" alt=\"image-20210813184707380\"></p>\n<ul>\n<li>假设 T&lt;C+M</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/5a08a579ba2812f775a45fd937aaf195.png\" alt=\"image-20210813184750672\"></p>\n<p>**结论:采用双缓冲策略，处理一个数据块的平均耗时为 Max (T,C+M)**。</p>\n<h4 id=\"5-循环缓冲区\"><a href=\"#5-循环缓冲区\" class=\"headerlink\" title=\"5.循环缓冲区\"></a>5.循环缓冲区</h4><p>将多个大小相等的缓冲区链接成一个循环队列。<br>注:以下图示中，橙色表示已充满数据的缓冲区，绿色表示空缓冲区。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/9677c6126845a9fb17c029f01deda580.png\" alt=\"image-20210813184911606\"></p>\n<h4 id=\"6-缓冲池\"><a href=\"#6-缓冲池\" class=\"headerlink\" title=\"6.缓冲池\"></a>6.缓冲池</h4><p>缓冲池由系统中共用的缓冲区组成。</p>\n<p>这些缓冲区按使用状况可以分为:空缓冲队列、装满输入数据的缓冲队列(输入队列)、装满输出数据的缓冲队列（输出队列）。</p>\n<p>另外，根据一个缓冲区在实际运算中扮演的功能不同，又设置了四种工作缓冲区:用于收容输入数据的工作缓冲区(hin)、用于提取输入数据的工作缓冲区（sin)、用于收容输出数据的工作缓冲区(hout） 、用于提取输出数据的工作缓冲区(sout)。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/12d72547f589f1652a3e165289a83ec7.png\" alt=\"image-20210813185014461\"></p>\n","feature":true,"text":"操作系统（OS）1.计算机系统概述1.简介什么是操作系统？操作系统（Operating System， OS）是指控制和管理整个计算机系统的硬件和软件资源，并合...","permalink":"/post/80dcc1f3c95ffa34e99ea9b43b09b5d2","photos":[],"count_time":{"symbolsCount":"45k","symbolsTime":"41 mins."},"categories":[{"name":"计算机专业课","slug":"计算机专业课","count":1,"path":"api/categories/计算机专业课.json"}],"tags":[{"name":"学习笔记","slug":"学习笔记","count":1,"path":"api/tags/学习笔记.json"},{"name":"操作系统","slug":"操作系统","count":1,"path":"api/tags/操作系统.json"},{"name":"408","slug":"408","count":1,"path":"api/tags/408.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88OS%EF%BC%89\"><span class=\"toc-text\">操作系统（OS）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">1.计算机系统概述</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">1.简介</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%9F\"><span class=\"toc-text\">什么是操作系统？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9C%A8%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E4%BD%8D%E7%BD%AE\"><span class=\"toc-text\">操作系统在系统中的位置</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%8A%9F%E8%83%BD%E5%92%8C%E7%9B%AE%E6%A0%87\"><span class=\"toc-text\">操作系统的功能和目标</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%9B%9B%E4%B8%AA%E7%89%B9%E5%BE%81\"><span class=\"toc-text\">操作系统的四个特征</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6%E5%92%8C%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">2.操作系统的运行机制和体系结构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E4%B8%AD%E6%96%AD%E5%92%8C%E5%BC%82%E5%B8%B8\"><span class=\"toc-text\">3.中断和异常</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E6%A6%82%E5%BF%B5%E5%92%8C%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">1.概念和作用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">2.分类</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E4%B8%AD%E6%96%AD%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">3. 中断过程</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8\"><span class=\"toc-text\">4.系统调用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E5%90%AB%E4%B9%89\"><span class=\"toc-text\">1.含义</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">2.作用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E5%92%8C%E5%BA%93%E5%87%BD%E6%95%B0%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">3.系统调用和库函数的区别</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">4.过程</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">2.进程管理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%AE%9A%E4%B9%89%EF%BC%8C%E7%BB%84%E6%88%90%EF%BC%8C%E7%BB%84%E7%BB%87%E6%96%B9%E5%BC%8F%EF%BC%8C%E7%89%B9%E5%BE%81\"><span class=\"toc-text\">1.进程的定义，组成，组织方式，特征</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E8%BF%9B%E7%A8%8B\"><span class=\"toc-text\">1.进程</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E8%BF%9B%E7%A8%8B%E7%9A%84%E7%BB%84%E7%BB%87%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">2.进程的组织方式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E8%BF%9B%E7%A8%8B%E7%9A%84%E7%89%B9%E5%BE%81\"><span class=\"toc-text\">3.进程的特征</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E8%BF%9B%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81%E5%92%8C%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">2.进程的状态和转换</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E7%8A%B6%E6%80%81\"><span class=\"toc-text\">1.状态</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">2.转换</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E8%BF%9B%E7%A8%8B%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">3.进程控制</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1\"><span class=\"toc-text\">4.进程通信</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E5%85%B1%E4%BA%AB%E5%AD%98%E5%82%A8\"><span class=\"toc-text\">1.共享存储</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E7%AE%A1%E9%81%93%E9%80%9A%E4%BF%A1\"><span class=\"toc-text\">2.管道通信</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E6%B6%88%E6%81%AF%E4%BC%A0%E9%80%92\"><span class=\"toc-text\">3.消息传递</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E7%BA%BF%E7%A8%8B%E6%A6%82%E5%BF%B5%E5%92%8C%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">5.线程概念和多线程模型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">1.概念</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E7%A8%8B%E4%B8%8E%E8%BF%9B%E7%A8%8B%E5%AF%B9%E6%AF%94\"><span class=\"toc-text\">线程与进程对比</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E7%BA%BF%E7%A8%8B%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">2.线程分类</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">6.多线程模型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-%E5%A4%84%E7%90%86%E6%9C%BA%E8%B0%83%E5%BA%A6%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E5%B1%82%E6%AC%A1\"><span class=\"toc-text\">7.处理机调度的概念和层次</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E9%AB%98%E7%BA%A7%E8%B0%83%E5%BA%A6\"><span class=\"toc-text\">1.高级调度</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E4%B8%AD%E7%BA%A7%E8%B0%83%E5%BA%A6\"><span class=\"toc-text\">2.中级调度</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86%EF%BC%9A%E8%BF%9B%E7%A8%8B%E7%9A%84%E4%B8%83%E7%8A%B6%E6%80%81%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">补充知识：进程的七状态模型</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E4%BD%8E%E7%BA%A7%E8%B0%83%E5%BA%A6\"><span class=\"toc-text\">3.低级调度</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E4%B8%89%E7%A7%8D%E8%B0%83%E5%BA%A6%E7%9A%84%E8%81%94%E7%B3%BB%E5%92%8C%E5%AF%B9%E6%AF%94\"><span class=\"toc-text\">4.三种调度的联系和对比</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%9A%84%E6%97%B6%E6%9C%BA%EF%BC%8C%E5%88%87%E6%8D%A2%E8%BF%87%E7%A8%8B%E5%92%8C%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">8.进程调度的时机，切换过程和方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%9A%84%E6%97%B6%E6%9C%BA\"><span class=\"toc-text\">1.进程调度的时机</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%9A%84%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">2.进程调度的方式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%88%87%E6%8D%A2%E4%B8%8E%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">3.进程的切换与过程</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9-%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95%E7%9A%84%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87\"><span class=\"toc-text\">9.调度算法的评价指标</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95%EF%BC%881%EF%BC%89\"><span class=\"toc-text\">10.调度算法（1）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E5%85%88%E6%9D%A5%E5%85%88%E6%9C%8D%E5%8A%A1%EF%BC%88FCFS%EF%BC%8CFirst-Come-First-Serve%EF%BC%89\"><span class=\"toc-text\">1.先来先服务（FCFS，First Come First Serve）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E7%9F%AD%E4%BD%9C%E4%B8%9A%E4%BC%98%E5%85%88%EF%BC%88SJF%EF%BC%8CShortest-Job-First%EF%BC%89\"><span class=\"toc-text\">2.短作业优先（SJF，Shortest Job First）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E9%AB%98%E5%93%8D%E5%BA%94%E6%AF%94%E4%BC%98%E5%85%88%EF%BC%88HRRN%EF%BC%8CHighest-Response-Ratio-Next%EF%BC%89\"><span class=\"toc-text\">3.高响应比优先（HRRN，Highest Response Ratio Next）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E4%B8%89%E7%A7%8D%E7%AE%97%E6%B3%95%E5%AF%B9%E6%AF%94\"><span class=\"toc-text\">4.三种算法对比</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95%EF%BC%882%EF%BC%89\"><span class=\"toc-text\">11.调度算法（2）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E6%97%B6%E9%97%B4%E7%89%87%E8%BD%AE%E8%BD%AC%E8%B0%83%E5%BA%A6%EF%BC%88RR%EF%BC%8CRound-Robin%EF%BC%89\"><span class=\"toc-text\">1.时间片轮转调度（RR，Round-Robin）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E4%BC%98%E5%85%88%E7%BA%A7%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">2.优先级调度算法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E5%A4%9A%E7%BA%A7%E5%8F%8D%E9%A6%88%E9%98%9F%E5%88%97%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">3.多级反馈队列调度算法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">4.总结</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#12-%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5%E4%B8%8E%E8%BF%9B%E7%A8%8B%E4%BA%92%E6%96%A5\"><span class=\"toc-text\">12.进程同步与进程互斥</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5\"><span class=\"toc-text\">1.进程同步</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E8%BF%9B%E7%A8%8B%E4%BA%92%E6%96%A5\"><span class=\"toc-text\">2.进程互斥</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#13-%E8%BF%9B%E7%A8%8B%E4%BA%92%E6%96%A5%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">13.进程互斥的软件实现方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E5%8D%95%E6%A0%87%E5%BF%97%E6%B3%95\"><span class=\"toc-text\">1.单标志法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E5%8F%8C%E6%A0%87%E5%BF%97%E5%85%88%E6%A3%80%E6%9F%A5%E6%B3%95\"><span class=\"toc-text\">2.双标志先检查法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E5%8F%8C%E6%A0%87%E5%BF%97%E5%90%8E%E6%A3%80%E6%9F%A5%E6%B3%95\"><span class=\"toc-text\">3.双标志后检查法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-Peterson-%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">4.Peterson 算法</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#14-%E8%BF%9B%E7%A8%8B%E4%BA%92%E6%96%A5%E7%9A%84%E7%A1%AC%E4%BB%B6%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">14.进程互斥的硬件实现方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E4%B8%AD%E6%96%AD%E5%B1%8F%E8%94%BD%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">1.中断屏蔽方法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-TestAndSet-%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">2.TestAndSet 指令</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-Swap-%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">3.Swap 指令</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#15-%E4%BF%A1%E5%8F%B7%E9%87%8F%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">15.信号量机制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E4%BB%80%E4%B9%88%E6%98%AF%E4%BF%A1%E5%8F%B7%E9%87%8F\"><span class=\"toc-text\">1.什么是信号量</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E6%95%B4%E5%9E%8B%E4%BF%A1%E5%8F%B7%E9%87%8F\"><span class=\"toc-text\">2.整型信号量</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E8%AE%B0%E5%BD%95%E5%9E%8B%E4%BF%A1%E5%8F%B7%E9%87%8F\"><span class=\"toc-text\">3.记录型信号量</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#16-%E7%94%A8%E4%BF%A1%E5%8F%B7%E9%87%8F%E5%AE%9E%E7%8E%B0%E8%BF%9B%E7%A8%8B%E4%BA%92%E6%96%A5%EF%BC%8C%E5%90%8C%E6%AD%A5%EF%BC%8C%E5%89%8D%E9%A9%B1%E5%85%B3%E7%B3%BB\"><span class=\"toc-text\">16.用信号量实现进程互斥，同步，前驱关系</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E4%BF%A1%E5%8F%B7%E9%87%8F%E6%9C%BA%E5%88%B6%E5%AE%9E%E7%8E%B0%E8%BF%9B%E7%A8%8B%E4%BA%92%E6%96%A5\"><span class=\"toc-text\">1.信号量机制实现进程互斥</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E4%BF%A1%E5%8F%B7%E9%87%8F%E6%9C%BA%E5%88%B6%E5%AE%9E%E7%8E%B0%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5\"><span class=\"toc-text\">2.信号量机制实现进程同步</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E4%BF%A1%E5%8F%B7%E9%87%8F%E6%9C%BA%E5%88%B6%E5%AE%9E%E7%8E%B0%E5%89%8D%E9%A9%B1%E5%85%B3%E7%B3%BB\"><span class=\"toc-text\">3.信号量机制实现前驱关系</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#17-%E7%94%9F%E4%BA%A7%E8%80%85%E2%80%94%E2%80%94%E6%B6%88%E8%B4%B9%E8%80%85%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">17.生产者——消费者问题</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E9%97%AE%E9%A2%98%E6%8F%8F%E8%BF%B0\"><span class=\"toc-text\">1.问题描述</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90\"><span class=\"toc-text\">2.问题分析</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">3.如何实现</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E8%83%BD%E5%A4%9F%E6%94%B9%E5%8F%98%E7%9B%B8%E9%82%BB-P%EF%BC%8CV-%E7%9A%84%E9%A1%BA%E5%BA%8F\"><span class=\"toc-text\">4.能够改变相邻 P，V 的顺序</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#18-%E5%A4%9A%E7%94%9F%E4%BA%A7%E8%80%85%E2%80%94%E2%80%94%E5%A4%9A%E6%B6%88%E8%B4%B9%E8%80%85\"><span class=\"toc-text\">18.多生产者——多消费者</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E9%97%AE%E9%A2%98%E6%8F%8F%E8%BF%B0-1\"><span class=\"toc-text\">1.问题描述</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">2.如何实现</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">3.总结</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#19-%E5%90%B8%E7%83%9F%E8%80%85%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">19.吸烟者问题</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E9%97%AE%E9%A2%98%E6%8F%8F%E8%BF%B0-2\"><span class=\"toc-text\">1.问题描述</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3\"><span class=\"toc-text\">2.如何解决</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#20-%E8%AF%BB%E8%80%85%E2%80%94%E2%80%94%E5%86%99%E8%80%85%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">20.读者——写者问题</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E9%97%AE%E9%A2%98%E6%8F%8F%E8%BF%B0-3\"><span class=\"toc-text\">1.问题描述</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0-1\"><span class=\"toc-text\">2.如何实现</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E6%80%BB%E7%BB%93-1\"><span class=\"toc-text\">3.总结</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#21-%E5%93%B2%E5%AD%A6%E5%AE%B6%E5%90%83%E9%A5%AD\"><span class=\"toc-text\">21.哲学家吃饭</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E9%97%AE%E9%A2%98%E6%8F%8F%E8%BF%B0-4\"><span class=\"toc-text\">1.问题描述</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90-1\"><span class=\"toc-text\">2.问题分析</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0-1\"><span class=\"toc-text\">3.如何实现</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#22-%E7%AE%A1%E7%A8%8B\"><span class=\"toc-text\">22.管程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BC%95%E5%85%A5%E7%AE%A1%E7%A8%8B%EF%BC%9F\"><span class=\"toc-text\">1. 为什么引入管程？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E7%AE%A1%E7%A8%8B%E7%9A%84%E5%AE%9A%E4%B9%89%E5%92%8C%E5%9F%BA%E6%9C%AC%E7%89%B9%E5%BE%81\"><span class=\"toc-text\">2.管程的定义和基本特征</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-java-%E4%B8%AD%E7%B1%BB%E4%BC%BC%E4%BA%8E%E7%AE%A1%E7%A8%8B%E7%9A%84%E6%9C%BA%E5%88%B6%EF%BC%88%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%EF%BC%89\"><span class=\"toc-text\">3.java 中类似于管程的机制（单例模式）</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#23-%E6%AD%BB%E9%94%81\"><span class=\"toc-text\">23.死锁</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E5%90%AB%E4%B9%89-1\"><span class=\"toc-text\">1.含义</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E6%AD%BB%E9%94%81%EF%BC%8C%E9%A5%A5%E9%A5%BF%EF%BC%8C%E6%AD%BB%E5%BE%AA%E7%8E%AF%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">2.死锁，饥饿，死循环的区别</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E6%AD%BB%E9%94%81%E4%BA%A7%E7%94%9F%E7%9A%84%E5%BF%85%E8%A6%81%E6%9D%A1%E4%BB%B6\"><span class=\"toc-text\">3.死锁产生的必要条件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E5%8F%91%E7%94%9F%E6%AD%BB%E9%94%81\"><span class=\"toc-text\">4.什么时候会发生死锁</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-%E6%AD%BB%E9%94%81%E7%9A%84%E5%A4%84%E7%90%86%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">5.死锁的处理策略</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#24-%E9%A2%84%E9%98%B2%E6%AD%BB%E9%94%81\"><span class=\"toc-text\">24.预防死锁</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#25-%E9%81%BF%E5%85%8D%E6%AD%BB%E9%94%81\"><span class=\"toc-text\">25.避免死锁</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#11-%E4%BB%80%E4%B9%88%E6%98%AF%E5%AE%89%E5%85%A8%E5%BA%8F%E5%88%97\"><span class=\"toc-text\">11.什么是安全序列</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E9%93%B6%E8%A1%8C%E5%AE%B6%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">2.银行家算法</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#26-%E6%AD%BB%E9%94%81%E7%9A%84%E6%A3%80%E6%B5%8B%E5%92%8C%E8%A7%A3%E9%99%A4\"><span class=\"toc-text\">26.死锁的检测和解除</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E6%AD%BB%E9%94%81%E7%9A%84%E6%A3%80%E6%B5%8B\"><span class=\"toc-text\">1.死锁的检测</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E6%AD%BB%E9%94%81%E7%9A%84%E8%A7%A3%E9%99%A4\"><span class=\"toc-text\">2.死锁的解除</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">3.内存管理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86\"><span class=\"toc-text\">1.基础知识</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">2.内存管理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E8%A6%86%E7%9B%96%E5%92%8C%E4%BA%A4%E6%8D%A2\"><span class=\"toc-text\">3.覆盖和交换</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E8%A6%86%E7%9B%96%E6%8A%80%E6%9C%AF\"><span class=\"toc-text\">1.覆盖技术</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E4%BA%A4%E6%8D%A2%E6%8A%80%E6%9C%AF\"><span class=\"toc-text\">2.交换技术</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E8%BF%9E%E7%BB%AD%E5%88%86%E9%85%8D%E7%AE%A1%E7%90%86%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">4.连续分配管理方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E5%8D%95%E4%B8%80%E8%BF%9E%E7%BB%AD%E5%88%86%E9%85%8D\"><span class=\"toc-text\">1.单一连续分配</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E5%9B%BA%E5%AE%9A%E5%88%86%E5%8C%BA%E5%88%86%E9%85%8D\"><span class=\"toc-text\">2.固定分区分配</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E5%8A%A8%E6%80%81%E5%88%86%E5%8C%BA%E5%88%86%E9%85%8D\"><span class=\"toc-text\">3.动态分区分配</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E5%86%85%E9%83%A8%E7%A2%8E%E7%89%87%E5%92%8C%E5%A4%96%E9%83%A8%E7%A2%8E%E7%89%87\"><span class=\"toc-text\">4.内部碎片和外部碎片</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E5%8A%A8%E6%80%81%E5%88%86%E5%8C%BA%E5%88%86%E9%85%8D%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">5.动态分区分配算法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E9%A6%96%E6%AC%A1%E9%80%82%E5%BA%94%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">1.首次适应算法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E6%9C%80%E4%BD%B3%E9%80%82%E5%BA%94%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">2.最佳适应算法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E6%9C%80%E5%A4%A7%E9%80%82%E5%BA%94%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">3.最大适应算法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E4%B8%B4%E8%BF%91%E9%80%82%E5%BA%94%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">4.临近适应算法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-%E5%9B%9B%E7%A7%8D%E7%AE%97%E6%B3%95%E5%AF%B9%E6%AF%94\"><span class=\"toc-text\">5.四种算法对比</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E5%9F%BA%E6%9C%AC%E5%88%86%E9%A1%B5%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">6.基本分页存储管理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-%E5%9F%BA%E6%9C%AC%E5%9C%B0%E5%9D%80%E5%8F%98%E6%8D%A2%E6%9C%BA%E6%9E%84\"><span class=\"toc-text\">7.基本地址变换机构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-%E5%85%B7%E6%9C%89%E5%BF%AB%E8%A1%A8%E7%9A%84%E5%9C%B0%E5%9D%80%E5%8F%98%E6%8D%A2%E6%9C%BA%E6%9E%84\"><span class=\"toc-text\">8.具有快表的地址变换机构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E5%B1%80%E9%83%A8%E6%80%A7%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">1.局部性原理</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E5%BF%AB%E8%A1%A8\"><span class=\"toc-text\">2.快表</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9-%E4%B8%A4%E7%BA%A7%E9%A1%B5%E8%A1%A8\"><span class=\"toc-text\">9.两级页表</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98%E4%B8%80\"><span class=\"toc-text\">1.解决问题一</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98%E4%BA%8C\"><span class=\"toc-text\">2.解决问题二</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E5%85%B6%E4%BB%96%E7%BB%86%E8%8A%82\"><span class=\"toc-text\">3. 其他细节</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-%E5%9F%BA%E6%9C%AC%E5%88%86%E6%AE%B5%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">10.基本分段存储管理方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E5%88%86%E6%AE%B5\"><span class=\"toc-text\">1.分段</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E6%AE%B5%E8%A1%A8\"><span class=\"toc-text\">2.段表</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E6%AE%B5%E5%86%85%E5%AF%BB%E5%9D%80\"><span class=\"toc-text\">3.段内寻址</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E5%88%86%E6%AE%B5%EF%BC%8C%E5%88%86%E9%A1%B5%E5%AF%B9%E6%AF%94\"><span class=\"toc-text\">4.分段，分页对比</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-%E6%AE%B5%E9%A1%B5%E5%BC%8F%E7%AE%A1%E7%90%86%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">11.段页式管理方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E5%88%86%E9%A1%B5%EF%BC%8C%E5%88%86%E6%AE%B5%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9\"><span class=\"toc-text\">1.分页，分段的优缺点</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E6%AE%B5%E9%A1%B5%E5%BC%8F%E7%AE%A1%E7%90%86%E7%9A%84%E9%80%BB%E8%BE%91%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">2.段页式管理的逻辑结构</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E6%AE%B5%E5%86%85%E5%AF%BB%E5%9D%80-1\"><span class=\"toc-text\">3.段内寻址</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#12-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98\"><span class=\"toc-text\">12.虚拟内存</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E4%BC%A0%E7%BB%9F%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86%E6%96%B9%E5%BC%8F%E7%9A%84%E7%89%B9%E5%BE%81%E5%92%8C%E7%BC%BA%E7%82%B9\"><span class=\"toc-text\">1.传统存储管理方式的特征和缺点</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%E7%9A%84%E5%AE%9A%E4%B9%89%E5%92%8C%E7%89%B9%E5%BE%81\"><span class=\"toc-text\">2.虚拟内存的定义和特征</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#13-%E8%AF%B7%E6%B1%82%E5%88%86%E9%A1%B5%E7%AE%A1%E7%90%86%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">13.请求分页管理方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E9%A1%B5%E8%A1%A8%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">1.页表机制</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E7%BC%BA%E9%A1%B5%E4%B8%AD%E6%96%AD%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">2.缺页中断机制</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E5%9C%B0%E5%9D%80%E5%8F%98%E6%8D%A2\"><span class=\"toc-text\">3.地址变换</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86%E7%82%B9\"><span class=\"toc-text\">4.补充知识点</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#14-%E9%A1%B5%E9%9D%A2%E7%BD%AE%E6%8D%A2%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">14.页面置换算法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E6%9C%80%E4%BD%B3%E7%BD%AE%E6%8D%A2%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">1.最佳置换算法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E5%85%88%E8%BF%9B%E5%85%88%E5%87%BA%E7%BD%AE%E6%8D%A2%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">2.先进先出置换算法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E6%9C%80%E8%BF%91%E6%9C%80%E4%B9%85%E6%9C%AA%E4%BD%BF%E7%94%A8%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">3.最近最久未使用算法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E6%97%B6%E9%92%9F%E7%BD%AE%E6%8D%A2%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">4.时钟置换算法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-%E6%94%B9%E8%BF%9B%E5%9E%8B%E7%9A%84%E6%97%B6%E9%92%9F%E7%BD%AE%E6%8D%A2%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">5.改进型的时钟置换算法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-%E4%BA%94%E7%A7%8D%E7%AE%97%E6%B3%95%E5%AF%B9%E6%AF%94\"><span class=\"toc-text\">6.五种算法对比</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#15-%E9%A1%B5%E9%9D%A2%E5%88%86%E9%85%8D%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">15.页面分配策略</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E9%A1%B5%E9%9D%A2%E5%88%86%E9%85%8D%EF%BC%8C%E7%BD%AE%E6%8D%A2%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">1.页面分配，置换策略</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E4%BD%95%E6%97%B6%E8%B0%83%E5%85%A5%E9%A1%B5%E9%9D%A2\"><span class=\"toc-text\">2.何时调入页面</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E4%BB%8E%E4%BD%95%E5%A4%84%E8%B0%83%E5%85%A5%E9%A1%B5%E9%9D%A2\"><span class=\"toc-text\">3.从何处调入页面</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E6%8A%96%E5%8A%A8%EF%BC%88%E9%A2%A0%E7%B0%B8%EF%BC%89%E7%8E%B0%E8%B1%A1%EF%BC%8C%E5%B7%A5%E4%BD%9C%E9%9B%86\"><span class=\"toc-text\">4.抖动（颠簸）现象，工作集</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\">4.文件系统</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">1.文件管理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E6%96%87%E4%BB%B6%E7%9A%84%E9%80%BB%E8%BE%91%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">2.文件的逻辑结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E9%A1%BA%E5%BA%8F%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">1.顺序文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E7%B4%A2%E5%BC%95%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">2.索引文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E7%B4%A2%E5%BC%95%E9%A1%BA%E5%BA%8F%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">3.索引顺序文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E5%A4%9A%E7%BA%A7%E7%B4%A2%E5%BC%95%E9%A1%BA%E5%BA%8F%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">4.多级索引顺序文件</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95\"><span class=\"toc-text\">3.文件目录</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E6%96%87%E4%BB%B6%E6%8E%A7%E5%88%B6%E5%9D%97%EF%BC%88FCB%EF%BC%89\"><span class=\"toc-text\">1.文件控制块（FCB）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E5%8D%95%E7%BA%A7%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">2.单级目录结构</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E4%BA%8C%E7%BA%A7%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">3.二级目录结构</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E5%A4%9A%E7%BA%A7%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%EF%BC%88%E6%A0%91%E5%BD%A2%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%EF%BC%89\"><span class=\"toc-text\">4.多级目录结构（树形目录结构）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-%E6%97%A0%E7%8E%AF%E5%9B%BE%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">5.无环图目录结构</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-%E7%B4%A2%E5%BC%95%E7%BB%93%E7%82%B9%EF%BC%88%E5%AF%B9-FCB-%E7%9A%84%E6%94%B9%E8%BF%9B%EF%BC%89\"><span class=\"toc-text\">6.索引结点（对 FCB 的改进）</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%96%87%E4%BB%B6%E5%88%86%E9%85%8D%E6%96%B9%E5%BC%8F%EF%BC%88%E6%96%87%E4%BB%B6%E7%89%A9%E7%90%86%E7%BB%93%E6%9E%84%EF%BC%89\"><span class=\"toc-text\">4.文件分配方式（文件物理结构）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E8%BF%9E%E7%BB%AD%E5%88%86%E9%85%8D\"><span class=\"toc-text\">1.连续分配</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E9%93%BE%E6%8E%A5%E5%88%86%E9%85%8D%E2%80%94%E2%80%94%E9%9A%90%E5%BC%8F%E9%93%BE%E6%8E%A5\"><span class=\"toc-text\">2.链接分配——隐式链接</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E9%93%BE%E6%8E%A5%E5%88%86%E9%85%8D%E2%80%94%E2%80%94%E6%98%BE%E5%BC%8F%E9%93%BE%E6%8E%A5\"><span class=\"toc-text\">3.链接分配——显式链接</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E4%B8%A4%E7%A7%8D%E9%93%BE%E6%8E%A5%E5%88%86%E9%85%8D%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">4.两种链接分配方式总结</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-%E7%B4%A2%E5%BC%95%E5%88%86%E9%85%8D\"><span class=\"toc-text\">5.索引分配</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-%E4%B8%89%E7%A7%8D%E5%88%86%E9%85%8D%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">6.三种分配方式总结</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E5%AF%B9%E7%A9%BA%E9%97%B2%E7%A3%81%E7%9B%98%E5%9D%97%E7%9A%84%E7%AE%A1%E7%90%86%EF%BC%88%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86%EF%BC%89\"><span class=\"toc-text\">5.对空闲磁盘块的管理（文件存储空间管理）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E6%96%87%E4%BB%B6%E5%8D%B7\"><span class=\"toc-text\">1.文件卷</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E7%A9%BA%E9%97%B2%E8%A1%A8%E6%B3%95\"><span class=\"toc-text\">2.空闲表法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E7%A9%BA%E9%97%B2%E9%93%BE%E8%A1%A8%E6%B3%95\"><span class=\"toc-text\">3.空闲链表法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-%E7%A9%BA%E9%97%B2%E7%9B%98%E5%9D%97%E9%93%BE\"><span class=\"toc-text\">1.空闲盘块链</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-%E7%A9%BA%E9%97%B2%E7%9B%98%E5%8C%BA%E9%93%BE\"><span class=\"toc-text\">2.空闲盘区链</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E4%BD%8D%E7%A4%BA%E5%9B%BE%E6%B3%95\"><span class=\"toc-text\">4.位示图法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-%E6%88%90%E7%BB%84%E9%93%BE%E6%8E%A5%E6%B3%95\"><span class=\"toc-text\">5.成组链接法</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E6%96%87%E4%BB%B6%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">6.文件的基本操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">1.创建文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">2.删除文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">3.打开文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E5%85%B3%E9%97%AD%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">4.关闭文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-%E8%AF%BB%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">5.读文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-%E5%86%99%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">6.写文件</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB\"><span class=\"toc-text\">7.文件共享</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E5%9F%BA%E4%BA%8E%E7%B4%A2%E5%BC%95%E8%8A%82%E7%82%B9%E7%9A%84%E5%85%B1%E4%BA%AB%E6%96%B9%E5%BC%8F%EF%BC%88%E7%A1%AC%E9%93%BE%E6%8E%A5%EF%BC%89\"><span class=\"toc-text\">1.基于索引节点的共享方式（硬链接）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E5%9F%BA%E4%BA%8E%E7%AC%A6%E5%8F%B7%E9%93%BE%E7%9A%84%E5%85%B1%E4%BA%AB%E6%96%B9%E5%BC%8F%EF%BC%88%E8%BD%AF%E9%93%BE%E6%8E%A5%EF%BC%89\"><span class=\"toc-text\">2.基于符号链的共享方式（软链接）</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-%E6%96%87%E4%BB%B6%E4%BF%9D%E6%8A%A4\"><span class=\"toc-text\">8.文件保护</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E5%8F%A3%E4%BB%A4%E4%BF%9D%E6%8A%A4\"><span class=\"toc-text\">1.口令保护</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E5%8A%A0%E5%AF%86%E4%BF%9D%E6%8A%A4\"><span class=\"toc-text\">2.加密保护</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">3.访问控制</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E6%80%BB%E7%BB%93-1\"><span class=\"toc-text\">4.总结</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#9-%E6%96%87%E4%BB%B6%E7%9A%84%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">9.文件的层次结构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#10-%E7%A3%81%E7%9B%98%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">10.磁盘结构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#11-%E7%A3%81%E7%9B%98%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">11.磁盘调度算法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E4%B8%80%E6%AC%A1%E7%A3%81%E7%9B%98%E8%AF%BB-%E5%86%99%E6%93%8D%E4%BD%9C%E9%9C%80%E8%A6%81%E7%9A%84%E6%97%B6%E9%97%B4\"><span class=\"toc-text\">1.一次磁盘读&#x2F;写操作需要的时间</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E5%85%88%E6%9D%A5%E5%85%88%E6%9C%8D%E5%8A%A1%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">2.先来先服务算法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E6%9C%80%E7%9F%AD%E5%AF%BB%E6%89%BE%E6%97%B6%E9%97%B4%E4%BC%98%E5%85%88%EF%BC%88SSTF%EF%BC%89\"><span class=\"toc-text\">3. 最短寻找时间优先（SSTF）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E6%89%AB%E6%8F%8F%E7%AE%97%E6%B3%95%EF%BC%88SCAN%EF%BC%89\"><span class=\"toc-text\">4.扫描算法（SCAN）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-LOOK-%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">5.LOOK 调度算法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-%E5%BE%AA%E7%8E%AF%E6%89%AB%E6%8F%8F%E7%AE%97%E6%B3%95%EF%BC%88C%E2%80%94SCAN%EF%BC%89\"><span class=\"toc-text\">6.循环扫描算法（C—SCAN）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-C-LOOK-%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">7.C-LOOK 调度算法</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#12-%E5%87%8F%E5%B0%91%E5%BB%B6%E8%BF%9F%E6%97%B6%E9%97%B4%E7%9A%84%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">12.减少延迟时间的方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E4%BA%A4%E6%9B%BF%E7%BC%96%E5%8F%B7\"><span class=\"toc-text\">1.交替编号</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E7%A3%81%E7%9B%98%E5%9C%B0%E5%9D%80%E7%BB%93%E6%9E%84%E7%9A%84%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">2.磁盘地址结构的设计</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E9%94%99%E4%BD%8D%E5%91%BD%E5%90%8D\"><span class=\"toc-text\">3.错位命名</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#13-%E7%A3%81%E7%9B%98%E7%9A%84%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">13.磁盘的管理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E7%A3%81%E7%9B%98%E5%88%9D%E5%A7%8B%E5%8C%96\"><span class=\"toc-text\">1.磁盘初始化</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E5%BC%95%E5%AF%BC%E5%9D%97\"><span class=\"toc-text\">2.引导块</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E5%9D%8F%E5%9D%97%E7%9A%84%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">3.坏块的管理</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-I-O-%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">5.I&#x2F;O 管理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-I-O-%E8%AE%BE%E5%A4%87%E7%9A%84%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">1.I&#x2F;O 设备的概念</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-I-O-%E6%8E%A7%E5%88%B6%E5%99%A8\"><span class=\"toc-text\">2.I&#x2F;O 控制器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E5%90%AB%E4%B9%89-2\"><span class=\"toc-text\">1.含义</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">2.功能</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E7%BB%84%E6%88%90\"><span class=\"toc-text\">3.组成</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-I-O-%E6%8E%A7%E5%88%B6%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">3.I&#x2F;O 控制方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E7%A8%8B%E5%BA%8F%E7%9B%B4%E6%8E%A5%E6%8E%A7%E5%88%B6%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">1.程序直接控制方式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E4%B8%AD%E6%96%AD%E9%A9%B1%E5%8A%A8%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">2.中断驱动方式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-DMA-%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">3.DMA 方式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E9%80%9A%E9%81%93%E6%8E%A7%E5%88%B6%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">4.通道控制方式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">5.四种方式总结</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-I-O-%E8%BD%AF%E4%BB%B6%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">4.I&#x2F;O 软件层次结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E7%9F%A5%E8%AF%86%E6%80%BB%E8%A7%88\"><span class=\"toc-text\">1.知识总览</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E7%94%A8%E6%88%B7%E5%B1%82%E8%BD%AF%E4%BB%B6\"><span class=\"toc-text\">2.用户层软件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E8%AE%BE%E5%A4%87%E7%8B%AC%E7%AB%8B%E6%80%A7%E8%BD%AF%E4%BB%B6\"><span class=\"toc-text\">3.设备独立性软件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E9%A9%B1%E5%8A%A8%E8%AE%BE%E5%A4%87\"><span class=\"toc-text\">4.驱动设备</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-%E4%B8%AD%E6%96%AD%E5%A4%84%E7%90%86%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\">5.中断处理程序</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">6.总结</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-I-O-%E6%A0%B8%E5%BF%83%E5%AD%90%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\">5.I&#x2F;O 核心子系统</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E7%9F%A5%E8%AF%86%E6%80%BB%E8%A7%88-1\"><span class=\"toc-text\">1.知识总览</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-I-O-%E8%B0%83%E5%BA%A6\"><span class=\"toc-text\">2.I&#x2F;O 调度</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E8%AE%BE%E5%A4%87%E4%BF%9D%E6%8A%A4\"><span class=\"toc-text\">3.设备保护</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E5%81%87%E8%84%B1%E6%9C%BA%E6%8A%80%E6%9C%AF%EF%BC%88SPOOLing-%E6%8A%80%E6%9C%AF%EF%BC%89\"><span class=\"toc-text\">6.假脱机技术（SPOOLing 技术）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E8%84%B1%E6%9C%BA%E6%8A%80%E6%9C%AF\"><span class=\"toc-text\">1.脱机技术</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E5%81%87%E8%84%B1%E6%9C%BA%E6%8A%80%E6%9C%AF\"><span class=\"toc-text\">2.假脱机技术</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-%E8%AE%BE%E5%A4%87%E7%9A%84%E5%88%86%E9%85%8D%E5%92%8C%E5%9B%9E%E6%94%B6\"><span class=\"toc-text\">7.设备的分配和回收</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E7%9F%A5%E8%AF%86%E6%80%BB%E8%A7%88-2\"><span class=\"toc-text\">1.知识总览</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E8%AE%BE%E5%A4%87%E5%88%86%E9%85%8D%E6%97%B6%E8%80%83%E8%99%91%E7%9A%84%E5%9B%A0%E7%B4%A0\"><span class=\"toc-text\">2.设备分配时考虑的因素</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-%E5%9B%BA%E6%9C%89%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">1.固有属性</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-%E5%88%86%E9%85%8D%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">2.分配算法</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-%E5%AE%89%E5%85%A8%E6%80%A7\"><span class=\"toc-text\">3.安全性</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E9%9D%99%E6%80%81%E5%88%86%E9%85%8D%E5%92%8C%E5%8A%A8%E6%80%81%E5%88%86%E9%85%8D\"><span class=\"toc-text\">3.静态分配和动态分配</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E8%AE%BE%E5%A4%87%E5%88%86%E9%85%8D%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">4.设备分配中的数据结构</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-%E8%AE%BE%E5%A4%87%E5%88%86%E9%85%8D%E7%9A%84%E6%AD%A5%E9%AA%A4\"><span class=\"toc-text\">5.设备分配的步骤</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-%E8%AE%BE%E5%A4%87%E5%88%86%E9%85%8D%E6%AD%A5%E9%AA%A4%E7%9A%84%E6%94%B9%E8%BF%9B\"><span class=\"toc-text\">6.设备分配步骤的改进</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-%E7%BC%93%E5%86%B2%E5%8C%BA%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">8.缓冲区管理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E7%9F%A5%E8%AF%86%E6%80%BB%E8%A7%88-3\"><span class=\"toc-text\">1.知识总览</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E5%90%AB%E4%B9%89%E5%92%8C%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">2.含义和作用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E5%8D%95%E7%BC%93%E5%86%B2\"><span class=\"toc-text\">3.单缓冲</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E5%8F%8C%E7%BC%93%E5%86%B2\"><span class=\"toc-text\">4.双缓冲</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-%E5%BE%AA%E7%8E%AF%E7%BC%93%E5%86%B2%E5%8C%BA\"><span class=\"toc-text\">5.循环缓冲区</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-%E7%BC%93%E5%86%B2%E6%B1%A0\"><span class=\"toc-text\">6.缓冲池</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"三钻","slug":"blog-author","avatar":"https://ik.imagekit.io/bennyxguo/ObsidianestLogo-hex_hecqbw.png?updatedAt=1692679397324","link":"/","description":"<p>Programming a piece of art.</p> <p>用<b>匠人精神</b>开发出<b>艺术</b>。</p>","socials":{"github":"https://github.com/bennyxguo","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/TriDiamond6","juejin":"https://juejin.cn/user/1873223546578589","customs":{"bilibili":{"icon":"https://tridiamond.tech/svg/bilibili.svg","link":"https://live.bilibili.com/22619211"}}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{"title":"Aurora 自定义容器（Custom Containers）","uid":"b695af22372019b5213d1466cd06b4ba","slug":"b695af22372019b5213d1466cd06b4ba","date":"2021-05-02T15:19:24.000Z","updated":"2023-09-16T18:15:22.700Z","comments":true,"path":"api/articles/b695af22372019b5213d1466cd06b4ba.json","keywords":null,"cover":"https://source.unsplash.com/ukzHlkoz1IE/1200x628","text":"Aurora 添加了与 VuePress 一样的自定义容器, 包括提示 (tip)、注意 (warning)、特别注意 (danger) 和隐藏内容 (details)...","permalink":"/post/b695af22372019b5213d1466cd06b4ba","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"Aurora","slug":"Aurora","count":1,"path":"api/categories/Aurora.json"}],"tags":[{"name":"aurora","slug":"aurora","count":1,"path":"api/tags/aurora.json"},{"name":"project-blog","slug":"project-blog","count":1,"path":"api/tags/project-blog.json"}],"author":{"name":"三钻","slug":"blog-author","avatar":"https://ik.imagekit.io/bennyxguo/ObsidianestLogo-hex_hecqbw.png?updatedAt=1692679397324","link":"/","description":"<p>Programming a piece of art.</p> <p>用<b>匠人精神</b>开发出<b>艺术</b>。</p>","socials":{"github":"https://github.com/bennyxguo","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/TriDiamond6","juejin":"https://juejin.cn/user/1873223546578589","customs":{"bilibili":{"icon":"https://tridiamond.tech/svg/bilibili.svg","link":"https://live.bilibili.com/22619211"}}}},"feature":true}}