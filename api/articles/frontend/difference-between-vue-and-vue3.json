{"title":"带你体验Vue2和Vue3开发组件有什么区别","uid":"3d6151b8bdfcae4be7bfdc3647f80109","slug":"frontend/difference-between-vue-and-vue3","date":"2020-03-08T21:59:18.000Z","updated":"2023-08-09T22:59:53.718Z","comments":true,"path":"api/articles/frontend/difference-between-vue-and-vue3.json","keywords":null,"cover":"https://source.unsplash.com/m_HRfLhgABo/1200x628","content":"<p>我们一直都有关注和阅读很多关于 Vue3 的新特性和功能即将到来。但是我们没有一个具体的概念在开发中会有如何的改变和不一样的体验。还有一些童鞋已经开始又慌又抓狂了 – “又要开始学新的写法了 (ノ ToT )ノ ~┻┻”。</p>\n<p>所以这里我使用 Vue2 和 Vue3 开发一个简单的表格组件来展示一下 Vue2 和 Vue3 开发组件的区别。看完这片文章后，你将会有一个概念 Vue2 和 Vue3 开发组件时的区别，并且为 Vue3 的开发之路做好准备。ღ(◔ڼ◔ღ)ミ</p>\n<p>废话少说，让我们开始吧～ (๑ •̀ㅂ•́)و✧</p>\n<hr>\n<h1 id=\"创建一个-template\"><a href=\"#创建一个-template\" class=\"headerlink\" title=\"创建一个 template\"></a>创建一个 <code>template</code></h1><p>组件来说，大多代码在 Vue2 和 Vue3 都<strong>非常相似</strong>。Vue3 支持<code>碎片(Fragments)</code>，就是说在组件可以拥有多个根节点。</p>\n<p>这种新特性可以减少很多组件之间的<code>div</code>包裹元素。在开发 vue 的时候，我们会发现每一个组件都会有个<code>div</code>元素包裹着。就会出现很多层多余的<code>div</code>元素。<code>碎片(Fragments)</code>解决了这个问题。对于有完美强迫症的童鞋“真的时太棒了”。我们这里的例子里就不展示了，用简单的单根节点的组件。</p>\n<p><strong>Vue2 表格 template</strong></p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;form-element&quot;&gt;\n    &lt;h2&gt;&#123;&#123; title &#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;username&quot; placeholder&#x3D;&quot;Username&quot; &#x2F;&gt;\n\n    &lt;input type&#x3D;&quot;password&quot; v-model&#x3D;&quot;password&quot; placeholder&#x3D;&quot;Password&quot; &#x2F;&gt;\n\n    &lt;button @click&#x3D;&quot;login&quot;&gt;Submit&lt;&#x2F;button&gt;\n    &lt;p&gt;Values: &#123;&#123; username + &#39; &#39; + password &#125;&#125;&lt;&#x2F;p&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;</code></pre>\n\n<p>在 Vue3 的唯一真正的不同在于数据获取。Vue3 中的<code>反应数据（Reactive Data）</code>是包含在一个<code>反应状态（Reactive State）</code>变量中。— 所以我们需要访问这个反应状态来获取数据值。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;form-element&quot;&gt;\n    &lt;h2&gt;&#123;&#123; state.title &#125;&#125;&lt;&#x2F;h2&gt;\n    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;state.username&quot; placeholder&#x3D;&quot;Username&quot; &#x2F;&gt;\n\n    &lt;input type&#x3D;&quot;password&quot; v-model&#x3D;&quot;state.password&quot; placeholder&#x3D;&quot;Password&quot; &#x2F;&gt;\n\n    &lt;button @click&#x3D;&quot;login&quot;&gt;Submit&lt;&#x2F;button&gt;\n    &lt;p&gt;Values: &#123;&#123; state.username + &#39; &#39; + state.password &#125;&#125;&lt;&#x2F;p&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;</code></pre>\n\n<hr>\n<h1 id=\"建立数据-data\"><a href=\"#建立数据-data\" class=\"headerlink\" title=\"建立数据 data\"></a>建立数据 <code>data</code></h1><p><strong>这里就是 Vue2 与 Vue3 最大的区别 — Vue2 使用<code>选项类型API（Options API）</code>对比 Vue3<code>合成型API（Composition API）</code></strong></p>\n<p>旧的选项型 API 在代码里分割了不同的属性（properties）：data，computed 属性，methods，等等。新的合成型 API 能让我们用方法（function）来分割，相比于旧的 API 使用属性来分组，这样代码会更加简便和整洁。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>现在我们来对比一下 Vue2 写法和 Vue3 写法在代码里面的区别。</p></blockquote>\n<p><strong>Vue2</strong> - 这里把两个数据放入 data 属性中</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">export default &#123;\n  props: &#123;\n    title: String,\n  &#125;,\n  data() &#123;\n    return &#123;\n      username: &#39;&#39;,\n      password: &#39;&#39;,\n    &#125;\n  &#125;,\n&#125;</code></pre>\n\n<p>在<strong>Vue3.0</strong>，我们就需要使用一个新的<code>setup()</code>方法，此方法在组件初始化构造的时候触发。</p>\n<p>为了可以让开发者对反应型数据有更多的控制，我们可以直接使用到 Vue3 的<code>反应API（reactivity API）</code>。</p>\n<p>使用以下三步来建立<code>反应性数据</code>:</p>\n<ol>\n<li>从 vue 引入<code>reactive</code></li>\n<li>使用<code>reactive()</code>方法来声名我们的数据为反应性数据</li>\n<li>使用<code>setup()</code>方法来返回我们的反应性数据，从而我们的 template 可以获取这些反应性数据</li>\n</ol>\n<p>上一波代码，让大家更容易理解是怎么实现的。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; reactive &#125; from &#39;vue&#39;\n\nexport default &#123;\n  props: &#123;\n    title: String,\n  &#125;,\n  setup() &#123;\n    const state &#x3D; reactive(&#123;\n      username: &#39;&#39;,\n      password: &#39;&#39;,\n    &#125;)\n\n    return &#123; state &#125;\n  &#125;,\n&#125;</code></pre>\n\n<p>这里构造的反应性数据就可以被<code>template</code>使用，可以通过<code>state.username</code>和<code>state.password</code>获得数据的值。</p>\n<hr>\n<h1 id=\"Vue2-对比-Vue3-的-methods-编写\"><a href=\"#Vue2-对比-Vue3-的-methods-编写\" class=\"headerlink\" title=\"Vue2 对比 Vue3 的 methods 编写\"></a>Vue2 对比 Vue3 的 <code>methods</code> 编写</h1><p><strong>Vue2</strong> 的选项型 API 是把 methods 分割到独立的属性区域的。我们可以直接在这个属性里面添加方法来处理各种前端逻辑。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">export default &#123;\n  props: &#123;\n    title: String,\n  &#125;,\n  data() &#123;\n    return &#123;\n      username: &#39;&#39;,\n      password: &#39;&#39;,\n    &#125;\n  &#125;,\n  methods: &#123;\n    login() &#123;\n      &#x2F;&#x2F; 登陆方法\n    &#125;,\n  &#125;,\n&#125;</code></pre>\n\n<p><strong>Vue3</strong> 的合成型 API 里面的<code>setup()</code>方法也是可以用来操控 methods 的。创建声名方法其实和声名数据状态是一样的。— 我们需要先声名一个方法然后在<code>setup()</code>方法中<code>返回(return)</code>， 这样我们的组件内就可以调用这个方法了。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">export default &#123;\n  props: &#123;\n    title: String,\n  &#125;,\n  setup() &#123;\n    const state &#x3D; reactive(&#123;\n      username: &#39;&#39;,\n      password: &#39;&#39;,\n    &#125;)\n\n    const login &#x3D; () &#x3D;&gt; &#123;\n      &#x2F;&#x2F; 登陆方法\n    &#125;\n    return &#123;\n      login,\n      state,\n    &#125;\n  &#125;,\n&#125;</code></pre>\n\n<hr>\n<h1 id=\"生命周期钩子-—-Lifecyle-Hooks\"><a href=\"#生命周期钩子-—-Lifecyle-Hooks\" class=\"headerlink\" title=\"生命周期钩子 — Lifecyle Hooks\"></a>生命周期钩子 — <code>Lifecyle Hooks</code></h1><p>在 <strong>Vue2</strong>，我们可以直接在组件属性中调用 Vue 的生命周期的钩子。以下使用一个<code>组件已挂载（mounted）</code>生命周期触发钩子。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">export default &#123;\n  props: &#123;\n    title: String,\n  &#125;,\n  data() &#123;\n    return &#123;\n      username: &#39;&#39;,\n      password: &#39;&#39;,\n    &#125;\n  &#125;,\n  mounted() &#123;\n    console.log(&#39;组件已挂载&#39;)\n  &#125;,\n  methods: &#123;\n    login() &#123;\n      &#x2F;&#x2F; login method\n    &#125;,\n  &#125;,\n&#125;</code></pre>\n\n<p>现在 <strong>Vue3</strong> 的合成型 API 里面的<code>setup()</code>方法可以包含了基本所有东西。生命周期的钩子就是其中之一！</p>\n<p>但是在 Vue3 生周期钩子不是全局可调用的了，需要另外从 vue 中引入。和刚刚引入<code>reactive</code>一样，生命周期的挂载钩子叫<code>onMounted</code>。</p>\n<p>引入后我们就可以在<code>setup()</code>方法里面使用<code>onMounted</code>挂载的钩子了。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; reactive, onMounted &#125; from &#39;vue&#39;\n\nexport default &#123;\n  props: &#123;\n    title: String,\n  &#125;,\n  setup() &#123;\n    &#x2F;&#x2F; ..\n\n    onMounted(() &#x3D;&gt; &#123;\n      console.log(&#39;组件已挂载&#39;)\n    &#125;)\n\n    &#x2F;&#x2F; ...\n  &#125;,\n&#125;</code></pre>\n\n<hr>\n<h1 id=\"计算属性-Computed-Properties\"><a href=\"#计算属性-Computed-Properties\" class=\"headerlink\" title=\"计算属性 - Computed Properties\"></a>计算属性 - <code>Computed Properties</code></h1><p>我们一起试试添加一个计算属性来转换<code>username</code>成小写字母。</p>\n<p>在 <strong>Vue2</strong> 中实现，我们只需要在组件内的选项属性中添加即可</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">export default &#123;\n  &#x2F;&#x2F; ..\n  computed: &#123;\n    lowerCaseUsername() &#123;\n      return this.username.toLowerCase()\n    &#125;,\n  &#125;,\n&#125;</code></pre>\n\n<p><strong>Vue3</strong> 的设计模式给予开发者们按需引入需要使用的依赖包。这样一来就不需要多余的引用导致性能或者打包后太大的问题。Vue2 就是有这个一直存在的问题。</p>\n<p>所以在 Vue3 使用计算属性，我们先需要在组件内引入<code>computed</code>。</p>\n<p>使用方式就和<code>反应性数据（reactive data）</code>一样，在<code>state</code>中加入一个计算属性:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; reactive, onMounted, computed &#125; from &#39;vue&#39;\n\nexport default &#123;\n  props: &#123;\n    title: String\n  &#125;,\n  setup () &#123;\n    const state &#x3D; reactive(&#123;\n      username: &#39;&#39;,\n      password: &#39;&#39;,\n      lowerCaseUsername: computed(() &#x3D;&gt; state.username.toLowerCase())\n    &#125;)\n\n    &#x2F;&#x2F; ...\n  &#125;</code></pre>\n\n<hr>\n<h1 id=\"接收-Props\"><a href=\"#接收-Props\" class=\"headerlink\" title=\"接收 Props\"></a>接收 <code>Props</code></h1><p>接收组件<code>props</code>参数传递这一块为我们带来了 Vue2 和 Vue3 之间最大的区别。<strong>—<code>this</code>在 vue3 中与 vue2 代表着完全不一样的东西。</strong></p>\n<p>在 <strong>Vue2</strong>，<code>this</code>代表的是当前组件，不是某一个特定的属性。所以我们可以直接使用<code>this</code>访问 prop 属性值。就比如下面的例子在挂载完成后打印处当前传入组件的参数<code>title</code>。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">mounted () &#123;\n    console.log(&#39;title: &#39; + this.title)\n&#125;</code></pre>\n\n<p>但是在 <strong>Vue3</strong> 中，<code>this</code>无法直接拿到 props 属性，emit events（触发事件）和组件内的其他属性。不过全新的<code>setup()</code>方法可以接收两个参数：</p>\n<ol>\n<li><code>props</code> - 不可变的组件参数</li>\n<li><code>context</code> - Vue3 暴露出来的属性（emit，slots，attrs）</li>\n</ol>\n<p>所以在 Vue3 接收与使用 props 就会变成这样：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">setup (props) &#123;\n    &#x2F;&#x2F; ...\n\n    onMounted(() &#x3D;&gt; &#123;\n      console.log(&#39;title: &#39; + props.title)\n    &#125;)\n\n    &#x2F;&#x2F; ...\n&#125;</code></pre>\n\n<hr>\n<h1 id=\"事件-Emitting-Events\"><a href=\"#事件-Emitting-Events\" class=\"headerlink\" title=\"事件 - Emitting Events\"></a>事件 - <code>Emitting Events</code></h1><p>在 <strong>Vue2</strong> 中自定义事件是非常直接的，但是在 <strong>Vue3</strong> 的话，我们会有更多的控制的自由度。</p>\n<p>举例，现在我们想在点击提交按钮时触发一个<code>login</code>的事件。</p>\n<p>在 <strong>Vue2</strong> 中我们会调用到<code>this.$emit</code>然后传入事件名和参数对象。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">login () &#123;\n      this.$emit(&#39;login&#39;, &#123;\n        username: this.username,\n        password: this.password\n      &#125;)\n &#125;</code></pre>\n\n<p>但是在 <strong>Vue3</strong>中，我们刚刚说过<code>this</code>已经不是和 vue2 代表着这个组件了，所以我们需要不一样的自定义事件的方式。</p>\n<p>那怎么办呀？! ლಠ 益 ಠ)ლ</p>\n<p>不用慌，在<code>setup()</code>中的第二个参数<code>content</code>对象中就有<code>emit</code>，这个是和<code>this.$emit</code>是一样的。那么我们只要在<code>setup()</code>接收第二个参数中使用<strong>分解对象法</strong>取出<code>emit</code>就可以在 setup 方法中随意使用了。</p>\n<p>然后我们在<code>login</code>方法中编写登陆事件：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">setup (props, &#123; emit &#125;) &#123;\n    &#x2F;&#x2F; ...\n\n    const login &#x3D; () &#x3D;&gt; &#123;\n      emit(&#39;login&#39;, &#123;\n        username: state.username,\n        password: state.password\n      &#125;)\n    &#125;\n\n    &#x2F;&#x2F; ...\n&#125;</code></pre>\n\n<hr>\n<h1 id=\"最终的-vue2-对比-vue3-代码\"><a href=\"#最终的-vue2-对比-vue3-代码\" class=\"headerlink\" title=\"最终的 vue2 对比 vue3 代码\"></a>最终的 vue2 对比 vue3 代码</h1><p><img src=\"https://img-blog.csdnimg.cn/20200308214440300.png\" alt=\"最终的vue2对比vue3代码\"></p>\n<p>真的是太棒了，能看到这里的童鞋们，你们现在基本都看到 vue2 与 vue3 其实概念与理念都是一样的。只是有一些属性获取方式和声名和定义方式稍微变了。一直在鬼哭狼嚎的小小前端开发猿人们，你们可以松一口气了吧。</p>\n<p>总结一下，我觉得 <strong>Vue3</strong> 给我们前端开发者带来了全新的开发体验，更好的使用弹性，可控度也得到了大大的提升。如果你是一个学过或者接触过 <strong>React</strong> 然后现在想使用 Vue 的话，应该特别兴奋，因为很多使用方式都和 React 非常相近了 🎉！</p>\n<p>全新的<code>合成式API（Composition API）</code>可以提升代码的解耦程度 —— 特别是大型的前端应用，效果会更加明显。还有就是按需引用的有了更细微的可控性，让项目的性能和打包大小有更好的控制。</p>\n<p>最后我把完成的 <strong>Vue2</strong> 和 <strong>Vue3</strong> 的组件代码发出来给大家：</p>\n<p><strong>Vue2</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&lt;template&gt;\n  &lt;div class&#x3D;&#39;form-element&#39;&gt;\n    &lt;h2&gt; &#123;&#123; title &#125;&#125; &lt;&#x2F;h2&gt;\n    &lt;input type&#x3D;&#39;text&#39; v-model&#x3D;&#39;username&#39; placeholder&#x3D;&#39;Username&#39; &#x2F;&gt;\n\n    &lt;input type&#x3D;&#39;password&#39; v-model&#x3D;&#39;password&#39; placeholder&#x3D;&#39;Password&#39; &#x2F;&gt;\n\n    &lt;button @click&#x3D;&#39;login&#39;&gt;\n      Submit\n    &lt;&#x2F;button&gt;\n    &lt;p&gt;\n      Values: &#123;&#123; username + &#39; &#39; + password &#125;&#125;\n    &lt;&#x2F;p&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n&lt;script&gt;\nexport default &#123;\n  props: &#123;\n    title: String\n  &#125;,\n  data () &#123;\n    return &#123;\n      username: &#39;&#39;,\n      password: &#39;&#39;\n    &#125;\n  &#125;,\n  mounted () &#123;\n    console.log(&#39;title: &#39; + this.title)\n  &#125;,\n  computed: &#123;\n    lowerCaseUsername () &#123;\n      return this.username.toLowerCase()\n    &#125;\n  &#125;,\n  methods: &#123;\n    login () &#123;\n      this.$emit(&#39;login&#39;, &#123;\n        username: this.username,\n        password: this.password\n      &#125;)\n    &#125;\n  &#125;\n&#125;\n&lt;&#x2F;script&gt;</code></pre>\n\n<p><strong>Vue3</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&lt;template&gt;\n  &lt;div class&#x3D;&#39;form-element&#39;&gt;\n    &lt;h2&gt; &#123;&#123; state.title &#125;&#125; &lt;&#x2F;h2&gt;\n    &lt;input type&#x3D;&#39;text&#39; v-model&#x3D;&#39;state.username&#39; placeholder&#x3D;&#39;Username&#39; &#x2F;&gt;\n\n    &lt;input type&#x3D;&#39;password&#39; v-model&#x3D;&#39;state.password&#39; placeholder&#x3D;&#39;Password&#39; &#x2F;&gt;\n\n    &lt;button @click&#x3D;&#39;login&#39;&gt;\n      Submit\n    &lt;&#x2F;button&gt;\n    &lt;p&gt;\n      Values: &#123;&#123; state.username + &#39; &#39; + state.password &#125;&#125;\n    &lt;&#x2F;p&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n&lt;script&gt;\nimport &#123; reactive, onMounted, computed &#125; from &#39;vue&#39;\n\nexport default &#123;\n  props: &#123;\n    title: String\n  &#125;,\n  setup (props, &#123; emit &#125;) &#123;\n    const state &#x3D; reactive(&#123;\n      username: &#39;&#39;,\n      password: &#39;&#39;,\n      lowerCaseUsername: computed(() &#x3D;&gt; state.username.toLowerCase())\n    &#125;)\n\n    onMounted(() &#x3D;&gt; &#123;\n      console.log(&#39;title: &#39; + props.title)\n    &#125;)\n\n    const login &#x3D; () &#x3D;&gt; &#123;\n      emit(&#39;login&#39;, &#123;\n        username: state.username,\n        password: state.password\n      &#125;)\n    &#125;\n\n    return &#123;\n      login,\n      state\n    &#125;\n  &#125;\n&#125;\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>希望这篇文章能让大家体验到一个比较全面的 Vue2 与 Vue3 的开发区别。如果大家还有什么问题，可以在评论中提问哦！</p>\n<p>开发愉快！～</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200321131747841.png\" alt=\"和你一起终身学习\"></p>\n","text":"我们一直都有关注和阅读很多关于 Vue3 的新特性和功能即将到来。但是我们没有一个具体的概念在开发中会有如何的改变和不一样的体验。还有一些童鞋已经开始又慌又抓狂了 – “又要开始学新的写法了 (ノ ToT )ノ ~┻┻”。 所以这里我使用 Vue2 和 Vue3 开发一个简单的表...","link":"","photos":[],"count_time":{"symbolsCount":"9.8k","symbolsTime":"9 mins."},"categories":[{"name":"FrontEnd","slug":"FrontEnd","count":10,"path":"api/categories/FrontEnd.json"},{"name":"Vue","slug":"FrontEnd/Vue","count":1,"path":"api/categories/FrontEnd/Vue.json"}],"tags":[{"name":"Vue","slug":"Vue","count":1,"path":"api/tags/Vue.json"},{"name":"Vue3","slug":"Vue3","count":1,"path":"api/tags/Vue3.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA-template\"><span class=\"toc-text\">创建一个 template</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%BB%BA%E7%AB%8B%E6%95%B0%E6%8D%AE-data\"><span class=\"toc-text\">建立数据 data</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Vue2-%E5%AF%B9%E6%AF%94-Vue3-%E7%9A%84-methods-%E7%BC%96%E5%86%99\"><span class=\"toc-text\">Vue2 对比 Vue3 的 methods 编写</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90-%E2%80%94-Lifecyle-Hooks\"><span class=\"toc-text\">生命周期钩子 — Lifecyle Hooks</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7-Computed-Properties\"><span class=\"toc-text\">计算属性 - Computed Properties</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%8E%A5%E6%94%B6-Props\"><span class=\"toc-text\">接收 Props</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6-Emitting-Events\"><span class=\"toc-text\">事件 - Emitting Events</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%9C%80%E7%BB%88%E7%9A%84-vue2-%E5%AF%B9%E6%AF%94-vue3-%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">最终的 vue2 对比 vue3 代码</span></a></li></ol>","author":{"name":"三钻","slug":"blog-author","avatar":"https://res.cloudinary.com/tridiamond/image/upload/v1625037705/ObsidianestLogo-hex_hecqbw.png","link":"/","description":"Think like an artist, develop like an artisan. <br /> @ <b>公众号：技术银河</b>","socials":{"github":"https://github.com/TriDiamond","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/TriDiamond6","juejin":"https://juejin.cn/user/1873223546578589","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://live.bilibili.com/22619211"}}}},"mapped":true,"prev_post":{"title":"5大法则助你 成为更出色的开发者","uid":"4c45a5d6250916c34f3f63c144ebcf77","slug":"notes/5-principles-to-be-a-better-programmer","date":"2020-03-17T14:34:58.000Z","updated":"2023-08-09T22:59:53.722Z","comments":true,"path":"api/articles/notes/5-principles-to-be-a-better-programmer.json","keywords":null,"cover":"https://img-blog.csdnimg.cn/20200317002218652.png","text":"在现在这个技术高速发展的时代，无论你是在校学生，还是技术职场中的精英，都会面临需要持续提升。但是如果只知道提升技术能力，忽略了一些技巧和技术素养的培养和习惯。你会发现你再有能力，也变得无用武之地。因为真正的强者是不会只依赖 TA 的装备。更多的是技巧，经验，应变能力还有思想。 这...","link":"","photos":[],"count_time":{"symbolsCount":"6.8k","symbolsTime":"6 mins."},"categories":[{"name":"NOTES","slug":"NOTES","count":3,"path":"api/categories/NOTES.json"}],"tags":[{"name":"Programmer","slug":"Programmer","count":3,"path":"api/tags/Programmer.json"},{"name":"Better Programming","slug":"Better-Programming","count":3,"path":"api/tags/Better-Programming.json"}],"author":{"name":"三钻","slug":"blog-author","avatar":"https://res.cloudinary.com/tridiamond/image/upload/v1625037705/ObsidianestLogo-hex_hecqbw.png","link":"/","description":"Think like an artist, develop like an artisan. <br /> @ <b>公众号：技术银河</b>","socials":{"github":"https://github.com/TriDiamond","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/TriDiamond6","juejin":"https://juejin.cn/user/1873223546578589","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://live.bilibili.com/22619211"}}}}},"next_post":{"title":"JavaScript中更简便的数组处理函数.map()，.reduce()，.filter()","uid":"413bd1d64b9fce9f3204cf3770091122","slug":"frontend/simplify-your-javascript-with","date":"2019-11-02T09:18:18.000Z","updated":"2023-08-09T22:59:53.722Z","comments":true,"path":"api/articles/frontend/simplify-your-javascript-with.json","keywords":null,"cover":"https://source.unsplash.com/5Xwaj9gaR0g/1200x628","text":"如果你刚接触 JavaScript 可能你还没有听说过.map()，.reduce()，.filter()。或者听说过，看过别人用过但是自己在实际项目中没有用过。在国内很多开发项目都是需要考虑 IE8 的兼容，为了兼容很多 JavaScript 好用的方法和技巧都被埋没了。但是我...","link":"","photos":[],"count_time":{"symbolsCount":"7.1k","symbolsTime":"6 mins."},"categories":[{"name":"FrontEnd","slug":"FrontEnd","count":10,"path":"api/categories/FrontEnd.json"},{"name":"Tips","slug":"FrontEnd/Tips","count":2,"path":"api/categories/FrontEnd/Tips.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":4,"path":"api/tags/JavaScript.json"},{"name":"ES6","slug":"ES6","count":1,"path":"api/tags/ES6.json"}],"author":{"name":"三钻","slug":"blog-author","avatar":"https://res.cloudinary.com/tridiamond/image/upload/v1625037705/ObsidianestLogo-hex_hecqbw.png","link":"/","description":"Think like an artist, develop like an artisan. <br /> @ <b>公众号：技术银河</b>","socials":{"github":"https://github.com/TriDiamond","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/TriDiamond6","juejin":"https://juejin.cn/user/1873223546578589","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://live.bilibili.com/22619211"}}}}}}