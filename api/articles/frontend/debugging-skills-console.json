{"title":"使用Console技巧提高JS调试技能","uid":"8c6e317d34a70d85c4a6b275416b9854","slug":"frontend/debugging-skills-console","date":"2019-10-11T15:59:19.000Z","updated":"2023-08-10T07:23:49.198Z","comments":true,"path":"api/articles/frontend/debugging-skills-console.json","keywords":null,"cover":"https://source.unsplash.com/dMUt0X3f59Q/1200x628","content":"<p>其实 <strong>JavaScript</strong> 给到我们很多调试工具来调试代码，那问问你自己，你又知道多少呢？用到多少呢？</p>\n<p>大部分前端开发在 <strong>JavaScript</strong> 调试代码的常规用法都是直接<code>console.log</code>，直接输出某一个变量或者返回数据里面的对象数据。当然毋庸置疑这样输出来调试是没有问题的。但是不是最优雅的方式来调试代码，其实还有更好的办法。作为一个有追求的技术人才，有更好的调试方式为什么不去使用呢？</p>\n<p><img src=\"https://s2.ax1x.com/2019/10/11/ubREy4.png\" alt=\"Console输出Hello\"></p>\n<p>我们先来了解清楚浏览器的<code>console</code>。浏览器的<code>console</code>对象有提供自带的调试控制台。<code>console</code>对象只能在浏览器的 JavaScript 中使用，也就是说客户端应用可用而服务端应用不可用。它的作用或者效果会根据不同的浏览器而不同，但是基础使用方式和功能是基本一致的。不过<code>console</code>是可以在任何前端语言或者框架中使用。</p>\n<hr>\n<h2 id=\"console-log\"><a href=\"#console-log\" class=\"headerlink\" title=\"console.log\"></a>console.log</h2><p>最常用的使用方式就是<code>console.log</code>，对前端开发工程师来说就是家常便饭了。以下是一个简单的使用例子。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function sayHello(name) &#123;\n  console.log(name)\n&#125;\n\nsayHello(&#39;Indrek&#39;)</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>以上<code>sayHello</code>方法接收一个名字，然后在控制台输出出来。</p></blockquote>\n<p><img src=\"https://s2.ax1x.com/2019/10/12/ujmEr9.png\" alt=\"Console输出名字\"></p>\n<p>现在我们开始玩以下更有趣的调试方法。加入我们现在想知道<code>sayHello</code>这个方法被调用了多少次，这样我们应该怎么调试呢？其实有一个很简单的办法就是使用<code>console.count()</code>.</p>\n<hr>\n<h2 id=\"console-count\"><a href=\"#console-count\" class=\"headerlink\" title=\"console.count\"></a>console.count</h2><p><code>count()</code>方法会输出某一个<code>标示</code>被调用了几次。如果没有穿任何参数，<code>count()</code>默认为使用默认标示<code>defaut</code>。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function sayHello(name) &#123;\n  console.count()\n  console.log(name)\n&#125;\n\nsayHello(&#39;Indrek&#39;)\nsayHello(&#39;William&#39;)\nsayHello(&#39;Kelly&#39;)</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>以上代码就会在控制台输出以下结果：</p></blockquote>\n<p><img src=\"https://s2.ax1x.com/2019/10/12/ujm7ZR.png\" alt=\"统计了sayHello方法被调用的次数\"></p>\n<p>上面的例子实现了统计某一个方法被调用的次数，那如果我们想统计每个同名字(<code>name</code>)的在这个方法里面被调用了多少次呢？要调试这种其实也很简单，只要直接吧<code>name</code>直接传入<code>count</code>就可以了。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function sayHello(name) &#123;\n  console.count(name)\n&#125;\n\nsayHello(&#39;Indrek&#39;)\nsayHello(&#39;William&#39;)\nsayHello(&#39;Kelly&#39;)\nsayHello(&#39;Indrek&#39;)</code></pre>\n\n<p><code>‍(∩｀-´)⊃━☆ﾟ.*・｡ﾟ</code> 巴拉巴拉！就是那么简单，我们就可以跟踪同名的参数在<code>sayHello</code>方法里面被调用的次数了！</p>\n<p><img src=\"https://s2.ax1x.com/2019/10/13/uj1xhR.png\" alt=\"统计同名的参数在`sayHello`方法里面被调用的次数\"></p>\n<hr>\n<h2 id=\"console-warn\"><a href=\"#console-warn\" class=\"headerlink\" title=\"console.warn\"></a>console.warn</h2><p>这个控台答应方法会输出一个警告信息。在你开发 APIs 或者开发工具的时候使用。<code>console.warn</code>这个方法在你需要警告用户的时候特别实用，例如漏掉了某个参数或者是让开发者知道你的 API&#x2F;插件包的版本已经失效的时候使用。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function sayHello(name) &#123;\n  if (!name) &#123;\n    console.warn(&#39;No name given&#39;)\n  &#125;\n&#125;\n\nsayHello()</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>上面的代码检测了<code>sayHello</code>方法的参数是否漏传。如果<code>name</code>参数没有传，一个警告消息就会被打印到控制台中。让开发者可以思考问题出在哪里。</p></blockquote>\n<p><img src=\"https://s2.ax1x.com/2019/10/13/uj85Q0.png\" alt=\"一个警告消息就会被打印到控制台中。让开发者可以思考问题出在哪里\"></p>\n<hr>\n<h2 id=\"console-table\"><a href=\"#console-table\" class=\"headerlink\" title=\"console.table\"></a>console.table</h2><p>如果是我们在调试数组或者对象时，<code>console.table</code>是一个非常实用的调试方法来在控制台打印数据。数组里面的每一个元素都会在表格的行里面展示。以下是的水果名数组作为一个例子，如果我们把这个数组传入<code>console.table</code>，我们会看到一个含有这个水果名数据以表格的方式在控制台被打印出来。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const fruits &#x3D; [&#39;kiwi&#39;, &#39;banana&#39;, &#39;strawberry&#39;]\n\nconsole.table(fruits)</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>我们一起来围观以下在控制台里面的展示效果</p></blockquote>\n<p><img src=\"https://s2.ax1x.com/2019/10/13/ujGlkQ.png\" alt=\"数据以表格的形式打印在控制台\"></p>\n<p>看到了这个，你会不会灵光一闪想到 mmp，如果是一个很大的数组这种表格化的展示方式是多么的实用啊！对的！例如一个上百个数据的数组，我们使用这种调试方法来打印就很方便了。为了可以让我们用双眼见证这个说法的真实性，我们用代码说话吧！</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const fruits &#x3D; [\n  &#39;Apple&#39;,\n  &#39;Watermelon&#39;,\n  &#39;Orange&#39;,\n  &#39;Pear&#39;,\n  &#39;Cherry&#39;,\n  &#39;Strawberry&#39;,\n  &#39;Nectarine&#39;,\n  &#39;Grape&#39;,\n  &#39;Mango&#39;,\n  &#39;Blueberry&#39;,\n  &#39;Pomegranate&#39;,\n  &#39;Carambola&#39;,\n  &#39;Plum&#39;,\n  &#39;Banana&#39;,\n  &#39;Raspberry&#39;,\n  &#39;Mandarin&#39;,\n  &#39;Jackfruit&#39;,\n  &#39;Papaya&#39;,\n  &#39;Kiwi&#39;,\n  &#39;Pineapple&#39;,\n  &#39;Lime&#39;,\n  &#39;Lemon&#39;,\n  &#39;Apricot&#39;,\n  &#39;Grapefruit&#39;,\n  &#39;Melon&#39;,\n  &#39;Coconut&#39;,\n  &#39;Avocado&#39;,\n  &#39;Peach&#39;,\n]\n\nconsole.table(fruits)</code></pre>\n\n<p>我们使用<code>console.table</code>来打印一下上面这个大数组试试看吧。</p>\n<p><img src=\"https://s2.ax1x.com/2019/10/13/ujGvNQ.png\" alt=\"使用表格化方式在控制台打印数据\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>这种展示方式简直就是一目了然！这样妈妈再也不用担心我们调试数据的时候蒙圈了！<code>՞༘✡ (๑ •̀ㅂ•́)و✧</code></p></blockquote>\n<p>但是问题少年们，我们可是有梦想的工程师，如果是用来调试<code>对象</code>会是怎么样呢？来吧亲自动手丰衣足食，上代码！</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const pets &#x3D; &#123;\n  name: &#39;Simon&#39;,\n  type: &#39;cat&#39;,\n&#125;\n\nconsole.table(pets)</code></pre>\n\n<p>注意了兄弟姐妹们，现在我们打印的是对象不是数组。在控制台的表格现在有两个键值<code>name</code>和<code>type</code>。之前是 0，1，2，3，4…</p>\n<p><img src=\"https://s2.ax1x.com/2019/10/13/ujtOHK.png\" alt=\"控制台表格化打印对象数据\"></p>\n<p>这种方式可以替代普遍使用的直接用 log 打印对象数据，表格化的展示相对还是更加清晰的。问题少年再次发问，如果我们想多个对象一起打印呢？</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const pets &#x3D; &#123;\n  name: &#39;Simon&#39;,\n  type: &#39;cat&#39;,\n&#125;\n\nconst person &#x3D; &#123;\n  firstName: &#39;Indrek&#39;,\n  lastName: &#39;Lasn&#39;,\n&#125;\n\nconsole.table(pets, person)</code></pre>\n\n<p>与预想一致，两个不同键值的对象被才分成两个表格在控制台打印出来了。</p>\n<p><img src=\"https://s2.ax1x.com/2019/10/13/ujNQuq.png\" alt=\"两个对象一起打印\"></p>\n<p>如果我们不想分开两个表格打印，可否在一个表格显示呢？可以的！只要把两个对象放入一个数组就 ok 了。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const pets &#x3D; &#123;\n  name: &#39;Simon&#39;,\n  type: &#39;cat&#39;,\n&#125;\n\nconst person &#x3D; &#123;\n  firstName: &#39;Indrek&#39;,\n  lastName: &#39;Lasn&#39;,\n&#125;\n\nconsole.table([pets, person])</code></pre>\n\n<p>现在我们看到两个对象在一个表格里面展示了，键值被放在表格的头部了，因为键值在两个对象里面是不一样的。</p>\n<p><img src=\"https://s2.ax1x.com/2019/10/13/ujNtC4.png\" alt=\"两个对象在一个表格里面打印\"></p>\n<hr>\n<h2 id=\"console-group\"><a href=\"#console-group\" class=\"headerlink\" title=\"console.group\"></a>console.group</h2><p>当我们是在调试集合（sets）或者是关联数据（linked-data），可以使用嵌套组来优化你的控制台输出。使用<code>console.group()</code>来创建一个嵌套的组。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">console.log(&#39;This is the first level&#39;)\nconsole.group()\nconsole.log(&#39;Level 2&#39;)\nconsole.group()\nconsole.log(&#39;Level 3&#39;)\nconsole.warn(&#39;More of level 3&#39;)\nconsole.groupEnd()\nconsole.log(&#39;Back to level 2&#39;)\nconsole.groupEnd()\nconsole.log(&#39;Back to the first level&#39;)</code></pre>\n\n<p>以下是一个嵌套的层级提示输出，在调试关联或者层级数据的时候特别实用。</p>\n<p><img src=\"https://s2.ax1x.com/2019/10/13/ujNy5D.png\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>使用<code>console.groupCollapsed()</code>可以把所有嵌套的层级收起来，使用鼠标点击时可以展开查看。</p></blockquote>\n<hr>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>作为一名优秀的程序员，我们应该尽量在合适的场景或者合适的情况下运用在提供到给我的调试工具。所以这一篇文章提到的调试方式，我们应该在开发调试的过程中多合理运用，习惯后我们会发现调试起来会更加敏捷和高效。</p>\n<hr>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>#通过技术悟出人生道理# 💭</strong><br>“人生无常，写的了一行是一行<br>Code now or never” <small> <em>～ 三·钻 TriDiamond</em> <small></p></blockquote>\n","text":"其实 JavaScript 给到我们很多调试工具来调试代码，那问问你自己，你又知道多少呢？用到多少呢？ 大部分前端开发在 JavaScript 调试代码的常规用法都是直接console.log，直接输出某一个变量或者返回数据里面的对象数据。当然毋庸置疑这样输出来调试是没有问题的。...","link":"","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[{"name":"FrontEnd","slug":"FrontEnd","count":10,"path":"api/categories/FrontEnd.json"},{"name":"Tips","slug":"FrontEnd/Tips","count":2,"path":"api/categories/FrontEnd/Tips.json"},{"name":"Debugging","slug":"FrontEnd/Tips/Debugging","count":1,"path":"api/categories/FrontEnd/Tips/Debugging.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":4,"path":"api/tags/JavaScript.json"},{"name":"Console","slug":"Console","count":1,"path":"api/tags/Console.json"},{"name":"Debugging","slug":"Debugging","count":1,"path":"api/tags/Debugging.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#console-log\"><span class=\"toc-text\">console.log</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#console-count\"><span class=\"toc-text\">console.count</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#console-warn\"><span class=\"toc-text\">console.warn</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#console-table\"><span class=\"toc-text\">console.table</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#console-group\"><span class=\"toc-text\">console.group</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"三钻","slug":"blog-author","avatar":"https://res.cloudinary.com/tridiamond/image/upload/v1625037705/ObsidianestLogo-hex_hecqbw.png","link":"/","description":"Think like an artist, develop like an artisan. <br /> @ <b>公众号：技术银河</b>","socials":{"github":"https://github.com/TriDiamond","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/TriDiamond6","juejin":"https://juejin.cn/user/1873223546578589","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://live.bilibili.com/22619211"}}}},"mapped":true,"prev_post":{"title":"真正的`服务层`是怎么写的?","uid":"a39070ddc42fa1b74b93b830b684f61e","slug":"backend/how-to-write-a-service","date":"2019-10-19T00:01:58.000Z","updated":"2023-08-10T07:23:49.198Z","comments":true,"path":"api/articles/backend/how-to-write-a-service.json","keywords":null,"cover":"https://source.unsplash.com/WSw-taiyZPk/1200x628","text":"其实很多系统架构里面都有服务层，但是服务对很多开发人员来说都有很多不同的定义和写法。甚至在我待过的公司里都有不同的写法和编写模式。每个人每个团队每个项目都有对服务不同的理解。那到底什么是服务，怎么理解才是对的呢？ 你们有没有过无数个夜晚里严重怀疑人生，琢磨着到底哪一种服务才是对的...","link":"","photos":[],"count_time":{"symbolsCount":"8.1k","symbolsTime":"7 mins."},"categories":[{"name":"BackEnd","slug":"BackEnd","count":1,"path":"api/categories/BackEnd.json"}],"tags":[{"name":"PHP","slug":"PHP","count":1,"path":"api/tags/PHP.json"},{"name":"Service","slug":"Service","count":1,"path":"api/tags/Service.json"},{"name":"Architecture","slug":"Architecture","count":1,"path":"api/tags/Architecture.json"}],"author":{"name":"三钻","slug":"blog-author","avatar":"https://res.cloudinary.com/tridiamond/image/upload/v1625037705/ObsidianestLogo-hex_hecqbw.png","link":"/","description":"Think like an artist, develop like an artisan. <br /> @ <b>公众号：技术银河</b>","socials":{"github":"https://github.com/TriDiamond","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/TriDiamond6","juejin":"https://juejin.cn/user/1873223546578589","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://live.bilibili.com/22619211"}}}}},"next_post":{"title":"GitLab Webhook 自动部署","uid":"0e4eed29bacbb07352028a3973ca9ed9","slug":"server/aliyun-webhook-setup","date":"2019-09-10T01:51:23.000Z","updated":"2023-08-10T07:23:49.202Z","comments":true,"path":"api/articles/server/aliyun-webhook-setup.json","keywords":null,"cover":"https://s2.ax1x.com/2019/09/18/n7ku11.png","text":"创建与填写部署公钥创建部署公钥sudo -Hu www ssh-keygen -t rsa 如果创建失败首先需要创建&#x2F;home&#x2F;www&#x2F;.ssh 这个文件夹 查看公钥cat &#x2F;home&#x2F;www&#x2F;.ssh&#x2F;id_...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"运维","slug":"运维","count":1,"path":"api/categories/运维.json"}],"tags":[{"name":"Gitlab","slug":"Gitlab","count":1,"path":"api/tags/Gitlab.json"},{"name":"Webhook","slug":"Webhook","count":1,"path":"api/tags/Webhook.json"}],"author":{"name":"三钻","slug":"blog-author","avatar":"https://res.cloudinary.com/tridiamond/image/upload/v1625037705/ObsidianestLogo-hex_hecqbw.png","link":"/","description":"Think like an artist, develop like an artisan. <br /> @ <b>公众号：技术银河</b>","socials":{"github":"https://github.com/TriDiamond","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/TriDiamond6","juejin":"https://juejin.cn/user/1873223546578589","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://live.bilibili.com/22619211"}}}}}}