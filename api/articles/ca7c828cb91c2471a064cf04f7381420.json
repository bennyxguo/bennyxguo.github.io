{"title":"实战中学习浏览器工作原理 — HTML 解析与 CSS 计算","uid":"ca7c828cb91c2471a064cf04f7381420","slug":"ca7c828cb91c2471a064cf04f7381420","date":"2020-08-23T08:48:06.000Z","updated":"2023-08-18T12:19:22.314Z","comments":true,"path":"api/articles/ca7c828cb91c2471a064cf04f7381420.json","keywords":null,"cover":"https://source.unsplash.com/VivsxaizzVE/1200x628","content":"<p>上一部分我们完成了从 HTTP 发送 Request，到接收到 Response，并且把 Response 中的文本都解析出来。</p>\n<p>这一部分我们主要讲解如何做 HTML 解析 和 CSS 计算这两个部分。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200810133830594.png\"></p>\n<p>根据我们上部分列出的一个完整的浏览器架构的话，蓝色背景的部分就是我们目前已经完成的流程。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200613135642518.png\"></p>\n<h1 id=\"HTML-解析\"><a href=\"#HTML-解析\" class=\"headerlink\" title=\"HTML 解析\"></a>HTML 解析</h1><h2 id=\"HTML-parse-模块的文件拆分\"><a href=\"#HTML-parse-模块的文件拆分\" class=\"headerlink\" title=\"HTML parse 模块的文件拆分\"></a>HTML parse 模块的文件拆分</h2><p><strong>思路：</strong></p>\n<ul>\n<li>为了方便文件管理，我们把 parser 单独拆分到文件中</li>\n<li>parser 接收 HTML 文本作为参数，返回一棵 DOM 树</li>\n</ul>\n<p><strong>加入 HTML Parser</strong></p>\n<ul>\n<li>上一篇文章中我们最后获得了一个 <code>Response</code> 对象</li>\n<li>这里我们就考虑如何利用这个 <code>Response</code> 中的 body 内容</li>\n<li>所以我们应该从获得 Response 之后，把 body 内容传给 parser 中的 parseHTML 方法进行解析</li>\n<li>在真正的浏览器中，我们是应该逐段的传给 parser 处理，然后逐段的返回</li>\n<li>因为这里我们的目标只是简单实现浏览器工作的原理，所以我们只需要统一解析然后返回就好</li>\n<li>这样我们更容易理解，代码也更加清晰易懂</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>文件：client.js</p></blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">// 这个是 client.js\n\n// 1. 引入 parser.js\nconst parser = require('./parser.js')\n\n// ...\n//... 之前的代码在此处忽略\n// ...\n\nlet response = await request.send()\n\n// 2. 在 `请求方法` 中，获得 response 后加入 HTML 的解析代码\nlet dom = parser.parseHTML(response.body)</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>文件：parser.js</p></blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">/**\n * 解析器\n * @filename parser.js\n * @author 三钻\n * @version v1.0.0\n */\n\nmodule.exports.parseHTML = function (html) {\n  console.log(html) // 这里我们先 console.log 打印一下返回的 HTML 内容\n}</code></pre>\n\n<h2 id=\"用有效状态机-FSM-实现-HTML-的分析\"><a href=\"#用有效状态机-FSM-实现-HTML-的分析\" class=\"headerlink\" title=\"用有效状态机 (FSM) 实现 HTML 的分析\"></a>用有效状态机 (FSM) 实现 HTML 的分析</h2><ul>\n<li>我们用 FSM 来实现 HTML 的分析</li>\n<li>在 HTML 标准中，已经规定了 HTML 的状态</li>\n<li>我们的浏览器只挑选其中一部分状态，完成一个最简版本</li>\n</ul>\n<p>HTML 标准里面已经把整个状态机中的状态都设计好了，我们直接就看 HTML 标准中给我们设计好的状态：<a href=\"https://html.spec.whatwg.org/multipage/%EF%BC%8C%E6%88%91%E4%BB%AC%E7%9B%B4%E6%8E%A5%E7%BF%BB%E5%88%B0\">https://html.spec.whatwg.org/multipage/，我们直接翻到</a> “Tokenization” 查看列出的状态，这里就是所有 HTML 的词法。</p>\n<p>有些同学在读这个标准的时候会说 “我看不懂”，“我太难了”，“我看懵了”。其实我们看不懂是因为这里面的标准是写给浏览器实现者去看的，但是用实现我们的浏览器的状态机之后，我们就可以看懂了，而且发现这里面写的非常像我们的代码。这个标准中写的就是伪代码。我们只需要把这里面的伪代码写成真实代码就可以了。</p>\n<p>在 HTML 中有 80 个状态，但是在我们这里，因为只需要走一遍浏览器工作的流程，我们就不一一实现了，我们在其中挑选一部分来实现即可。</p>\n<p>下面我们来初始化一下我们的 <code>parseHTML</code> 的状态机：（把上面的 <code>parser.js</code> 的基础上进行修改）</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>文件：parser.js</p></blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">/**\n * 解析器\n * @filename parser.js\n * @author 三钻\n * @version v1.0.0\n */\n\nconst EOF = Symbol('EOF') // EOF: end of file\n\nfunction data(char) {}\n\n/**\n * HTTP 解析\n * @param {string} html 文本\n */\nmodule.exports.parseHTML = function (html) {\n  let state = data\n  for (let char of html) {\n    state = state(char)\n  }\n  state = state(EOF)\n}</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li>上面的代码中用了一个小技巧，因为 HTML 最后是有一个文件终结的</li>\n<li>所有最后需要给他一个结束字符（重点是这里用一个没有特别意义的字符）</li>\n<li>我们这里使用了 <code>Symbol</code> 创建了一个 <code>EOF</code> 字符，代表 End of file (文件结束)</li>\n</ul></blockquote>\n<h2 id=\"解析标签\"><a href=\"#解析标签\" class=\"headerlink\" title=\"解析标签\"></a>解析标签</h2><p><strong>HTML 有三种标签</strong></p>\n<ol>\n<li>开始标签</li>\n<li>结束标签</li>\n<li>自封闭标签</li>\n</ol>\n<p><strong>思路：</strong></p>\n<ul>\n<li>主要的标签有：开始标签，结束标签和自封闭标签</li>\n<li>在这一步我们暂时忽略属性</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>文件：parser.js</p></blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">/**\n * 解析器\n * @filename parser.js\n * @author 三钻\n * @version v1.0.0\n */\n\nconst EOF = Symbol('EOF') // EOF: end of file\n\n/**\n * HTML 数据开始阅读状态\n * --------------------------------\n * 1. 如果找到 `&lt;` 就是标签开始状态\n * 2. 如果找到 `EOF` 就是HTML文本结束\n * 3. 其他字符就继续寻找\n * @param {*} char\n *\n * @return {function}\n */\nfunction data(char) {\n  if (char === '&lt;') {\n    // 标签开始\n    return tagOpen\n  } else if (char === EOF) {\n    // 文本结束\n    return\n  } else {\n    return data\n  }\n}\n\n/**\n * 标签开始状态\n * ----------------------------------\n * 1. 如果找到 `/` 证明是自关闭标签\n * 2. 如果是字母就是标签名\n * 3. 其他字符就直接继续寻找\n * @param {*} char\n */\nfunction tagOpen(char) {\n  if (char === '/') {\n    // 自关闭标签\n    return endTagOpen\n  } else if (char.match(/^[a-zA-Z]$/)) {\n    // 标签名\n    return tagName(char)\n  } else {\n    return\n  }\n}\n\n/**\n * 标签结束状态\n * --------------------------------\n * 1. 如果是字母就是标签名\n * 2. 如果直接是 `&gt;` 就报错\n * 3. 如果是结束符合，也是报错\n * @param {*} char\n */\nfunction endTagOpen(char) {\n  if (char.match(/^[a-zA-Z]$/)) {\n    return tagName(char)\n  } else if (char === '&gt;') {\n    // 报错 —— 没有结束标签\n  } else if (char === EOF) {\n    // 报错 —— 结束标签不合法\n  }\n}\n\n/**\n * 标签名状态\n * --------------------------------\n * 1. 如果 `\\t`(Tab符)、`\\n`(空格符)、`\\f`(禁止符)或者是空格，这里就是属性的开始\n * 2. 如果找到 `/` 就是自关闭标签\n * 3. 如果是字母字符那还是标签名\n * 4. 如果是 `&gt;` 就是开始标签结束\n * 5. 其他就是继续寻找标签名\n * @param {*} char\n */\nfunction tagName(char) {\n  if (c.match(/^[\\t\\n\\f ]$/)) {\n    return beforeAttributeName\n  } else if (char === '/') {\n    return selfClosingStartTag\n  } else if (c.match(/^[a-zA-Z]$/)) {\n    return tagName\n  } else if (char === '&gt;') {\n    return data\n  } else {\n    return tagName\n  }\n}\n\n/**\n * 标签属性状态\n * --------------------------------\n * 1. 如果遇到 `/` 就是自封闭标签状态\n * 2. 如果遇到字母就是属性名\n * 3. 如果遇到 `&gt;` 就是标签结束\n * 4. 如果遇到 `=` 下来就是属性值\n * 5. 其他情况继续进入属性抓取\n * @param {*} char\n */\nfunction beforeAttributeName(char) {\n  if (char === '/') {\n    return selfClosingStartTag\n  } else if (char.match(/^[\\t\\n\\f ]$/)) {\n    return beforeAttributeName\n  } else if (char === '&gt;') {\n    return data\n  } else if (char === '=') {\n    return beforeAttributeName\n  } else {\n    return beforeAttributeName\n  }\n}\n\n/**\n * 自封闭标签状态\n * --------------------------------\n * 1. 如果遇到 `&gt;` 就是自封闭标签结束\n * 2. 如果遇到 `EOF` 即使报错\n * 3. 其他字符也是报错\n * @param {*} char\n */\nfunction selfClosingStartTag(char) {\n  if (char === '&gt;') {\n    return data\n  } else if (char === 'EOF') {\n  } else {\n  }\n}\n\n/**\n * HTTP 解析\n * @param {string} html 文本\n */\nmodule.exports.parseHTML = function (html) {\n  let state = data\n  for (let char of html) {\n    state = state(char)\n  }\n  state = state(EOF)\n}</code></pre>\n\n<h2 id=\"创建元素\"><a href=\"#创建元素\" class=\"headerlink\" title=\"创建元素\"></a>创建元素</h2><ul>\n<li>在状态机中，除了状态迁移，我们还会加入业务逻辑</li>\n<li>我们在标签结束状态提交标签 token</li>\n</ul>\n<p><strong>业务逻辑：</strong></p>\n<ul>\n<li>首先我们需要建立一个 <code>currentToken</code> 来暂存当前的 Token（这里我们是用于存放开始和结束标签 token 的）</li>\n<li>然后建立一个 <code>emit()</code> 方法来接收最后创建完毕的 Token（这里后面会用逐个 Token 来创建 DOM 树）</li>\n<li><strong>HTML 数据开始状态 —— data</strong><ul>\n<li>如果找到的是 <code>EOF</code>，那就直接 emit 一个 type: ‘EOF’ 的 Token</li>\n<li>如果是文本内容的话，直接 emit <code>{type: 'text', content: char}</code> 的 token</li>\n</ul>\n</li>\n<li><strong>标签开始状态 —— tagOpen</strong><ul>\n<li>如果匹配中的是字母，那就是开始标签</li>\n<li>直接记录开始标签 Token 对象 <code>{type: 'startTag, tagName: ''}</code></li>\n<li>在 <code>tagName()</code> 状态中我们会把整个完整的标签名拼接好</li>\n</ul>\n</li>\n<li><strong>标签结束状态 —— endTagOpen</strong><ul>\n<li>如果匹配到字符，那就是结束标签名</li>\n<li>直接记录结束标签 Token 对象 <code>{type: 'endTag', tagName: ''}</code></li>\n<li>雷同，后面会在 <code>tagName()</code> 状态中我们会把整个完整的标签名拼接好</li>\n</ul>\n</li>\n<li><strong>标签名状态 —— tagName</strong><ul>\n<li>这里就是最核心的业务区了</li>\n<li>在第三种情况下，匹配到字母时，那就是需要拼接标签名的时候</li>\n<li>这里我们直接给 <code>currentTag</code> 追加字母即可</li>\n<li>当我们匹配到 <code>&gt;</code> 字符时，就是这个标签结束的时候，这个时候我们已经拥有一个完整的标签 Token 了</li>\n<li>所以这里我们直接把 <code>currentToken</code> emit 出去</li>\n</ul>\n</li>\n<li><strong>标签属性状态 —— beforeAttributeName</strong><ul>\n<li>在匹配到 <code>&gt;</code> 字符的时候，这里就是标签结束的时候，所以可以 emit <code>currentToken</code> 的时候</li>\n</ul>\n</li>\n<li><strong>自封闭标签状态 —— selfClosingStartTag</strong><ul>\n<li>这里追加了一个逻辑</li>\n<li>在匹配到 <code>&gt;</code> 字符时，就是自闭标签结束的时候</li>\n<li>这里我们直接给 <code>currentToken</code> 追加一个 <code>isSelfClosing = true</code> 的状态</li>\n<li>然后直接可以把 <code>currentToken</code> emit 出去了</li>\n</ul>\n</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>文件：parser.js</p></blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">/**\n * 解析器\n * @filename parser.js\n * @author 三钻\n * @version v1.0.0\n */\n\nlet currentToken = null\n\n/**\n * 输出 HTML token\n * @param {*} token\n */\nfunction emit(token) {\n  console.log(token)\n}\n\nconst EOF = Symbol('EOF') // EOF: end of file\n\n/**\n * HTML 数据开始阅读状态\n * --------------------------------\n * 1. 如果找到 `&lt;` 就是标签开始状态\n * 2. 如果找到 `EOF` 就是HTML文本结束\n * 3. 其他字符就继续寻找\n * @param {*} char\n *\n * @return {function}\n */\nfunction data(char) {\n  if (char === '&lt;') {\n    // 标签开始\n    return tagOpen\n  } else if (char === EOF) {\n    // 文本结束\n    emit({\n      type: 'EOF',\n    })\n    return\n  } else {\n    // 文本\n    emit({\n      type: 'text',\n      content: char,\n    })\n    return data\n  }\n}\n\n/**\n * 标签开始状态\n * ----------------------------------\n * 1. 如果找到 `/` 证明是自关闭标签\n * 2. 如果是字母就是标签名\n * 3. 其他字符就直接继续寻找\n * @param {*} char\n */\nfunction tagOpen(char) {\n  if (char === '/') {\n    // 自关闭标签\n    return endTagOpen\n  } else if (char.match(/^[a-zA-Z]$/)) {\n    // 标签名\n    currentToken = {\n      type: 'startTag',\n      tagName: '',\n    }\n    return tagName(char)\n  } else {\n    return\n  }\n}\n\n/**\n * 标签结束状态\n * --------------------------------\n * 1. 如果是字母就是标签名\n * 2. 如果直接是 `&gt;` 就报错\n * 3. 如果是结束符合，也是报错\n * @param {*} char\n */\nfunction endTagOpen(char) {\n  if (char.match(/^[a-zA-Z]$/)) {\n    currentToken = {\n      type: 'endTag',\n      tagName: '',\n    }\n    return tagName(char)\n  } else if (char === '&gt;') {\n    // 报错 —— 没有结束标签\n  } else if (char === EOF) {\n    // 报错 —— 结束标签不合法\n  }\n}\n\n/**\n * 标签名状态\n * --------------------------------\n * 1. 如果 `\\t`(Tab符)、`\\n`(空格符)、`\\f`(禁止符)或者是空格，这里就是属性的开始\n * 2. 如果找到 `/` 就是自关闭标签\n * 3. 如果是字母字符那还是标签名\n * 4. 如果是 `&gt;` 就是开始标签结束\n * 5. 其他就是继续寻找标签名\n * @param {*} char\n */\nfunction tagName(char) {\n  if (char.match(/^[\\t\\n\\f ]$/)) {\n    return beforeAttributeName\n  } else if (char === '/') {\n    return selfClosingStartTag\n  } else if (char.match(/^[a-zA-Z]$/)) {\n    currentToken.tagName += char\n    return tagName\n  } else if (char === '&gt;') {\n    emit(currentToken)\n    return data\n  } else {\n    return tagName\n  }\n}\n\n/**\n * 标签属性状态\n * --------------------------------\n * 1. 如果遇到 `/` 就是自封闭标签状态\n * 2. 如果遇到字母就是属性名\n * 3. 如果遇到 `&gt;` 就是标签结束\n * 4. 如果遇到 `=` 下来就是属性值\n * 5. 其他情况继续进入属性抓取\n * @param {*} char\n */\nfunction beforeAttributeName(char) {\n  if (char === '/') {\n    return selfClosingStartTag\n  } else if (char.match(/^[\\t\\n\\f ]$/)) {\n    return beforeAttributeName\n  } else if (char === '&gt;') {\n    emit(currentToken)\n    return data\n  } else if (char === '=') {\n    return beforeAttributeName\n  } else {\n    return beforeAttributeName\n  }\n}\n\n/**\n * 自封闭标签状态\n * --------------------------------\n * 1. 如果遇到 `&gt;` 就是自封闭标签结束\n * 2. 如果遇到 `EOF` 即使报错\n * 3. 其他字符也是报错\n * @param {*} char\n */\nfunction selfClosingStartTag(char) {\n  if (char === '&gt;') {\n    currentToken.isSelfClosing = true\n    emit(currentToken)\n    return data\n  } else if (char === 'EOF') {\n  } else {\n  }\n}\n\n/**\n * HTTP 解析\n * @param {string} html 文本\n */\nmodule.exports.parseHTML = function (html) {\n  let state = data\n  for (let char of html) {\n    state = state(char)\n  }\n  state = state(EOF)\n}</code></pre>\n\n<h2 id=\"处理属性\"><a href=\"#处理属性\" class=\"headerlink\" title=\"处理属性\"></a>处理属性</h2><ul>\n<li>属性值分为单引号、双引号、无引号三种写法，因此需要较多状态处理</li>\n<li>处理属性的方式跟标签类似</li>\n<li>属性结束时，我们把属性加到标签 Token 上</li>\n</ul>\n<p><strong>业务逻辑：</strong></p>\n<ul>\n<li>首先我们需要定义一个 <code>currentAttribute</code> 来存放当前找到的属性</li>\n<li>然后在里面叠加属性的名字和属性值，都完成后再放入 <code>currrentToken</code> 之中</li>\n<li><strong>标签属性名开始状态 —— beforeAttributeName</strong><ul>\n<li>这里如果遇到 空格，换行，回车等字符就可以再次进入标签属性名开始状态，继续等待属性的字符</li>\n<li>如果我们遇到 <code>/</code>或者<code>&gt;</code>就是标签直接结束了，我们就可以进入属性结束状态</li>\n<li>如果遇到 <code>=</code> 或者 <code>EOF</code> 这里就有 HTML 语法错误，正常来说就会返回 <code>parse error</code></li>\n<li>其他情况的话，就是刚刚开始属性名，这里就可以创建新的 <code>currentAttribute</code> 对象 <code>{name: '', value: ''}</code>，然后返回属性名状态</li>\n</ul>\n</li>\n<li><strong>属性名状态 —— attributeName</strong><ul>\n<li>如果我们遇到空格、换行、回车、<code>/</code>、<code>&gt;</code> 或者是 <code>EOF</code>等字符时，就可以判定这个属性已经结束了，可以直接迁移到 <code>afterAttributeName</code> 状态</li>\n<li>如果我们遇到一个 <code>=</code> 字符，证明我们的属性名读取完毕，下来就是属性值了</li>\n<li>如果我们遇到 <code>\\u0000</code> 那就是解析错误，直接抛出 <code>Parse error</code></li>\n<li>最后所有其他的都是当前属性名的字符，直接叠加到 <code>currentAttribute</code> 的 <code>name</code> 值中，然后继续进入属性名状态继续读取属性名字符</li>\n</ul>\n</li>\n<li><strong>属性值开始状态 —— beforeAttributeValue</strong><ul>\n<li>如果我们遇到空格、换行、回车、<code>/</code>、<code>&gt;</code> 或者是 <code>EOF</code>等字符时，我们继续往后寻找属性值，所以继续返回 <code>beforeAttributeValue</code> 状态</li>\n<li>如果遇到 <code>\"</code> 就是双引号属性值，进入 <code>doubleQuotedAttributeValue</code></li>\n<li>如果遇到 <code>'</code> 就是单引号属性值，进入 <code>singleQuotedAttributeValue</code></li>\n<li>其他情况就是遇到没有引号的属性值，使用 <code>reconsume</code> 的技巧进入 <code>unquotedAttributeValue(char)</code></li>\n</ul>\n</li>\n<li><strong>双引号属性值状态 – doubleQuotedAttributeValue</strong><ul>\n<li>这里我们死等 <code>\"</code> 字符，到达这个字符证明这个属性的名和值都读取完毕，可以直接把这两个值放入当前 Token 了</li>\n<li>如果遇到 <code>\\u0000</code> 或者 <code>EOF</code> 就是 HTML 语法错误，直接抛出 <code>Parse error</code></li>\n<li>其他情况就是继续读取属性值，并且叠加到 <code>currentAttribute</code> 的 <code>value</code> 中，然后继续进入 <strong>doubleQuotedAttributeValue</strong></li>\n</ul>\n</li>\n<li><strong>单引号属性值状态 —— singleQuotedAttributeValue</strong><ul>\n<li>与双引号雷同，这里我们死等 <code>'</code> 字符，到达这个字符证明这个属性的名和值都读取完毕，可以直接把这两个值放入当前 Token 了</li>\n<li>如果遇到 <code>\\u0000</code> 或者 <code>EOF</code> 就是 HTML 语法错误，直接抛出 <code>Parse error</code></li>\n<li>其他情况就是继续读取属性值，并且叠加到 <code>currentAttribute</code> 的 <code>value</code> 中，然后继续进入 <strong>singleQuotedAttributeValue</strong></li>\n</ul>\n</li>\n<li><strong>引号结束状态 —— afterQuotedAttributeValue</strong><ul>\n<li>如果我们遇到空格、换行、回车等字符时，证明还有可能有属性值，所以我们迁移到 <code>beforeAttributeName</code> 状态</li>\n<li>这个时候遇到一个 <code>/</code> 字符，因为之前我们读的是属性，属性都是在开始标签中的，在开始标签遇到 <code>/</code> ，那肯定是自封闭标签了。所以这里直接迁移到 <code>selfClosingStartTag</code> 状态</li>\n<li>如果遇到 <code>&gt;</code> 字符，证明标签要结束了，直接把当前组装好的属性名和值加入 <code>currentToken</code>， 然后直接 emit 出去</li>\n<li>如果遇到 <code>EOF</code> 那就是 HTML 语法错误，抛出 <code>Parse error</code></li>\n<li>其他情况按照浏览器规范，这里属于属性之间缺少空格的解析错误 (Parse error: missing-whitespace-between-attributes)</li>\n</ul>\n</li>\n<li><strong>无引号属性值状态 —— unquotedAttributeValue</strong><ul>\n<li>如果我们遇到空格、换行、回车等字符时，证明属性值结束，这个时候我们就可以直接把当前属性加入 currentToken，然后还有可能有其他属性，所以进入 <code>beforeAttributeName</code> 状态</li>\n<li>如果遇到 <code>/</code> 证明标签是一个自封闭标签，先把当前属性加入 currentToken 然后进入 <code>selfClosingStartTag</code> 状态</li>\n<li>如果遇到 <code>&gt;</code> 证明标签正常结束了，先把当前属性加入 currentToken 然后直接 emit token</li>\n<li>遇到其他不合法字符都直接抛出 <code>Parse error</code></li>\n<li>其他情况就是还在读取属性值的字符，所以叠加当前字符到属性值中，然后继续回到 <code>unquotedAttributeValue</code></li>\n</ul>\n</li>\n<li><strong>属性名结束状态 —— afterAttributeName</strong><ul>\n<li>如果我们遇到空格、换行、回车等字符时，证明还没有找到结束字符，继续寻找，所以重新进入 <code>afterAttributeName</code></li>\n<li>如果遇到 <code>/</code> 证明这个标签是自封闭标签，直接迁移到 <code>selfClosingStartTag</code> 状态</li>\n<li>如果遇到 <code>=</code> 字符证明下一个字符开始就是属性值了，迁移到 <code>beforeAttributeValue</code> 状态</li>\n<li>如果遇到 <code>&gt;</code> 字符，证明标签正常结束了，先把当前属性加入 currentToken 然后直接 emit token</li>\n<li>如果遇到 <code>EOF</code> 证明 HTML 文本异常结束了，直接抛出 <code>Parse error</code></li>\n<li>其他情况下，属于属性名又开始了，所以把上一个属性加入 currentToken 然后继续记录下一个属性</li>\n</ul>\n</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>文件名：parser.js</p></blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">/**\n * 解析器\n * @filename parser.js\n * @author 三钻\n * @version v1.0.0\n */\n\nlet currentToken = null\nlet currentAttribute = null\n\n/**\n * 输出 HTML token\n * @param {*} token\n */\nfunction emit(token) {\n  console.log(token)\n}\n\nconst EOF = Symbol('EOF') // EOF: end of file\n\n/**\n * HTML 数据开始阅读状态\n * --------------------------------\n * 1. 如果找到 `&lt;` 就是标签开始状态\n * 2. 如果找到 `EOF` 就是HTML文本结束\n * 3. 其他字符就继续寻找\n * @param {*} char\n *\n * @return {function}\n */\nfunction data(char) {\n  if (char === '&lt;') {\n    // 标签开始\n    return tagOpen\n  } else if (char === EOF) {\n    // 文本结束\n    emit({\n      type: 'EOF',\n    })\n    return\n  } else {\n    // 文本\n    emit({\n      type: 'text',\n      content: char,\n    })\n    return data\n  }\n}\n\n/**\n * 标签开始状态\n * ----------------------------------\n * 1. 如果找到 `/` 证明是自关闭标签\n * 2. 如果是字母就是标签名\n * 3. 其他字符就直接继续寻找\n * @param {*} char\n */\nfunction tagOpen(char) {\n  if (char === '/') {\n    // 自关闭标签\n    return endTagOpen\n  } else if (char.match(/^[a-zA-Z]$/)) {\n    // 标签名\n    currentToken = {\n      type: 'startTag',\n      tagName: '',\n    }\n    return tagName(char)\n  } else {\n    return\n  }\n}\n\n/**\n * 标签结束状态\n * --------------------------------\n * 1. 如果是字母就是标签名\n * 2. 如果直接是 `&gt;` 就报错\n * 3. 如果是结束符合，也是报错\n * @param {*} char\n */\nfunction endTagOpen(char) {\n  if (char.match(/^[a-zA-Z]$/)) {\n    currentToken = {\n      type: 'endTag',\n      tagName: '',\n    }\n    return tagName(char)\n  } else if (char === '&gt;') {\n    // 报错 —— 没有结束标签\n  } else if (char === EOF) {\n    // 报错 —— 结束标签不合法\n  }\n}\n\n/**\n * 标签名状态\n * --------------------------------\n * 1. 如果 `\\t`(Tab符)、`\\n`(空格符)、`\\f`(禁止符)或者是空格，这里就是属性的开始\n * 2. 如果找到 `/` 就是自关闭标签\n * 3. 如果是字母字符那还是标签名\n * 4. 如果是 `&gt;` 就是开始标签结束\n * 5. 其他就是继续寻找标签名\n * @param {*} char\n */\nfunction tagName(char) {\n  if (char.match(/^[\\t\\n\\f ]$/)) {\n    return beforeAttributeName\n  } else if (char === '/') {\n    return selfClosingStartTag\n  } else if (char.match(/^[a-zA-Z]$/)) {\n    currentToken.tagName += char\n    return tagName\n  } else if (char === '&gt;') {\n    emit(currentToken)\n    return data\n  } else {\n    return tagName\n  }\n}\n\n/**\n * 标签属性名开始状态\n * --------------------------------\n * 1. 如果遇到 `/` 就是自封闭标签状态\n * 2. 如果遇到字母就是属性名\n * 3. 如果遇到 `&gt;` 就是标签结束\n * 4. 如果遇到 `=` 下来就是属性值\n * 5. 其他情况继续进入属性抓取\n * @param {*} char\n */\nfunction beforeAttributeName(char) {\n  if (char.match(/^[\\t\\n\\f ]$/)) {\n    return beforeAttributeName\n  } else if (char === '/' || char === '&gt;') {\n    return afterAttributeName(char)\n  } else if (char === '=' || char === EOF) {\n    throw new Error('Parse error')\n  } else {\n    currentAttribute = {\n      name: '',\n      value: '',\n    }\n    return attributeName(char)\n  }\n}\n\n/**\n * 属性名状态\n * @param {*} char\n */\nfunction attributeName(char) {\n  if (\n    char.match(/^[\\t\\n\\f ]$/) ||\n    char === '/' ||\n    char === '&gt;' ||\n    char === EOF\n  ) {\n    return afterAttributeName(char)\n  } else if (char === '=') {\n    return beforeAttributeValue\n  } else if (char === '\\u0000') {\n    throw new Error('Parse error')\n  } else {\n    currentAttribute.name += char\n    return attributeName\n  }\n}\n\n/**\n * 属性值开始状态\n * @param {*} char\n */\nfunction beforeAttributeValue(char) {\n  if (\n    char.match(/^[\\t\\n\\f ]$/) ||\n    char === '/' ||\n    char === '&gt;' ||\n    char === EOF\n  ) {\n    return beforeAttributeValue\n  } else if (char === '\"') {\n    return doubleQuotedAttributeValue\n  } else if (char === \"'\") {\n    return singleQuotedAttributeValue\n  } else if (char === '&gt;') {\n    // return data;\n  } else {\n    return unquotedAttributeValue(char)\n  }\n}\n\n/**\n * 双引号属性值状态\n * @param {*} char\n */\nfunction doubleQuotedAttributeValue(char) {\n  if (char === '\"') {\n    currentToken[currentAttribute.name] = currentAttribute.value\n    return afterQuotedAttributeValue\n  } else if (char === '\\u0000') {\n    throw new Error('Parse error')\n  } else if (char === EOF) {\n    throw new Error('Parse error')\n  } else {\n    currentAttribute.value += char\n    return doubleQuotedAttributeValue\n  }\n}\n\n/**\n * 单引号属性值状态\n * @param {*} char\n */\nfunction singleQuotedAttributeValue(char) {\n  if (char === \"'\") {\n    currentToken[currentAttribute.name] = currentAttribute.value\n    return afterQuotedAttributeValue\n  } else if (char === '\\u0000') {\n    throw new Error('Parse error')\n  } else if (char === EOF) {\n    throw new Error('Parse error')\n  } else {\n    currentAttribute.value += char\n    return singleQuotedAttributeValue\n  }\n}\n\n/**\n * 引号结束状态\n * @param {*} char\n */\nfunction afterQuotedAttributeValue(char) {\n  if (char.match(/^[\\t\\n\\f ]$/)) {\n    return beforeAttributeName\n  } else if (char === '/') {\n    return selfClosingStartTag\n  } else if (char === '&gt;') {\n    currentToken[currentAttribute.name] = currentAttribute.value\n    emit(currentToken)\n    return data\n  } else if (char === EOF) {\n    throw new Error('Parse error: eof-in-tag')\n  } else {\n    throw new Error('Parse error: missing-whitespace-between-attributes')\n  }\n}\n\n/**\n * 无引号属性值状态\n * @param {*} char\n */\nfunction unquotedAttributeValue(char) {\n  if (char.match(/^[\\t\\n\\f ]$/)) {\n    currentToken[currentAttribute.name] = currentAttribute.value\n    return beforeAttributeName\n  } else if (char === '/') {\n    currentToken[currentAttribute.name] = currentAttribute.value\n    return selfClosingStartTag\n  } else if (char === '&gt;') {\n    currentToken[currentAttribute.name] = currentAttribute.value\n    emit(currentToken)\n    return data\n  } else if (char === '\\u0000') {\n    throw new Error('Parse error')\n  } else if (\n    char === '\"' ||\n    char === \"'\" ||\n    char === '&lt;' ||\n    char === '=' ||\n    char === '`'\n  ) {\n    throw new Error('Parse error')\n  } else if (char === EOF) {\n    throw new Error('Parse error')\n  } else {\n    currentAttribute.value += char\n    return unquotedAttributeValue\n  }\n}\n\n/**\n * 属性名结束状态\n * @param {*} char\n */\nfunction afterAttributeName(char) {\n  if (char.match(/^[\\t\\n\\f ]$/)) {\n    return afterAttributeName\n  } else if (char === '/') {\n    return selfClosingStartTag\n  } else if (char === '=') {\n    return beforeAttributeValue\n  } else if (char === '&gt;') {\n    currentToken[currentAttribute.name] = currentAttribute.value\n    emit(currentToken)\n    return data\n  } else if (char === EOF) {\n    throw new Error('Parse error')\n  } else {\n    currentToken[currentAttribute.name] = currentAttribute.value\n    currentAttribute = {\n      name: '',\n      value: '',\n    }\n    return attributeName(char)\n  }\n}\n\n/**\n * 自封闭标签状态\n * --------------------------------\n * 1. 如果遇到 `&gt;` 就是自封闭标签结束\n * 2. 如果遇到 `EOF` 即使报错\n * 3. 其他字符也是报错\n * @param {*} char\n */\nfunction selfClosingStartTag(char) {\n  if (char === '&gt;') {\n    currentToken.isSelfClosing = true\n    emit(currentToken)\n    return data\n  } else if (char === 'EOF') {\n  } else {\n  }\n}\n\n/**\n * HTTP 解析\n * @param {string} html 文本\n */\nmodule.exports.parseHTML = function (html) {\n  let state = data\n  for (let char of html) {\n    state = state(char)\n  }\n  state = state(EOF)\n}</code></pre>\n\n<h2 id=\"用-token-构建-DOM-树\"><a href=\"#用-token-构建-DOM-树\" class=\"headerlink\" title=\"用 token 构建 DOM 树\"></a>用 token 构建 DOM 树</h2><p>这里我们开始语法分析，这个与复杂的 JavaScript 的语法相比就非常简单，所以我们只需要用栈基于可以完成分析。但是如果我们要做一个完整的浏览器，只用栈肯定是不行的，因为浏览器是有容错性的，如果我们没有编写结束标签的话，浏览器是会去为我们补错机制的。</p>\n<p>那么我做的这个简单的浏览器就不需要对使用者做的那么友好，而只对实现者做的更友好即可。所以我们在实现的过程中就不做那么多特殊情况的处理了。简单用一个栈实现浏览器的 HTML 语法解析，并且构建 一个 DOM 树。</p>\n<ul>\n<li>从标签构建 DOM 树的基本技巧是使用栈</li>\n<li>遇到开始标签时创建元素并入栈，遇到结束标签时出栈</li>\n<li>自封闭节点可视为入栈后立刻出栈</li>\n<li>任何元素的父元素是它入栈前的栈顶</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>文件：parser.js 中的 emit() 函数部分</p></blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">// 默认给予根节点 document\nlet stack = [{ type: 'document', children: [] }]\n\n/**\n * 输出 HTML token\n * @param {*} token\n */\nfunction emit(token) {\n  if (token.type === 'text') return\n\n  // 记录上一个元素 - 栈顶\n  let top = stack[stack.length - 1]\n\n  // 如果是开始标签\n  if (token.type == 'startTag') {\n    let element = {\n      type: 'element',\n      children: [],\n      attributes: [],\n    }\n\n    element.tagName = token.tagName\n\n    for (let prop in token) {\n      if (prop !== 'type' &amp;&amp; prop != 'tagName') {\n        element.attributes.push({\n          name: prop,\n          value: token[prop],\n        })\n      }\n    }\n\n    // 对偶操作\n    top.children.push(element)\n    element.parent = top\n\n    if (!token.isSelfClosing) stack.push(element)\n\n    currentTextNode = null\n  } else if (token.type == 'endTag') {\n    if (top.tagName !== token.tagName) {\n      throw new Error('Parse error: Tag start end not matched')\n    } else {\n      stack.pop()\n    }\n\n    currentTextNode = null\n  }\n}</code></pre>\n\n<h2 id=\"将文本节点加到-DOM-树\"><a href=\"#将文本节点加到-DOM-树\" class=\"headerlink\" title=\"将文本节点加到 DOM 树\"></a>将文本节点加到 DOM 树</h2><p>这里是 HTML 解析的最后一步，把文本节点合并后加入 DOM 树里面。</p>\n<ul>\n<li>文本节点与自封闭标签处理类似</li>\n<li>多个文本节点需要合并</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>文件：parser.js 中的 emit() 函数部分</p></blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">let currentToken = null\nlet currentAttribute = null\nlet currentTextNode = null\n\n// 默认给予根节点 document\nlet stack = [{ type: 'document', children: [] }]\n\n/**\n * 输出 HTML token\n * @param {*} token\n */\nfunction emit(token) {\n  // 记录上一个元素 - 栈顶\n  let top = stack[stack.length - 1]\n\n  // 如果是开始标签\n  if (token.type == 'startTag') {\n    let element = {\n      type: 'element',\n      children: [],\n      attributes: [],\n    }\n\n    element.tagName = token.tagName\n\n    for (let prop in token) {\n      if (prop !== 'type' &amp;&amp; prop != 'tagName') {\n        element.attributes.push({\n          name: prop,\n          value: token[prop],\n        })\n      }\n    }\n\n    // 对偶操作\n    top.children.push(element)\n    element.parent = top\n\n    if (!token.isSelfClosing) stack.push(element)\n\n    currentTextNode = null\n  } else if (token.type == 'endTag') {\n    if (top.tagName !== token.tagName) {\n      throw new Error('Parse error: Tag start end not matched')\n    } else {\n      stack.pop()\n    }\n\n    currentTextNode = null\n  } else if (token.type === 'text') {\n    if (currentTextNode === null) {\n      currentTextNode = {\n        type: 'text',\n        content: '',\n      }\n      top.children.push(currentTextNode)\n    }\n\n    currentTextNode.content += token.content\n  }\n}</code></pre>\n\n<p><img src=\"https://img-blog.csdnimg.cn/20200613135642518.png\"></p>\n<h1 id=\"CSS-计算\"><a href=\"#CSS-计算\" class=\"headerlink\" title=\"CSS 计算\"></a>CSS 计算</h1><p>完成 HTML 解析并且获得了我们的 DOM 树之后，我们可以通过 CSS 计算来生成带 CSS 的 DOM 树。CSS Computing 表示的就是我们 CSS 规则里面所包含的那些 CSS 属性，应用到匹配这些选择器的元素上。</p>\n<p>开始这个代码编写之前，我们先来看看 z 在整个浏览器工作流程中，我们完成了哪些流程，到达了哪里。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200813123718919.png#pic_center\"></p>\n<p>上面的图，我们看到 <code>蓝色</code> 部分就是已经完成的：</p>\n<ul>\n<li>上一篇文章我们完成了 HTTP 请求</li>\n<li>然后通过获得的报文，解析出所有 HTTP 信息，里面就包括了 HTML 内容</li>\n<li>然后通过 HTTP 内容解析，我们构建了我们的 DOM 树</li>\n<li>接下来就是 CSS 计算 (CSS Computing)</li>\n</ul>\n<p>目前的 DOM 树只有我们的 HTML 语言里面描述的那些语义信息，我们像完成渲染，我们需要 CSS 信息。 那有的同学就会说我们把所有的样式写到 style 里面可不可以呢？如果我们这样写呢，我们就不需要经历这个 CSS 计算的过程了。但是虽然我们只是做一个虚拟的浏览器，但是还是希望呈现一个比较完成的浏览器流程，所以我们还是会让 DOM 树参与 CSS 计算的过程。</p>\n<p>所以这里我们就让 DOM 树挂上 CSS 信息，然后在渲染的过程中能使用。</p>\n<p>在编写这个代码之前，我们需要准备一个环境。如果我们需要做 CSS 计算，我们就需要对 CSS 的语法与词法进行分析。然后这个过程如果是手动来实现的话，是需要较多的编译原理基础知识的，但是这些编译基础知识的深度对我们知识想了解浏览器工作原理并不是重点。所以这里我们就偷个懒，直接用 npm 上的一个<code>css</code>现成包即可。</p>\n<p>其实这个 <code>css</code> 包，就是一个 CSS parser，可以帮助我们完成 CSS 代码转译成 AST 抽象语法树。 我们所要做的就是根据这棵抽象语法树抽出各种 CSS 规则，并且把他们运用到我们的 HTML 元素上。</p>\n<p>那么我们第一步就是先拿到 CSS 的规则，所以叫做 “收集 CSS 规则”</p>\n<h2 id=\"收集-CSS-规则\"><a href=\"#收集-CSS-规则\" class=\"headerlink\" title=\"收集 CSS 规则\"></a>收集 CSS 规则</h2><ul>\n<li>遇到 style 标签时，我们把 CSS 规则保存起来</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>文件：parser.js 中的 emit() 函数</strong></p>\n<ul>\n<li>我们在 tagName === ‘endTag’ 的判断中加入了判断当前标签是否 <code>style</code> 标签</li>\n<li>如果是，我们就可以获取 <code>style</code> 标签里面所有的内容进行 CSS 分析</li>\n<li>这里非常简单我们加入一个 <code>addCSSRule(top.children[0].content)</code>的函数即可</li>\n<li>而，<code>top</code> 就是当前元素，<code>children[0]</code> 就是 text 元素，而 <code>.content</code> 就是所有的 CSS 规则文本</li>\n<li>这里我们需要注意一个点，我们忽略了在实际情况中还有 <code>link</code> 标签引入 CSS 文件的情况。但是这个过程涉及到多层异步请求和 HTML 解析的过程，为了简化我们的代码的复杂度，这里就不做这个实现了。当然实际的浏览器是会比我们做的虚拟浏览器复杂的多。</li>\n</ul></blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">/**\n * 输出 HTML token\n * @param {*} token\n */\nfunction emit(token) {\n  // 记录上一个元素 - 栈顶\n  let top = stack[stack.length - 1]\n\n  // 如果是开始标签\n  if (token.type == 'startTag') {\n    // ............. 省略了这部分代码 .....................\n  } else if (token.type == 'endTag') {\n    // 校验开始标签是否被结束\n    // 不是：直接抛出错误，是：直接出栈\n    if (top.tagName !== token.tagName) {\n      throw new Error('Parse error: Tag start end not matched')\n    } else {\n      // 遇到 style 标签时，执行添加 CSS 规则的操作\n      if (top.tagName === 'style') {\n        addCSSRule(top.children[0].content)\n      }\n      stack.pop()\n    }\n\n    currentTextNode = null\n  } else if (token.type === 'text') {\n    // ............. 省略了这部分代码 .....................\n  }\n}</code></pre>\n\n<ul>\n<li>这里我们调用 CSS Parser 来分析 CSS 规则</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>文件：parser.js 中加入 addCSSRule() 函数</p>\n<ul>\n<li>首先我们需要通过 node 引入 <code>css</code> 包</li>\n<li>然后调用 <code>css.parse(text)</code> 获得 AST 抽象语法树</li>\n<li>最后通过使用 <code>...</code> 的特性展开了 <code>ast.stylesheet.rules</code> 中的所有对象，并且加入到 <code>rules</code> 里面</li>\n</ul></blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const css = require('css')\n\nlet rules = []\n/**\n * 把 CSS 规则暂存到一个数字里\n * @param {*} text\n */\nfunction addCSSRule(text) {\n  var ast = css.parse(text)\n  console.log(JSON.stringify(ast, null, '    '))\n  rules.push(...ast.stylesheet.rules)\n}</code></pre>\n\n<ul>\n<li>这里我们必须要仔细研究此库分析 CSS 规则的格式</li>\n</ul>\n<p>最终 AST 输出的结果：</p>\n<ul>\n<li><code>type</code> 类型是 <code>stylesheet</code> 样式表</li>\n<li>然后在 <code>stylesheet</code> 中有 <code>rules</code> 的 CSS 规则数组</li>\n<li><code>rules</code> 数组中就有一个 <code>declarations</code> 数组，这里面就是我们 CSS 样式的信息了</li>\n<li>拿第一个 delarations 来说明，他的属性为 <code>width</code>， 属性值为 <code>100px</code>，这些就是我们需要的 CSS 规则了</li>\n</ul>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">{\n  \"type\": \"stylesheet\",\n  \"stylesheet\": {\n    \"source\": undefined,\n    \"rules\": [\n      {\n        \"type\": \"rule\",\n        \"selectors\": [\"body div #myId\"],\n        \"declarations\": [\n          {\n            \"type\": \"declaration\",\n            \"property\": \"width\",\n            \"value\": \"100px\",\n            \"position\": {\n              \"start\": {\n                \"line\": 3,\n                \"column\": 9\n              },\n              \"end\": {\n                \"line\": 3,\n                \"column\": 21\n              },\n              \"source\": undefined\n            }\n          },\n          {\n            \"type\": \"declaration\",\n            \"property\": \"background-color\",\n            \"value\": \"#ff5000\",\n            \"position\": {\n              \"start\": {\n                \"line\": 4,\n                \"column\": 9\n              },\n              \"end\": {\n                \"line\": 4,\n                \"column\": 34\n              },\n              \"source\": undefined\n            }\n          }\n        ],\n        \"position\": {\n          \"start\": {\n            \"line\": 2,\n            \"column\": 7\n          },\n          \"end\": {\n            \"line\": 5,\n            \"column\": 8\n          },\n          \"source\": undefined\n        }\n      }\n    ],\n    \"parsingErrors\": []\n  }\n}</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>这里还有一个问题需要我们注意的，像 <code>body div #myId</code> 这种带有空格的标签选择器，是不会逐个给我们单独分析出来的，所以这种我们是需要在后面自己逐个分解分析。除非是 <code>,</code> 逗号分隔的选择器才会被拆解成多个 <code>delarations</code>。</p></blockquote>\n<h2 id=\"添加调用\"><a href=\"#添加调用\" class=\"headerlink\" title=\"添加调用\"></a>添加调用</h2><p>上一步我们收集好了 CSS 规则，这一步我们就是要找一个合适的时机把这些规则应用上。应用的时机肯定是越早越好，CSS 设计里面有一个潜规则，就是 CSS 设计会尽量保证所有的选择器都能够在 <code>startTag</code> 进入的时候就能被判断。</p>\n<p>当然，我们后面又加了一些高级的选择器之后，这个规则有了一定的松动，但是大部分的规则仍然是去遵循这个规则的，当我们 DOM 树构建到元素的 startTag 的步骤，就已经可以判断出来它能匹配那些 CSS 规则了</p>\n<ul>\n<li>当我们创建一个元素后，立即计算 CSS</li>\n<li>我们假设：理论上，当我们分析一个元素时，所有的 CSS 规则已经被收集完毕</li>\n<li>在真实浏览器中，可能遇到写在 body 的 style 标签，需要重新 CSS 计算的情况，这里我们忽略</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>文件：parser.js 的 emit() 函数加入 computeCSS() 函数调用</strong></p></blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">/**\n * 输出 HTML token\n * @param {*} token\n */\nfunction emit(token) {\n  // 记录上一个元素 - 栈顶\n  let top = stack[stack.length - 1]\n\n  // 如果是开始标签\n  if (token.type == 'startTag') {\n    let element = {\n      type: 'element',\n      children: [],\n      attributes: [],\n    }\n\n    element.tagName = token.tagName\n\n    // 叠加标签属性\n    for (let prop in token) {\n      if (prop !== 'type' &amp;&amp; prop != 'tagName') {\n        element.attributes.push({\n          name: prop,\n          value: token[prop],\n        })\n      }\n    }\n\n    // 元素构建好之后直接开始 CSS 计算\n    computeCSS(element)\n\n    // 对偶操作\n    top.children.push(element)\n    element.parent = top\n    // 自封闭标签之外，其他都入栈\n    if (!token.isSelfClosing) stack.push(element)\n\n    currentTextNode = null\n  } else if (token.type == 'endTag') {\n    // ............. 省略了这部分代码 .....................\n  } else if (token.type === 'text') {\n    // ............. 省略了这部分代码 .....................\n  }\n}</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>文件：parser.js 中加入 computeCSS() 函数</strong></p></blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">/**\n * 对元素进行 CSS 计算\n * @param {*} element\n */\nfunction computeCSS(element) {\n  console.log(rules)\n  console.log('compute CSS for Element', element)\n}</code></pre>\n\n<h2 id=\"获取父元素序列\"><a href=\"#获取父元素序列\" class=\"headerlink\" title=\"获取父元素序列\"></a>获取父元素序列</h2><p>为什么需要获取父元素序列呢？因为我们今天的选择器大多数都是跟元素的父元素相关的。</p>\n<ul>\n<li>在 computeCSS 函数中，我们必须知道元素的所有父级元素才能判断元素与规则是否匹配</li>\n<li>我们从上一步骤的 stack，可以获取本元素的父元素</li>\n<li>因为我们首先获取的是 “当前元素”，所以我们获得和计算父元素匹配的顺序是从内向外</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>文件：parser.js 中的 computeCSS() 函数</strong></p>\n<ul>\n<li>因为栈里面的元素是会不断的变化的，所以后期元素会在栈中发生变化，就会可能被污染。所以这里我们用了一个<code>slice</code>来复制这个元素。</li>\n<li>然后我们用了 <code>reverse()</code> 把元素的顺序倒过来，为什么我们需要颠倒元素的顺序呢？是因为我们的标签匹配是会从当前元素开始逐级的往外匹配（也就是一级一级往父级元素去匹配的）</li>\n</ul></blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">/**\n * 对元素进行 CSS 计算\n * @param {*} element\n */\nfunction computeCSS(element) {\n  var elements = stack.slice().reverse()\n}</code></pre>\n\n<h2 id=\"选择器与元素的匹配\"><a href=\"#选择器与元素的匹配\" class=\"headerlink\" title=\"选择器与元素的匹配\"></a>选择器与元素的匹配</h2><p>首先我们来了解一下选择器的机构，其实选择器其实是有一个层级结构的：</p>\n<ul>\n<li>最外层叫选择器列表，这个我们的 CSS parser 已经帮我们做了拆分</li>\n<li>选择器列表里面的，叫做复杂选择器，这个是由空格分隔了我们的复合选择器</li>\n<li>复杂选择器是根据亲代关系，去选择元素的</li>\n<li>复合选择器，是针对一个元素的本身的属性和特征的判断</li>\n<li>而复合原则性选择器，它又是由紧连着的一对选择器而构成的</li>\n<li>在我们的模拟浏览器中，我们可以假设一个复杂选择器中只包含简单选择器</li>\n<li>我们就把这种情况当成而外有精力的同学自行去实现了哈</li>\n</ul>\n<p><strong>思路：</strong></p>\n<ul>\n<li>选择器也要从当前元素向外排列</li>\n<li>复杂选择器拆成对单个元素的选择器，用循环匹配父级元素队列</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">/**\n * 匹配函数下一节会重点实现\n * @param {*} element\n * @param {*} selector\n */\nfunction match(element, selector) {}\n\n/**\n * 对元素进行 CSS 计算\n * @param {*} element\n */\nfunction computeCSS(element) {\n  var elements = stack.slice().reverse()\n\n  if (!elements.computedStyle) element.computedStyle = {}\n  // 这里循环 CSS 规则，让规则与元素匹配\n  // 1.  如果当前选择器匹配不中当前元素直接 continue\n  // 2. 当前元素匹配中了，就一直往外寻找父级元素找到能匹配上选择器的元素\n  // 3. 最后检验匹配中的元素是否等于选择器的总数，是就是全部匹配了，不是就是不匹配\n  for (let rule of rules) {\n    let selectorParts = rule.selectors[0].split(' ').reverse()\n\n    if (!match(element, selectorParts[0])) continue\n\n    let matched = false\n\n    let j = 1\n    for (let i = 0; i &lt; elements.length; i++) {\n      if (match(elements[i], selectorParts[j])) j++\n    }\n\n    if (j &gt;= selectorParts.length) matched = true\n\n    if (matched) console.log('Element', element, 'matched rule', rule)\n  }\n}</code></pre>\n\n<h2 id=\"计算选择器与元素\"><a href=\"#计算选择器与元素\" class=\"headerlink\" title=\"计算选择器与元素\"></a>计算选择器与元素</h2><p>上一节我们没有完成 <code>match</code> 匹配函数的实现，那这一部分我们来一起实现元素与选择器的匹配逻辑。</p>\n<ul>\n<li>根据选择器的类型和元素属性，计算是否与当前元素匹配</li>\n<li>这里仅仅实现了三种基本选择器，实际的浏览器中要处理复合选择器</li>\n<li>同学们可以自己尝试一下实现复合选择器，实现支持空格的 Class 选择器</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">/**\n * 匹配元素和选择器\n * @param {Object} element 当前元素\n * @param {String} selector CSS 选择器\n */\nfunction match(element, selector) {\n  if (!selector || !element.attributes) return false\n\n  if (selector.charAt(0) === '#') {\n    let attr = element.attributes.filter((attr) =&gt; attr.name === 'id')[0]\n    if (attr &amp;&amp; attr.value === selector.replace('#', '')) return true\n  } else if (selector.charAt(0) === '.') {\n    let attr = element.attributes.filter((attr) =&gt; attr.name === 'class')[0]\n    if (attr &amp;&amp; attr.value === selector.replace('.', '')) return true\n  } else {\n    if (element.tagName === selector) return true\n  }\n\n  return false\n}</code></pre>\n\n<h2 id=\"生成-computed-属性\"><a href=\"#生成-computed-属性\" class=\"headerlink\" title=\"生成 computed 属性\"></a>生成 computed 属性</h2><p>这一部分我们生成 computed 属性，这里我们只需要把 <code>delarations</code> 里面声明的属性给他加到我们的元素的 <code>computed</code> 上就可以了。</p>\n<ul>\n<li>一旦选择器匹配中了，就把选择器中的属性应用到元素上</li>\n<li>然后形成 computedStyle</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">/**\n * 对元素进行 CSS 计算\n * @param {*} element\n */\nfunction computeCSS(element) {\n  var elements = stack.slice().reverse()\n\n  if (!elements.computedStyle) element.computedStyle = {}\n  // 这里循环 CSS 规则，让规则与元素匹配\n  // 1. 如果当前选择器匹配不中当前元素直接 continue\n  // 2. 当前元素匹配中了，就一直往外寻找父级元素找到能匹配上选择器的元素\n  // 3. 最后检验匹配中的元素是否等于选择器的总数，是就是全部匹配了，不是就是不匹配\n  for (let rule of rules) {\n    let selectorParts = rule.selectors[0].split(' ').reverse()\n\n    if (!match(element, selectorParts[0])) continue\n\n    let matched = false\n\n    let j = 1\n    for (let i = 0; i &lt; elements.length; i++) {\n      if (match(elements[i], selectorParts[j])) j++\n    }\n\n    if (j &gt;= selectorParts.length) matched = true\n\n    if (matched) {\n      let computedStyle = element.computedStyle\n      for (let declaration of rule.declarations) {\n        if (!computedStyle[declaration.property])\n          computedStyle[declaration.property] = {}\n        computedStyle[declaration.property].value = declaration.value\n      }\n      console.log(computedStyle)\n    }\n  }\n}</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>看完代码的同学，或者自己去实现这个代码时候的同学，应该会发现这个代码中有一个问题。如果我们回去看看我们的 HTML 代码中的 style 样式表，我们发现 HTML 中的 <code>img</code> 标签会被两个 CSS 选择器匹配中，分别是 <code>body div #myId</code> 和 <code>body div img</code>。这样就会导致前面匹配中后加入 <code>computedStyle</code> 的属性值会被后面匹配中的属性值所覆盖。但是根据 CSS 中的权重规则，ID 选择器是高于标签选择器的。这个问题我们下一部分会和同学们一起解决掉哦。</p></blockquote>\n<h2 id=\"Specificity-的计算逻辑\"><a href=\"#Specificity-的计算逻辑\" class=\"headerlink\" title=\"Specificity 的计算逻辑\"></a>Specificity 的计算逻辑</h2><p>上一节的代码中，我们只是把匹配中的选择器中的属性直接覆盖上一个，但是其实在 CSS 里面是有一个 <code>specification</code> 的规定。<code>specification</code> 翻译成中文，很多时候都会被翻译成 <code>优先级</code>，当然在理论上是对的，但是在英文中呢，优先级是 <code>priority</code>，所以 <code>specificity</code> 是 <code>专指程度</code>。</p>\n<p>放在 CSS 中理解就是，ID 选择器中的专指度是会比 CLASS 选择器的高，所以 CSS 中的 <strong>ID 的属性会覆盖 CLASS 的属性</strong>。</p>\n<p>好我们先来理解一下 <code>specification</code> 是什么？</p>\n<ul>\n<li>首先 <code>specifity</code> 会有四个元素</li>\n<li>按照 CSS 中优先级的顺序来说就是 inline style &gt; id &gt; class &gt; tag</li>\n<li>所以把这个生成为 <code>specificity</code> 就是 <code>[0, 0, 0, 0]</code></li>\n<li>数组里面每一个数字都是代表在样式表中出现的次数</li>\n</ul>\n<p>下面我们用一些例子来分析一下，我们应该如何用 <code>specificity</code> 来分辨优先级的：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>A 组选择器</strong></p>\n<p>A 选择器：<code>div div #id</code><br>A 的 <code>specification</code> ：[0, 1, 0, 2]</p>\n<ul>\n<li>id 出现了一次，所以第二位数字是 <code>1</code></li>\n<li>div tag 出现了两次，所以第四位数是 <code>2</code></li>\n</ul>\n<p><strong>B 组选择器</strong></p>\n<p>B 选择器：<code>div #my #id</code></p>\n<p>B 的 <code>specification</code>：[0, 2, 0, 1]</p>\n<ul>\n<li>id 出现了两次，所以第二位数字是 <code>2</code></li>\n<li>div tag 出现了一次，所以第四位数是 <code>1</code></li>\n</ul></blockquote>\n<p>好，那么我们怎么去比较上面的两种选择器，那个更大呢？</p>\n<ol>\n<li>我们需要从左到右开始比对；</li>\n<li>遇到同位置的数值一样的，就可以直接跳过；</li>\n<li>直到我们找到一对数值是有不一样的，这个时候就看是哪个选择器中的数值更大，那个选择器的优先级就更高；</li>\n<li>只要有一对比对出大小后，后面的就不需要再比对了。</li>\n</ol>\n<p>用上面 A 和 B 两种选择器来做对比的话，第一对两个都是 <code>0</code>，所以可以直接跳过。</p>\n<p>然后第二位数值对，A 选择器是 <code>1</code>，B 选择器是 <code>2</code>，很明显 B 要比 A 大，所以 B 选择器中的属性就要覆盖 A 的。</p>\n<p>说到这里同学们应该都明白 CSS 中 <code>specificity</code> 的规则和对比原理了，下来我们一起来看看如何实现这个代码逻辑。</p>\n<ul>\n<li>CSS 规则根据 specificity 和后来优先规则覆盖</li>\n<li>specificity 是个四元组，越左边权重越高</li>\n<li>一个 CSS 规则的 specificity 根据包含的简单选择器相加而成</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>文件：parser.js 中添加一个 <code>specificity</code> 函数，来计算一个选择器的 specificity</p></blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">/**\n * 计算选择器的 specificity\n * @param {*} selector\n */\nfunction specificity(selector) {\n  let p = [0, 0, 0, 0]\n  let selectorParts = selector.split(' ')\n  for (let part of selectorParts) {\n    if (part.charAt(0) === '#') {\n      p[1] += 1\n    } else if (part.charAt(0) === '.') {\n      p[2] += 1\n    } else {\n      p[3] += 1\n    }\n  }\n  return p\n}</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>文件：parser.js 添加一个 <code>compare</code> 函数，来对比两个选择器的 specificity</p></blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">/**\n * 对比两个选择器的 specificity\n * @param {*} sp1\n * @param {*} sp2\n */\nfunction compare(sp1, sp2) {\n  for (let i = 0; i &lt;= 3; i++) {\n    if (i === 3) return sp1[3] - sp2[3]\n    if (sp1[i] - sp2[i]) return sp1[i] - sp2[i]\n  }\n}</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>文件：parser.js 的 <code>computeCSS</code> 中修改匹配中元素后的属性赋值逻辑</p></blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">/**\n * 对元素进行 CSS 计算\n * @param {*} element\n */\nfunction computeCSS(element) {\n  var elements = stack.slice().reverse()\n\n  if (!elements.computedStyle) element.computedStyle = {}\n  // 这里循环 CSS 规则，让规则与元素匹配\n  // 1. 如果当前选择器匹配不中当前元素直接 continue\n  // 2. 当前元素匹配中了，就一直往外寻找父级元素找到能匹配上选择器的元素\n  // 3. 最后检验匹配中的元素是否等于选择器的总数，是就是全部匹配了，不是就是不匹配\n  for (let rule of rules) {\n    let selectorParts = rule.selectors[0].split(' ').reverse()\n\n    if (!match(element, selectorParts[0])) continue\n\n    let matched = false\n\n    let j = 1\n    for (let i = 0; i &lt; elements.length; i++) {\n      if (match(elements[i], selectorParts[j])) j++\n    }\n\n    if (j &gt;= selectorParts.length) matched = true\n\n    if (matched) {\n      let sp = specificity(rule.selectors[0])\n      let computedStyle = element.computedStyle\n      for (let declaration of rule.declarations) {\n        if (!computedStyle[declaration.property])\n          computedStyle[declaration.property] = {}\n\n        if (!computedStyle[declaration.property].specificity) {\n          computedStyle[declaration.property].value = declaration.value\n          computedStyle[declaration.property].specificity = sp\n        } else if (\n          compare(computedStyle[declaration.property].specificity, sp) &lt; 0\n        ) {\n          computedStyle[declaration.property].value = declaration.value\n          computedStyle[declaration.property].specificity = sp\n        }\n      }\n    }\n  }\n}</code></pre>\n\n<p><img src=\"https://img-blog.csdnimg.cn/20200613135642518.png\"></p>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>我们这里就完成了浏览器工作原理中的 HTML 解析和 CSS 计算。</p>\n<p>下一篇文章我们来一起完成排版和渲染两个浏览器过程。敬请期待！</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200613135642518.png\"></p>\n<h1 id=\"推荐专栏\"><a href=\"#推荐专栏\" class=\"headerlink\" title=\"推荐专栏\"></a>推荐专栏</h1><p>小伙伴们可以<strong>查看或者订阅相关的专栏</strong>，从而集中阅读相关知识的文章哦。</p>\n<ul>\n<li><p>📖 <a href=\"https://blog.csdn.net/tridiamond6/category_10036942.html\">《数据结构与算法》</a> — 到了如今，如果想成为一个高级开发工程师或者进入大厂，不论岗位是前端、后端还是 AI，算法都是重中之重。也无论我们需要进入的公司的岗位是否最后是做算法工程师，前提面试就需要考算法。</p>\n</li>\n<li><p>📖 <a href=\"https://blog.csdn.net/tridiamond6/category_9782493.html\">《FCC 前端集训营》</a> — 根据 FreeCodeCamp 的学习课程，一起深入浅出学习前端。稳固前端知识，一起在 FreeCodeCamp 获得证书</p>\n</li>\n<li><p>📖 <a href=\"https://blog.csdn.net/tridiamond6/category_9782493.html\">《前端星球》</a> — 以实战为线索，深入浅出前端多维度的知识点。内含有多方面的前端知识文章，带领不懂前端的童鞋一起学习前端，在前端开发路上童鞋一起燃起心中那团火 🔥</p>\n</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20200613135642518.png\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200815153142398.png\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200620093918128.png#pic_center\"></p>\n","feature":true,"text":"上一部分我们完成了从 HTTP 发送 Request，到接收到 Response，并且把 Response 中的文本都解析出来。 这一部分我们主要讲解如何做 H...","link":"","photos":[],"count_time":{"symbolsCount":"34k","symbolsTime":"31 mins."},"categories":[{"name":"FrontEnd","slug":"FrontEnd","count":10,"path":"api/categories/FrontEnd.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":4,"path":"api/tags/JavaScript.json"},{"name":"Browser","slug":"Browser","count":2,"path":"api/tags/Browser.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#HTML-%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">HTML 解析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#HTML-parse-%E6%A8%A1%E5%9D%97%E7%9A%84%E6%96%87%E4%BB%B6%E6%8B%86%E5%88%86\"><span class=\"toc-text\">HTML parse 模块的文件拆分</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%94%A8%E6%9C%89%E6%95%88%E7%8A%B6%E6%80%81%E6%9C%BA-FSM-%E5%AE%9E%E7%8E%B0-HTML-%E7%9A%84%E5%88%86%E6%9E%90\"><span class=\"toc-text\">用有效状态机 (FSM) 实现 HTML 的分析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E6%9E%90%E6%A0%87%E7%AD%BE\"><span class=\"toc-text\">解析标签</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">创建元素</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%84%E7%90%86%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">处理属性</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%94%A8-token-%E6%9E%84%E5%BB%BA-DOM-%E6%A0%91\"><span class=\"toc-text\">用 token 构建 DOM 树</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B0%86%E6%96%87%E6%9C%AC%E8%8A%82%E7%82%B9%E5%8A%A0%E5%88%B0-DOM-%E6%A0%91\"><span class=\"toc-text\">将文本节点加到 DOM 树</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#CSS-%E8%AE%A1%E7%AE%97\"><span class=\"toc-text\">CSS 计算</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%94%B6%E9%9B%86-CSS-%E8%A7%84%E5%88%99\"><span class=\"toc-text\">收集 CSS 规则</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B7%BB%E5%8A%A0%E8%B0%83%E7%94%A8\"><span class=\"toc-text\">添加调用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96%E7%88%B6%E5%85%83%E7%B4%A0%E5%BA%8F%E5%88%97\"><span class=\"toc-text\">获取父元素序列</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%80%89%E6%8B%A9%E5%99%A8%E4%B8%8E%E5%85%83%E7%B4%A0%E7%9A%84%E5%8C%B9%E9%85%8D\"><span class=\"toc-text\">选择器与元素的匹配</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AE%A1%E7%AE%97%E9%80%89%E6%8B%A9%E5%99%A8%E4%B8%8E%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">计算选择器与元素</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%94%9F%E6%88%90-computed-%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">生成 computed 属性</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Specificity-%E7%9A%84%E8%AE%A1%E7%AE%97%E9%80%BB%E8%BE%91\"><span class=\"toc-text\">Specificity 的计算逻辑</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%9C%80%E5%90%8E\"><span class=\"toc-text\">最后</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%8E%A8%E8%8D%90%E4%B8%93%E6%A0%8F\"><span class=\"toc-text\">推荐专栏</span></a></li></ol>","author":{"name":"三钻","slug":"blog-author","avatar":"https://res.cloudinary.com/tridiamond/image/upload/v1625037705/ObsidianestLogo-hex_hecqbw.png","link":"/","description":"<p>Programming a piece of art.</p> <p>用<b>匠人精神</b>开发出<b>艺术</b>。</p>","socials":{"github":"https://github.com/TriDiamond","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/TriDiamond6","juejin":"https://juejin.cn/user/1873223546578589","customs":{"bilibili":{"icon":"https://tridiamond.tech/svg/bilibili.svg","link":"https://live.bilibili.com/22619211"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"Aurora 自定义容器（Custom Containers）","uid":"b695af22372019b5213d1466cd06b4ba","slug":"b695af22372019b5213d1466cd06b4ba","date":"2021-05-02T15:19:24.000Z","updated":"2023-08-18T12:19:22.314Z","comments":true,"path":"api/articles/b695af22372019b5213d1466cd06b4ba.json","keywords":null,"cover":"https://source.unsplash.com/ukzHlkoz1IE/1200x628","text":"Aurora 添加了与 VuePress 一样的自定义容器, 包括提示 (tip)、注意 (warning)、特别注意 (danger) 和隐藏内容 (details)...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"Aurora","slug":"Aurora","count":1,"path":"api/categories/Aurora.json"}],"tags":[{"name":"aurora","slug":"aurora","count":1,"path":"api/tags/aurora.json"},{"name":"project-blog","slug":"project-blog","count":1,"path":"api/tags/project-blog.json"}],"author":{"name":"三钻","slug":"blog-author","avatar":"https://res.cloudinary.com/tridiamond/image/upload/v1625037705/ObsidianestLogo-hex_hecqbw.png","link":"/","description":"<p>Programming a piece of art.</p> <p>用<b>匠人精神</b>开发出<b>艺术</b>。</p>","socials":{"github":"https://github.com/TriDiamond","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/TriDiamond6","juejin":"https://juejin.cn/user/1873223546578589","customs":{"bilibili":{"icon":"https://tridiamond.tech/svg/bilibili.svg","link":"https://live.bilibili.com/22619211"}}}},"feature":true},"next_post":{"title":"前端必看的8个HTML+CSS技巧","uid":"020b052a924b8fcc2ed6531b89a7e5d7","slug":"020b052a924b8fcc2ed6531b89a7e5d7","date":"2020-04-06T21:14:05.000Z","updated":"2023-08-18T12:19:22.314Z","comments":true,"path":"api/articles/020b052a924b8fcc2ed6531b89a7e5d7.json","keywords":null,"cover":"https://res.cloudinary.com/tridiamond/image/upload/v1690996333/blog/20200401220041648_ofuduk.gif","text":"CSS 是一个很独特的语言。看起来非常简单，但是某种特殊效果看似简单，实现起来就颇有难度。这篇文章主要是给在学习前端的童鞋分享一些新的 CSS 技巧，一些在前端...","link":"","photos":[],"count_time":{"symbolsCount":"20k","symbolsTime":"19 mins."},"categories":[{"name":"FrontEnd","slug":"FrontEnd","count":10,"path":"api/categories/FrontEnd.json"}],"tags":[{"name":"HTML&CSS","slug":"HTML-CSS","count":4,"path":"api/tags/HTML-CSS.json"},{"name":"CSS Animation","slug":"CSS-Animation","count":1,"path":"api/tags/CSS-Animation.json"}],"author":{"name":"三钻","slug":"blog-author","avatar":"https://res.cloudinary.com/tridiamond/image/upload/v1625037705/ObsidianestLogo-hex_hecqbw.png","link":"/","description":"<p>Programming a piece of art.</p> <p>用<b>匠人精神</b>开发出<b>艺术</b>。</p>","socials":{"github":"https://github.com/TriDiamond","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/TriDiamond6","juejin":"https://juejin.cn/user/1873223546578589","customs":{"bilibili":{"icon":"https://tridiamond.tech/svg/bilibili.svg","link":"https://live.bilibili.com/22619211"}}}},"feature":true}}