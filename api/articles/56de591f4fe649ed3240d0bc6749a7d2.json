{"title":"浏览器工作原理 — 之 HTTP 请求与解析","uid":"56de591f4fe649ed3240d0bc6749a7d2","slug":"56de591f4fe649ed3240d0bc6749a7d2","date":"2020-08-15T18:49:36.000Z","updated":"2023-08-22T04:39:51.986Z","comments":true,"path":"api/articles/56de591f4fe649ed3240d0bc6749a7d2.json","keywords":null,"cover":"https://source.unsplash.com/pOwKTIgjKjU/1200x628","content":"<p>浏览器工作原理是一块非常重要的内容，我们经常看到的 <code>重绘</code> 、<code>重排</code> 或者一些讲解 CSS 属性的时候，都会用到一些浏览器工作原理的知识来讲解。理论化学习浏览器工作原理，效果不是很大，而且很枯燥，所以这里我们从零开始用 <code>JavaScript</code> 来实现一个浏览器。</p>\n<p>通过自己实现一遍简单的浏览器，我们会对浏览器的基本原理有更为深刻的理解。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200613135642518.png\"></p>\n<h1 id=\"浏览器基础渲染流程\"><a href=\"#浏览器基础渲染流程\" class=\"headerlink\" title=\"浏览器基础渲染流程\"></a>浏览器基础渲染流程</h1><p><img src=\"https://img-blog.csdnimg.cn/20200807200842150.png\"></p>\n<ul>\n<li>首先浏览器是由 5 个步骤完成的整体渲染</li>\n<li>我们从 URL 访问一个网页，经过浏览器的解析和渲染后成为了 Bitmap</li>\n<li>最后通过我们的显卡驱动设配出去画面，让我们看到完成的页面</li>\n<li>这是一个浏览器的渲染流程</li>\n<li>这里我们只实现一个简单的基础流程，但是真正的浏览器还包含了很多功能，比如历史等等</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>我们主要需要完成的是从 URL 请求到 Bitmap 页面展示的整个流程就可以了。</p></blockquote>\n<p>浏览器流程：</p>\n<ol>\n<li><code>URL</code> 部分，经过 <code>HTTP</code> 请求，然后解析返回内容，然后提取 <code>HTML</code> 内容</li>\n<li>得到 <code>HTML</code> 后，我们可以通过文本分析（parse），然后把 HTML 的文本编程一个 <code>DOM</code> 树</li>\n<li>这个时候的 <code>DOM</code> 树是光秃秃的，下一步我们进行 CSS 计算（CSS computing），最终把 CSS 挂载在这个 DOM 树上</li>\n<li>经过计算后，我们就拥有一个有样式的 DOM 树，这个时候我们就可以布局（或者排版）了</li>\n<li>通过布局计算，每一个 DOM 都会得到一个计算后的盒（当然实际浏览器中是每个 CSS 都会生成一个盒，但是为了简化这个，我们这里只做到每个 DOM 只生成一个盒即可）</li>\n<li>最后我们就可以开始渲染（Render），把这个 DOM 树该有背景图的有背景图，该有背景色的有背景色，最后把这些样式画到一张图片上。然后我们可以通过操作系统和硬件驱动提供的 API 接口，展示出来给用户看了。</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/20200613135642518.png\"></p>\n<h1 id=\"有限状态机去处理字符串\"><a href=\"#有限状态机去处理字符串\" class=\"headerlink\" title=\"有限状态机去处理字符串\"></a>有限状态机去处理字符串</h1><p>因为这个处理字符串是整个的浏览器里面贯穿使用的技巧，如果不会用这个状态机，后面实现和读浏览器实现的代码会非常吃力。所以这里我们先讲讲什么是有限状态机。</p>\n<ul>\n<li><strong>每一个状态都是一个机器</strong><ul>\n<li>每个机器都是互相解耦，强有力的抽象机制</li>\n<li>在每一个机器里，我们可以做计算、存储、输出等</li>\n<li>所有的这些机器接受的输入是一致的</li>\n<li>状态机的每一个机器本身没有状态，如果我们用函数来表达的话，它应该是纯函数（无副作用）</li>\n<li>无副作用指的是：不应该再受外部的输入控制，输入是可以的</li>\n</ul>\n</li>\n<li><strong>每一个机器知道下一个状态</strong><ul>\n<li>每一个机器都有确定的下一个状态（Moore）</li>\n<li>每一个机器根据输入决定下一个状态（Mealy）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"JavaScript-中如何实现\"><a href=\"#JavaScript-中如何实现\" class=\"headerlink\" title=\"JavaScript 中如何实现\"></a>JavaScript 中如何实现</h2><p>Mealy 状态机：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">// 每个函数是一个状态\nfunction state(input) {\n  // 函数参数就是输入\n  // 在函数中，可以自由地编写代码，处理每个状态的逻辑\n  return next; // 返回值作为下一个状态\n}\n\n/** ========= 以下是调试 ========= */\nwhile (input) {\n  // 获取输入\n  state = state(input); // 把状态机的返回值作为下一个状态\n}</code></pre>\n\n<ul>\n<li>以上代码我们看到，每一个函数是一个状态</li>\n<li>然后函数的参数是输入 <code>input</code></li>\n<li>这个函数的返回值就是下一个状态，也就意味着下一个返回值一定得是一个状态函数</li>\n<li>状态机理想的实现方式：一系列返回状态函数的一批状态函数</li>\n<li>调用状态函数的时候，往往会用一个循环来获取输入，然后通过 <code>state = state(input)</code>，来让状态机接收输入来完成状态切换</li>\n<li><code>Mealy</code> 型状态机，返回值一定是根据 <code>input</code> 返回下一个状态</li>\n<li><code>Moore</code> 型状态机，返回值是与 <code>input</code> 没有任何关系，都是固定的状态返回</li>\n</ul>\n<h2 id=\"不使用状态机处理字符串\"><a href=\"#不使用状态机处理字符串\" class=\"headerlink\" title=\"不使用状态机处理字符串\"></a>不使用状态机处理字符串</h2><p>我们首先了解一下，在不使用状态机的情况下来实现一些字符串的处理方式：</p>\n<p><strong>第一问题：在一个字符串中，找到字符“a”</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function match(string) {\n  for (let letter of string) {\n    if (letter == 'a') return true;\n  }\n  return false;\n}\n\nconsole.log(match('I am TriDiamond'));</code></pre>\n\n<p><strong>第二个问题：不准使用正则表达式，纯粹用 JavaScript 的逻辑实现：在一个字符串中，找到字符“ab”</strong></p>\n<p>「直接寻找 <code>a</code> 和 <code>b</code>，都找到时返回」</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">/**\n * 直接寻找 `a` 和 `b`，都找到时返回\n * @param {*} string 被匹配的字符\n */\nfunction matchAB(string) {\n  let hasA = false;\n  for (let letter of string) {\n    if (letter == 'a') {\n      hasA = true;\n    } else if (hasA &amp;&amp; letter == 'b') {\n      return true;\n    } else {\n      hasA = false;\n    }\n  }\n  return false;\n}\n\nconsole.log(matchAB('hello abert'));</code></pre>\n\n<p><strong>第三个问题：不准使用正则表达式，纯粹用 JavaScript 的逻辑实现：在一个字符串中，找到字符“abcdef”</strong></p>\n<p>方法一：「使用暂存空间，移动指针来检测」</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">/**\n * 使用暂存空间，移动指针来检测\n * @param {*} match 需要匹配的字符\n * @param {*} string 被匹配的字符\n */\nfunction matchString(match, string) {\n  const resultLetters = match.split(''); // 需要匹配的字符拆解成数组来记录\n  const stringArray = string.split(''); // 把被匹配的字符串内容也拆解成数组\n  let index = 0; // 匹配字符串的指针\n\n  for (let i = 0; i &lt;= stringArray.length; i++) {\n    // 因为要保证字符的绝对匹配，如 “ab” 不能是 \"abc\",不能是 \"a b\"\n    // 所以这里需要两个字符必须是有顺序的关系的\n    if (stringArray[i] == resultLetters[index]) {\n      // 如果找到一个字符是吻合的，就 index + 1 找下一个字符\n      index++;\n    } else {\n      // 如果下一个字符不吻合，就重置重新匹配\n      index = 0;\n    }\n    // 如果已经匹配完所有的字符了，直接可以返回 true\n    // 证明字符中含有需要寻找的字符\n    if (index &gt; resultLetters.length - 1) return true;\n  }\n  return false;\n}\n\nconsole.log('方法1', matchString('abcdef', 'hello abert abcdef'));</code></pre>\n\n<p>方法二：「使用 <code>substring</code>和匹配字符的长度来截取字符，看是否等于答案」</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">/**\n * 通用字符串匹配 - 参考方法2（使用substring）\n * @param {*} match 需要匹配的字符\n * @param {*} string 被匹配的字符\n */\nfunction matchWithSubstring(match, string) {\n  for (let i = 0; i &lt; string.length - 1; i++) {\n    if (string.substring(i, i + match.length) === match) {\n      return true;\n    }\n  }\n  return false;\n}\n\nconsole.log('方法2', matchWithSubstring('abcdef', 'hello abert abcdef'));</code></pre>\n\n<p>方法三：「逐个查找，直到找到最终结果」</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">/**\n * 逐个查找，直到找到最终结果\n * @param {*} string 被匹配的字符\n */\nfunction match(string) {\n  let matchStatus = [false, false, false, false, false, false];\n  let matchLetters = ['a', 'b', 'c', 'd', 'e', 'f'];\n  let statusIndex = 0;\n\n  for (let letter of string) {\n    if (letter == matchLetters[0]) {\n      matchStatus[0] = true;\n      statusIndex++;\n    } else if (matchStatus[statusIndex - 1] &amp;&amp; letter == matchLetters[statusIndex]) {\n      matchStatus[statusIndex] = true;\n      statusIndex++;\n    } else {\n      matchStatus = [false, false, false, false, false, false];\n      statusIndex = 0;\n    }\n\n    if (statusIndex &gt; matchLetters.length - 1) return true;\n  }\n  return false;\n}\n\nconsole.log('方法3', match('hello abert abcdef'));</code></pre>\n\n<h2 id=\"使用状态机处理字符\"><a href=\"#使用状态机处理字符\" class=\"headerlink\" title=\"使用状态机处理字符\"></a>使用状态机处理字符</h2><p>这里我们使用状态机的方式来实现：<strong>在一个字符串中，找到字符“abcdef”</strong></p>\n<ul>\n<li>首先每一个状态都是状态函数</li>\n<li>我们应该有一个开始状态和结束状态函数，分别问题 <code>start</code> 和 <code>end</code></li>\n<li>状态函数名字都代表当前状态的情况 <code>matchedA</code> 就是已经匹配中 <code>a</code> 字符了，以此类推</li>\n<li>每一个状态中的逻辑就是匹配下一个字符</li>\n<li>如果匹配成功返回下一个状态函数</li>\n<li>如果匹配失败返回开始状态 <code>start</code></li>\n<li>因为字符中最后一个是 <code>f</code> 字符，所以 <code>matchedE</code> 成功后，可以直接返回 结束状态<code>end</code></li>\n<li><code>end</code> 这个结束状态，也被称为陷阱方法 (Trap)，因为状态转变结束了，所以让状态一直停留在这里，知道循环结束</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">/**\n * 状态机字符串匹配\n * @param {*} string\n */\nfunction match(string) {\n  let state = start;\n\n  for (let letter of string) {\n    state = state(letter); // 状态切换\n  }\n\n  return state === end; // 如果最后的状态函数是 `end` 即返回 true\n}\n\nfunction start(letter) {\n  if (letter === 'a') return matchedA;\n  return start;\n}\n\nfunction end(letter) {\n  return end;\n}\n\nfunction matchedA(letter) {\n  if (letter === 'b') return matchedB;\n  return start(letter);\n}\n\nfunction matchedB(letter) {\n  if (letter === 'c') return matchedC;\n  return start(letter);\n}\n\nfunction matchedC(letter) {\n  if (letter === 'd') return matchedD;\n  return start(letter);\n}\n\nfunction matchedD(letter) {\n  if (letter === 'e') return matchedE;\n  return start(letter);\n}\n\nfunction matchedE(letter) {\n  if (letter === 'f') return end(letter);\n  return start(letter);\n}\n\nconsole.log(match('I am abcdef'));</code></pre>\n\n<p><strong>问题升级：用状态机实现字符串“abcabx”的解析</strong></p>\n<ul>\n<li>这个问题与上面的区别在于”ab”有重复</li>\n<li>所以我们分析的逻辑应该是：<ul>\n<li>第一次 “b” 后面是 “c”，而第二次 “b” 后面就应该是 “x”</li>\n<li>如果第二次的后面不是 “x” 的话就回到上一个判断状态函数</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">/**\n * 状态机匹配字符串\n * @param {*} string 被匹配的字符\n */\nfunction match(string) {\n  let state = start;\n\n  for (let letter of string) {\n    state = state(letter);\n  }\n\n  return state === end;\n}\n\nfunction start(letter) {\n  if (letter === 'a') return matchedA;\n  return start;\n}\n\nfunction end(letter) {\n  return end;\n}\n\nfunction matchedA(letter) {\n  if (letter === 'b') return matchedB;\n  return start(letter);\n}\n\nfunction matchedB(letter) {\n  if (letter === 'c') return matchedC;\n  return start(letter);\n}\n\nfunction matchedC(letter) {\n  if (letter === 'a') return matchedA2;\n  return start(letter);\n}\n\nfunction matchedA2(letter) {\n  if (letter === 'b') return matchedB2;\n  return start(letter);\n}\n\nfunction matchedB2(letter) {\n  if (letter === 'x') return end;\n  return matchedB(letter);\n}\n\nconsole.log('result: ', match('abcabcabx'));</code></pre>\n\n<p><img src=\"https://img-blog.csdnimg.cn/20200613135642518.png\"></p>\n<h1 id=\"HTTP-协议解析基础知识\"><a href=\"#HTTP-协议解析基础知识\" class=\"headerlink\" title=\"HTTP 协议解析基础知识\"></a>HTTP 协议解析基础知识</h1><h2 id=\"ISO-OSI-七层网络模型\"><a href=\"#ISO-OSI-七层网络模型\" class=\"headerlink\" title=\"ISO-OSI 七层网络模型\"></a>ISO-OSI 七层网络模型</h2><p><strong>HTTP</strong></p>\n<ul>\n<li>组成：<ul>\n<li>应用</li>\n<li>表示</li>\n<li>会话</li>\n</ul>\n</li>\n<li>对应 node 的代码里，我们有熟悉的 <code>require('http')</code></li>\n</ul>\n<p><strong>TCP</strong></p>\n<ul>\n<li>组成：<ul>\n<li>传输</li>\n</ul>\n</li>\n<li>因为网页是需要可靠传输，所以我们只关心 TCP</li>\n</ul>\n<p><strong>Internet</strong></p>\n<ul>\n<li>组成：<ul>\n<li>网络</li>\n</ul>\n</li>\n<li>有时候讲上网有两层意思<ul>\n<li>网页所在的应用层的协议（外网）—— 负责数据传输的是 Internet</li>\n<li>公司内网，叫 Intranet</li>\n</ul>\n</li>\n</ul>\n<p><strong>4G/5G/Wi-Fi</strong></p>\n<ul>\n<li>组成：<ul>\n<li>数据链路</li>\n<li>物理层</li>\n</ul>\n</li>\n<li>为了完成对数据准确的传输</li>\n<li>传输都是点对点的传输</li>\n<li>必须有直接的连接才能进行传输</li>\n</ul>\n<h3 id=\"TCP-与-IP-的基础知识\"><a href=\"#TCP-与-IP-的基础知识\" class=\"headerlink\" title=\"TCP 与 IP 的基础知识\"></a>TCP 与 IP 的基础知识</h3><ul>\n<li>流<ul>\n<li>TCP 层中传输数据的概念是 “流”</li>\n<li>流是一种没有明显的分割单位</li>\n<li>它只保证前后的顺序是正确的</li>\n</ul>\n</li>\n<li>端口<ul>\n<li>TCP 协议是被计算机里面的软件所使用的</li>\n<li>每一个软件都会去从网卡去拿数据</li>\n<li>端口决定哪一个数据分配给哪一个软件</li>\n<li>对应 node.js 的话就是应用 <code>require('net')</code></li>\n</ul>\n</li>\n<li>包<ul>\n<li>TCP 的传输概念就是一个一个的数据包</li>\n<li>每一个数据包可大可小</li>\n<li>这个取决于你整个的网络中间设备的传输能力</li>\n</ul>\n</li>\n<li>IP 地址<ul>\n<li>IP 根据地址去找到数据包应该从哪里到哪里</li>\n<li>在 Internet 上的连接关系非常复杂，中间就会有一些大型的路由节点</li>\n<li>当我们访问一个 IP 地址时，就会连接上我们的小区地址上，然后到电信的主干</li>\n<li>如果是访问外国的话，就会再上到国际的主干地址上</li>\n<li>这个 IP 地址是唯一的标识，连入 Internet 上的每一个设备</li>\n<li>所以 IP 包，就是通过 IP 地址找到自己需要被传输到哪里</li>\n</ul>\n</li>\n<li>libnet/libpcap<ul>\n<li>IP 协议需要调用到 C++ 的这两个库</li>\n<li>libnet 负责构造 IP 包并且发送</li>\n<li>labpcap 负责从网卡抓取所有流经网卡的 IP 包</li>\n<li>如果我们去用交换机而不是路由器去组网，我们用底层的 labpcap 包就能抓到很多本来不属于发给我们的 IP 包</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h2><ul>\n<li>组成<ul>\n<li>Request 请求</li>\n<li>Response 返回</li>\n</ul>\n</li>\n<li>相对于 TCP 这种全双工通道，就是可以发也可以收，没有优先关系</li>\n<li>而 HTTP 特别的是必须得先由客户端发起一个 request</li>\n<li>然后服务端回来一个 response</li>\n<li>所以每一个 request 必定有一个对应的 response</li>\n<li>如果 request 或者 response 多了都说明协议出错</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20200613135642518.png\"></p>\n<h1 id=\"HTTP-请求-——-服务端环境准备\"><a href=\"#HTTP-请求-——-服务端环境准备\" class=\"headerlink\" title=\"HTTP 请求 —— 服务端环境准备\"></a>HTTP 请求 —— 服务端环境准备</h1><p>在我们编写自己的浏览器之前，我们首先建立一个 node.js 服务端。</p>\n<p>首先我们编写一个 <code>node.js</code> 的服务端：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const http = require('http');\n\nhttp\n  .createServer((request, response) =&gt; {\n    let body = [];\n    request\n      .on('error', (err) =&gt; {\n        console.error(err);\n      })\n      .on('data', (chunk) =&gt; {\n        body.push(chunk.toString());\n      })\n      .on('end', () =&gt; {\n        body = Buffer.concat(body).toString();\n        console.log('body', body);\n        response.writeHead(200, { 'Content-Type': 'text/html' });\n        response.end(' Hello World\\n');\n      });\n  })\n  .listen(8080);\n\nconsole.log('server started');</code></pre>\n\n<h2 id=\"了解-HTTP-Request-协议\"><a href=\"#了解-HTTP-Request-协议\" class=\"headerlink\" title=\"了解 HTTP Request 协议\"></a>了解 HTTP Request 协议</h2><p>在编写我们的客户端代码之前，我们需要先了解一下 HTTP 协议。</p>\n<p>我们先来看看 HTTP 协议的 request 部分：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>POST / HTTP/1.1</p>\n<p>Host: 127.0.0.1</p>\n<p>Content-Type: application/x-www-form-urlencoded</p>\n<p>field1=aaa&amp;code=x%3D1</p></blockquote>\n<ul>\n<li>HTTP 协议是一个文本型的协议，文本型的协议一般来说与二进制的协议是相对的，也意味着这个协议里面所有内容都是字符串，每一个字节都是字符串的一部分。</li>\n<li>HTTP 协议的第一行叫做 <code>request line</code>，包含了三个部分：<ul>\n<li>Method：例如 POST，GET 等</li>\n<li>Path：默认就是 “/”</li>\n<li>HTTP 和 HTTP 版本：HTTP/1.1</li>\n</ul>\n</li>\n<li>然后接下来就是 <code>Headers</code><ul>\n<li>Header 的行数不固定</li>\n<li>每一行都是以一个冒号分割了 <code>key: value</code> 格式</li>\n<li>Headers 是以空行进行结束</li>\n</ul>\n</li>\n<li>最后的一部分就是 <code>body</code> 部分：<ul>\n<li>这个部分的内容是以 <code>Content-Type</code>来决定的</li>\n<li>Content-Type 规定了什么格式，那么 body 就用什么格式来写</li>\n</ul>\n</li>\n</ul>\n<p>接下来我们就可以开始编写代码了！</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200613135642518.png\"></p>\n<h1 id=\"实现-HTTP-请求\"><a href=\"#实现-HTTP-请求\" class=\"headerlink\" title=\"实现 HTTP 请求\"></a>实现 HTTP 请求</h1><ul>\n<li>设计一个 HTTP 请求的类</li>\n<li>content type 是一个必要的字段，要有默认值</li>\n<li>body 是 KV 格式</li>\n<li>不同的 content-type 影响 body 的格式</li>\n</ul>\n<h2 id=\"Request-类\"><a href=\"#Request-类\" class=\"headerlink\" title=\"Request 类\"></a>Request 类</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">class Request {\n  constructor(options) {\n    // 首先在 constructor 赋予需要使用的默认值\n    this.method = options.method || 'GET';\n    this.host = options.host;\n    this.port = options.port || 80;\n    this.path = options.path || '/';\n    this.body = options.body || {};\n    this.headers = options.headers || {};\n\n    if (!this.headers['Content-Type']) {\n      this.headers['Content-Type'] = 'application/x-www-form-urlencoded';\n    }\n    // 根据 Content-Type 转换 body 的格式\n    if (this.headers['Content-Type'] === 'application/json') {\n      this.bodyText = JSON.stringify(this.body);\n    } else if (this.headers['Content-Type'] === 'application/x-www-form-urlencoded') {\n      this.bodyText = Object.keys(this.body)\n        .map((key) =&gt; `${key}=${encodeURIComponent(this.body[key])}`)\n        .join('&amp;');\n    }\n    // 自动计算 body 内容长度，如果长度不对，就会是一个非法请求\n    this.headers['Content-Length'] = this.bodyText.length;\n  }\n  // 发送请求的方法，返回 Promise 对象\n  send() {\n    return new Promise((resolve, reject) =&gt; {\n      //......\n    });\n  }\n}</code></pre>\n\n<h2 id=\"请求方法\"><a href=\"#请求方法\" class=\"headerlink\" title=\"请求方法\"></a>请求方法</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">/**\n * 请求方法\n */\nvoid (async function () {\n  let request = new Request({\n    method: 'POST',\n    host: '127.0.0.1',\n    port: '8080',\n    path: '/',\n    headers: {\n      ['X-Foo2']: 'custom'\n    },\n    body: {\n      name: 'tridiamond'\n    }\n  });\n\n  let response = await request.end();\n\n  console.log(response);\n})();</code></pre>\n\n<p><img src=\"https://img-blog.csdnimg.cn/20200613135642518.png\"></p>\n<h1 id=\"Request-类中的-send-函数编写\"><a href=\"#Request-类中的-send-函数编写\" class=\"headerlink\" title=\"Request 类中的 send 函数编写\"></a>Request 类中的 send 函数编写</h1><ul>\n<li>Send 函数是一个 Promise 的形式</li>\n<li>所以在 send 的过程中会逐步收到 response</li>\n<li>最后把 response 构造好之后再让 Promise 得到 resolve</li>\n<li>因为过程是逐步收到信息的，我们需要设计一个 ResponseParse</li>\n<li>这样 Parse 可以通过逐步地去接收 response 的信息来构造 response 对象不同的部分</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">// 发送请求的方法，返回 Promise 对象\n  send() {\n    return new Promise((resolve, reject) =&gt; {\n      const parser = new ResponseParser();\n      resolve('');\n    });\n  }</code></pre>\n\n<h2 id=\"设计-ResponseParser\"><a href=\"#设计-ResponseParser\" class=\"headerlink\" title=\"设计 ResponseParser\"></a>设计 ResponseParser</h2><ul>\n<li>Receive 函数接收字符串</li>\n<li>然后用状态机对逐个字符串进行处理</li>\n<li>所以我们需要循环每个字符串，然后加入 <code>recieveChar</code> 函数来对每个字符进行处理</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">class ResponseParser {\n  constructor() {}\n  receive(string) {\n    for (let i = 0; i &lt; string.length; i++) {\n      this.receiveChar(string.charAt(i));\n    }\n  }\n  receiveChar(char) {}\n}</code></pre>\n\n<h2 id=\"了解-HTTP-Response-协议\"><a href=\"#了解-HTTP-Response-协议\" class=\"headerlink\" title=\"了解 HTTP Response 协议\"></a>了解 HTTP Response 协议</h2><p>在接下来的部分，我们需要在代码中解析 HTTP Response 中的内容，所以我先来了解一下 HTTP Response 中的内容。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>HTTP/1.1 200 OK</p>\n<p>Content-Type: text/html</p>\n<p>Date: Mon, 23 Dec 2019 06:46:19 GMT</p>\n<p>Connection: keep-alive</p>\n<p>Transfer-Encoding: chunked</p>\n<p>26</p>\n<html><body> Hello World <body></body></body></html>\n\n<p>0</p></blockquote>\n<ul>\n<li>首先第一行的 <code>status line</code> 与 request line 相反<ul>\n<li>第一部分是 HTTP 协议的版本：HTTP/1.1</li>\n<li>第二部分是 HTTP 状态码：200 (在实现我们的浏览器，为了更加简单一点，我们可以把 200 以外的状态为出错)</li>\n<li>第三部分是 HTTP 状态文本：OK</li>\n</ul>\n</li>\n<li>随后的部分就是 header 部分<ul>\n<li>HTML 的 request 和 response 都是包含 header 的</li>\n<li>它的格式跟 request 是完全一致的</li>\n<li>最后是一个空行，用来分割 headers 和 body 内容的部分的</li>\n</ul>\n</li>\n<li>最后这里的就是 body 部分了<ul>\n<li>这里 body 的格式也是根据 Content-Type 来决定的</li>\n<li>这里有一种比较典型的格式叫做 <code>chunked body</code> (是 Node 默认返回的一种格式)</li>\n<li>Chunked body 是由一个十六进制的数字单独占一行</li>\n<li>后面跟着内容部分</li>\n<li>最后跟着一个十六进制的 0，0 之后就是整个 body 的结尾了</li>\n<li>这个也是用来分割 body 的内容</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"实现发送请求\"><a href=\"#实现发送请求\" class=\"headerlink\" title=\"实现发送请求\"></a>实现发送请求</h2><p>这里我们开始实战，通过实现 send 函数中的逻辑来真正发送请求到服务端。</p>\n<ul>\n<li>设计支持已有的 connection 或者自己新增 connection</li>\n<li>收到数据传给 parser</li>\n<li>根据 parser 的状态 resolve Promise</li>\n</ul>\n<p>通过以上思路，我们来实现代码：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">// 发送请求的方法，返回 Promise 对象\n  send(connection) {\n    return new Promise((resolve, reject) =&gt; {\n      const parser = new ResponseParser();\n      // 先判断 connection 是否有传送过来\n      // 没有就根据，Host 和 port 来创建一个 TCP 连接\n      // `toString` 是把请求参数按照 HTTP Request 的格式组装\n      if (connection) {\n        connection.write(this.toString());\n      } else {\n        connection = net.createConnection(\n          {\n            host: this.host,\n            port: this.port,\n          },\n          () =&gt; {\n            connection.write(this.toString());\n          }\n        );\n      }\n      // 监听 connection 的 data\n      // 然后原封不动传给 parser\n      // 如果 parser 已经结束的话，我们就可以进行 resolve\n      // 最后断开连接\n      connection.on('data', data =&gt; {\n        console.log(data.toString());\n        parser.receive(data.toString());\n\n        if (parser.isFinished) {\n          resolve(parser.response);\n          connection.end();\n        }\n      });\n      // 监听 connection 的 error\n      // 如果请求出现错误，首先 reject 这个promise\n      // 然后断开连接，避免占着连接的情况\n      connection.on('error', err =&gt; {\n        reject(err);\n        connection.end();\n      });\n    });\n  }\n  /**\n   * 组装 HTTP Request 文本内容\n   */\n  toString() {\n    return `${this.method} ${this.path} HTTP/1.1\\r\n      ${Object.keys(this.headers)\n        .map(key =&gt; `${key}: ${this.headers[key]}`)\n        .join('\\r\\n')}\\r\\r\n      ${this.bodyText}`;\n  }</code></pre>\n\n<p><img src=\"https://img-blog.csdnimg.cn/20200613135642518.png\"></p>\n<h1 id=\"实现-RequestParser-类\"><a href=\"#实现-RequestParser-类\" class=\"headerlink\" title=\"实现 RequestParser 类\"></a>实现 RequestParser 类</h1><p>现在我们来具体实现 RequestParser 类的代码。</p>\n<ul>\n<li>Response 必须分段构造，所以我们要用一个 Response Parser 来 “装配”</li>\n<li>ResponseParser 分段处理 Response Text，我们用状态机来分析文本结构</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">/**\n * Response 解析器\n */\nclass ResponseParser {\n  constructor() {\n    this.state = this.waitingStatusLine;\n    this.statusLine = '';\n    this.headers = {};\n    this.headerName = '';\n    this.headerValue = '';\n    this.bodyParser = null;\n  }\n\n  receive(string) {\n    for (let i = 0; i &lt; string.length; i++) {\n      this.state = this.state(string.charAt(i));\n    }\n  }\n\n  receiveEnd(char) {\n    return receiveEnd;\n  }\n\n  /**\n   * 等待状态行内容\n   * @param {*} char 文本\n   */\n  waitingStatusLine(char) {\n    if (char === '\\r') return this.waitingStatusLineEnd;\n    this.statusLine += char;\n    return this.waitingStatusLine;\n  }\n\n  /**\n   * 等待状态行结束\n   * @param {*} char 文本\n   */\n  waitingStatusLineEnd(char) {\n    if (char === '\\n') return this.waitingHeaderName;\n    return this.waitingStatusLineEnd;\n  }\n\n  /**\n   * 等待 Header 名\n   * @param {*} char 文本\n   */\n  waitingHeaderName(char) {\n    if (char === ':') return this.waitingHeaderSpace;\n    if (char === '\\r') return this.waitingHeaderBlockEnd;\n    this.headerName += char;\n    return this.waitingHeaderName;\n  }\n\n  /**\n   * 等待 Header 空格\n   * @param {*} char 文本\n   */\n  waitingHeaderSpace(char) {\n    if (char === ' ') return this.waitingHeaderValue;\n    return this.waitingHeaderSpace;\n  }\n\n  /**\n   * 等待 Header 值\n   * @param {*} char 文本\n   */\n  waitingHeaderValue(char) {\n    if (char === '\\r') {\n      this.headers[this.headerName] = this.headerValue;\n      this.headerName = '';\n      this.headerValue = '';\n      return this.waitingHeaderLineEnd;\n    }\n    this.headerValue += char;\n    return this.waitingHeaderValue;\n  }\n\n  /**\n   * 等待 Header 行结束\n   * @param {*} char 文本\n   */\n  waitingHeaderLineEnd(char) {\n    if (char === '\\n') return this.waitingHeaderName;\n    return this.waitingHeaderLineEnd;\n  }\n\n  /**\n   * 等待 Header 内容结束\n   * @param {*} char 文本\n   */\n  waitingHeaderBlockEnd(char) {\n    if (char === '\\n') return this.waitingBody;\n    return this.waitingHeaderBlockEnd;\n  }\n\n  /**\n   * 等待 body 内容\n   * @param {*} char 文本\n   */\n  waitingBody(char) {\n    console.log(char);\n    return this.waitingBody;\n  }\n}</code></pre>\n\n<p><img src=\"https://img-blog.csdnimg.cn/20200613135642518.png\"></p>\n<h1 id=\"实现-Body-内容解析器\"><a href=\"#实现-Body-内容解析器\" class=\"headerlink\" title=\"实现 Body 内容解析器\"></a>实现 Body 内容解析器</h1><p>最后我们来实现 Body 内容的解析逻辑。</p>\n<ul>\n<li>Response 的 body 可能根据 Content-Type 有不同的结构，因此我们会采用子 Parser 的结构来解决问题</li>\n<li>以 ChunkedBodyParser 为例，我们同样用状态机来处理 body 的格式</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">/**\n * Response 解析器\n */\nclass ResponseParser {\n  constructor() {\n    this.state = this.waitingStatusLine;\n    this.statusLine = '';\n    this.headers = {};\n    this.headerName = '';\n    this.headerValue = '';\n    this.bodyParser = null;\n  }\n\n  get isFinished() {\n    return this.bodyParser &amp;&amp; this.bodyParser.isFinished;\n  }\n\n  get response() {\n    this.statusLine.match(/HTTP\\/1.1 ([0-9]+) ([\\s\\S]+)/);\n    return {\n      statusCode: RegExp.$1,\n      statusText: RegExp.$2,\n      headers: this.headers,\n      body: this.bodyParser.content.join('')\n    };\n  }\n\n  receive(string) {\n    for (let i = 0; i &lt; string.length; i++) {\n      this.state = this.state(string.charAt(i));\n    }\n  }\n\n  receiveEnd(char) {\n    return receiveEnd;\n  }\n\n  /**\n   * 等待状态行内容\n   * @param {*} char 文本\n   */\n  waitingStatusLine(char) {\n    if (char === '\\r') return this.waitingStatusLineEnd;\n    this.statusLine += char;\n    return this.waitingStatusLine;\n  }\n\n  /**\n   * 等待状态行结束\n   * @param {*} char 文本\n   */\n  waitingStatusLineEnd(char) {\n    if (char === '\\n') return this.waitingHeaderName;\n    return this.waitingStatusLineEnd;\n  }\n\n  /**\n   * 等待 Header 名\n   * @param {*} char 文本\n   */\n  waitingHeaderName(char) {\n    if (char === ':') return this.waitingHeaderSpace;\n    if (char === '\\r') {\n      if (this.headers['Transfer-Encoding'] === 'chunked') {\n        this.bodyParser = new ChunkedBodyParser();\n      }\n      return this.waitingHeaderBlockEnd;\n    }\n    this.headerName += char;\n    return this.waitingHeaderName;\n  }\n\n  /**\n   * 等待 Header 空格\n   * @param {*} char 文本\n   */\n  waitingHeaderSpace(char) {\n    if (char === ' ') return this.waitingHeaderValue;\n    return this.waitingHeaderSpace;\n  }\n\n  /**\n   * 等待 Header 值\n   * @param {*} char 文本\n   */\n  waitingHeaderValue(char) {\n    if (char === '\\r') {\n      this.headers[this.headerName] = this.headerValue;\n      this.headerName = '';\n      this.headerValue = '';\n      return this.waitingHeaderLineEnd;\n    }\n    this.headerValue += char;\n    return this.waitingHeaderValue;\n  }\n\n  /**\n   * 等待 Header 行结束\n   * @param {*} char 文本\n   */\n  waitingHeaderLineEnd(char) {\n    if (char === '\\n') return this.waitingHeaderName;\n    return this.waitingHeaderLineEnd;\n  }\n\n  /**\n   * 等待 Header 内容结束\n   * @param {*} char 文本\n   */\n  waitingHeaderBlockEnd(char) {\n    if (char === '\\n') return this.waitingBody;\n    return this.waitingHeaderBlockEnd;\n  }\n\n  /**\n   * 等待 body 内容\n   * @param {*} char 文本\n   */\n  waitingBody(char) {\n    this.bodyParser.receiveChar(char);\n    return this.waitingBody;\n  }\n}\n\n/**\n * Chunked Body 解析器\n */\nclass ChunkedBodyParser {\n  constructor() {\n    this.state = this.waitingLength;\n    this.length = 0;\n    this.content = [];\n    this.isFinished = false;\n  }\n\n  receiveChar(char) {\n    this.state = this.state(char);\n  }\n\n  /**\n   * 等待 Body 长度\n   * @param {*} char 文本\n   */\n  waitingLength(char) {\n    if (char === '\\r') {\n      if (this.length === 0) this.isFinished = true;\n      return this.waitingLengthLineEnd;\n    } else {\n      // 转换十六进制长度\n      this.length *= 16;\n      this.length += parseInt(char, 16);\n    }\n    return this.waitingLength;\n  }\n\n  /**\n   * 等待 Body line 结束\n   * @param {*} char 文本\n   */\n  waitingLengthLineEnd(char) {\n    if (char === '\\n') return this.readingTrunk;\n    return this.waitingLengthLineEnd;\n  }\n\n  /**\n   * 读取 Trunk 内容\n   * @param {*} char 文本\n   */\n  readingTrunk(char) {\n    this.content.push(char);\n    this.length--;\n    if (this.length === 0) return this.waitingNewLine;\n    return this.readingTrunk;\n  }\n\n  /**\n   * 等待新的一行\n   * @param {*} char 文本\n   */\n  waitingNewLine(char) {\n    if (char === '\\r') return this.waitingNewLineEnd;\n    return this.waitingNewLine;\n  }\n\n  /**\n   * 等待新的一行结束\n   * @param {*} char 文本\n   */\n  waitingNewLineEnd(char) {\n    if (char === '\\n') return this.waitingLength;\n    return this.waitingNewLineEnd;\n  }\n}</code></pre>\n\n<p><img src=\"https://img-blog.csdnimg.cn/20200613135642518.png\"></p>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>我是<font color=\"#60AAF8\"><b>三钻</b></font>，一个在<font color=\"#60AAF8\"><b>《技术银河》</b></font>中等你们一起来终生漂泊学习。</p>\n<p>点赞是力量，关注是认可，评论是关爱！下期再见 👋！</p></blockquote>\n<p>这里我们就实现了浏览器的 HTTP Request 请求，HTTP Response 解析的过程的代码。</p>\n<p>下一篇文我们来一起实现 HTTP 解析并且构建 DOM 树，然后进行 CSS 计算。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200613135642518.png\"></p>\n<h1 id=\"推荐专栏\"><a href=\"#推荐专栏\" class=\"headerlink\" title=\"推荐专栏\"></a>推荐专栏</h1><p>小伙伴们可以<strong>查看或者订阅相关的专栏</strong>，从而集中阅读相关知识的文章哦。</p>\n<ul>\n<li><p>📖 <a href=\"https://blog.csdn.net/tridiamond6/category_10036942.html\">《数据结构与算法》</a> — 到了如今，如果想成为一个高级开发工程师或者进入大厂，不论岗位是前端、后端还是 AI，算法都是重中之重。也无论我们需要进入的公司的岗位是否最后是做算法工程师，前提面试就需要考算法。</p>\n</li>\n<li><p>📖 <a href=\"https://blog.csdn.net/tridiamond6/category_9782493.html\">《FCC 前端集训营》</a> — 根据 FreeCodeCamp 的学习课程，一起深入浅出学习前端。稳固前端知识，一起在 FreeCodeCamp 获得证书</p>\n</li>\n<li><p>📖 <a href=\"https://blog.csdn.net/tridiamond6/category_9782493.html\">《前端星球》</a> — 以实战为线索，深入浅出前端多维度的知识点。内含有多方面的前端知识文章，带领不懂前端的童鞋一起学习前端，在前端开发路上童鞋一起燃起心中那团火 🔥</p>\n</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/20200613135642518.png\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200815153142398.png\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200620093918128.png\"></p>\n","text":"浏览器工作原理是一块非常重要的内容，我们经常看到的 重绘 、重排 或者一些讲解 CSS 属性的时候，都会用到一些浏览器工作原理的知识来讲解。理论化学习浏览器工作...","link":"","photos":[],"count_time":{"symbolsCount":"20k","symbolsTime":"18 mins."},"categories":[{"name":"FrontEnd","slug":"FrontEnd","count":10,"path":"api/categories/FrontEnd.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":4,"path":"api/tags/JavaScript.json"},{"name":"Browser","slug":"Browser","count":2,"path":"api/tags/Browser.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9F%BA%E7%A1%80%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">浏览器基础渲染流程</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA%E5%8E%BB%E5%A4%84%E7%90%86%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">有限状态机去处理字符串</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#JavaScript-%E4%B8%AD%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">JavaScript 中如何实现</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%8D%E4%BD%BF%E7%94%A8%E7%8A%B6%E6%80%81%E6%9C%BA%E5%A4%84%E7%90%86%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">不使用状态机处理字符串</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E7%8A%B6%E6%80%81%E6%9C%BA%E5%A4%84%E7%90%86%E5%AD%97%E7%AC%A6\"><span class=\"toc-text\">使用状态机处理字符</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#HTTP-%E5%8D%8F%E8%AE%AE%E8%A7%A3%E6%9E%90%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86\"><span class=\"toc-text\">HTTP 协议解析基础知识</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ISO-OSI-%E4%B8%83%E5%B1%82%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">ISO-OSI 七层网络模型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#TCP-%E4%B8%8E-IP-%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86\"><span class=\"toc-text\">TCP 与 IP 的基础知识</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#HTTP\"><span class=\"toc-text\">HTTP</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#HTTP-%E8%AF%B7%E6%B1%82-%E2%80%94%E2%80%94-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87\"><span class=\"toc-text\">HTTP 请求 —— 服务端环境准备</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%86%E8%A7%A3-HTTP-Request-%E5%8D%8F%E8%AE%AE\"><span class=\"toc-text\">了解 HTTP Request 协议</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0-HTTP-%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">实现 HTTP 请求</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Request-%E7%B1%BB\"><span class=\"toc-text\">Request 类</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">请求方法</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Request-%E7%B1%BB%E4%B8%AD%E7%9A%84-send-%E5%87%BD%E6%95%B0%E7%BC%96%E5%86%99\"><span class=\"toc-text\">Request 类中的 send 函数编写</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E8%AE%A1-ResponseParser\"><span class=\"toc-text\">设计 ResponseParser</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%86%E8%A7%A3-HTTP-Response-%E5%8D%8F%E8%AE%AE\"><span class=\"toc-text\">了解 HTTP Response 协议</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">实现发送请求</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0-RequestParser-%E7%B1%BB\"><span class=\"toc-text\">实现 RequestParser 类</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0-Body-%E5%86%85%E5%AE%B9%E8%A7%A3%E6%9E%90%E5%99%A8\"><span class=\"toc-text\">实现 Body 内容解析器</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%9C%80%E5%90%8E\"><span class=\"toc-text\">最后</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%8E%A8%E8%8D%90%E4%B8%93%E6%A0%8F\"><span class=\"toc-text\">推荐专栏</span></a></li></ol>","author":{"name":"三钻","slug":"blog-author","avatar":"https://ik.imagekit.io/bennyxguo/Friends%20Profiles/63ac2812183aa.png?updatedAt=1692289393174","link":"/","description":"<p>Programming a piece of art.</p> <p>用<b>匠人精神</b>开发出<b>艺术</b>。</p>","socials":{"github":"https://github.com/TriDiamond","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/TriDiamond6","juejin":"https://juejin.cn/user/1873223546578589","customs":{"bilibili":{"icon":"https://tridiamond.tech/svg/bilibili.svg","link":"https://live.bilibili.com/22619211"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"前端必看的8个HTML+CSS技巧","uid":"020b052a924b8fcc2ed6531b89a7e5d7","slug":"020b052a924b8fcc2ed6531b89a7e5d7","date":"2020-04-06T21:14:05.000Z","updated":"2023-08-22T04:39:51.986Z","comments":true,"path":"api/articles/020b052a924b8fcc2ed6531b89a7e5d7.json","keywords":null,"cover":"https://res.cloudinary.com/tridiamond/image/upload/v1690996333/blog/20200401220041648_ofuduk.gif","text":"CSS 是一个很独特的语言。看起来非常简单，但是某种特殊效果看似简单，实现起来就颇有难度。这篇文章主要是给在学习前端的童鞋分享一些新的 CSS 技巧，一些在前端...","link":"","photos":[],"count_time":{"symbolsCount":"20k","symbolsTime":"19 mins."},"categories":[{"name":"FrontEnd","slug":"FrontEnd","count":10,"path":"api/categories/FrontEnd.json"}],"tags":[{"name":"HTML&CSS","slug":"HTML-CSS","count":4,"path":"api/tags/HTML-CSS.json"},{"name":"CSS Animation","slug":"CSS-Animation","count":1,"path":"api/tags/CSS-Animation.json"}],"author":{"name":"三钻","slug":"blog-author","avatar":"https://ik.imagekit.io/bennyxguo/Friends%20Profiles/63ac2812183aa.png?updatedAt=1692289393174","link":"/","description":"<p>Programming a piece of art.</p> <p>用<b>匠人精神</b>开发出<b>艺术</b>。</p>","socials":{"github":"https://github.com/TriDiamond","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/TriDiamond6","juejin":"https://juejin.cn/user/1873223546578589","customs":{"bilibili":{"icon":"https://tridiamond.tech/svg/bilibili.svg","link":"https://live.bilibili.com/22619211"}}}},"feature":true},"next_post":{"title":"一篇文章搞懂前端学习方法与构建知识体系","uid":"78111f2bf31f70cf67b6b3119a253d63","slug":"78111f2bf31f70cf67b6b3119a253d63","date":"2020-08-07T14:55:14.000Z","updated":"2023-08-22T04:39:51.990Z","comments":true,"path":"api/articles/78111f2bf31f70cf67b6b3119a253d63.json","keywords":null,"cover":"https://source.unsplash.com/yQnyP1g5zl4/1200x628","text":"在大前端的成长路上，很多的同学都非常的迷茫，看到一座座越来越高的山。慢慢在工作中也对自己的职业发展也特别迷茫。有些粉丝也私信我问过我一些职业发展的问题，还有“我...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[{"name":"FrontEnd","slug":"FrontEnd","count":10,"path":"api/categories/FrontEnd.json"}],"tags":[{"name":"FrontEnd","slug":"FrontEnd","count":1,"path":"api/tags/FrontEnd.json"}],"author":{"name":"三钻","slug":"blog-author","avatar":"https://ik.imagekit.io/bennyxguo/Friends%20Profiles/63ac2812183aa.png?updatedAt=1692289393174","link":"/","description":"<p>Programming a piece of art.</p> <p>用<b>匠人精神</b>开发出<b>艺术</b>。</p>","socials":{"github":"https://github.com/TriDiamond","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/TriDiamond6","juejin":"https://juejin.cn/user/1873223546578589","customs":{"bilibili":{"icon":"https://tridiamond.tech/svg/bilibili.svg","link":"https://live.bilibili.com/22619211"}}}}}}